[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "ka/.external-ecmascript.js",
    "static": true,
    "longname": "ka/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "ka/api/authApi.js",
    "content": "import { fetchGETData, fetchPOSTData, downloadPostFile } from '../../ka/utils/fetchUtils.js';\r\nimport Loader from '../components/loader/Loader.js';\r\nimport ModalPopNotifs from '../components/modal/ModalPopNotifs.js';\r\nimport { modalPopNotifs } from '../modules/modals/modals.js';\r\n\r\n/**\r\n * URL для обращения к API\r\n * @constant\r\n * @type {string}\r\n * @default\r\n */\r\nconst API_URL = `${window.location.origin}/api/`;\r\n\r\n/**\r\n * URL для обращения к API\r\n * @constant\r\n * @type {string}\r\n * @default\r\n */\r\nconst API_URL2 = 'http://185.192.247.60:7128/';\r\n\r\n/**\r\n * Экземпляр загрузчика\r\n * @constant\r\n * @type {Loader}\r\n * @default\r\n */\r\nconst loader = new Loader('.loader-container');\r\n\r\n/**\r\n * Функция обратного вызова для начала\r\n * @function\r\n * @param {string} url - URL\r\n * @param {object} [data] - Данные\r\n * @returns {void}\r\n */\r\nconst defaultStartCallback = (url, data) => {\r\n    loader.show('Загрузка...');\r\n}\r\n\r\n/**\r\n * Функция обратного вызова при ошибке\r\n * @function\r\n * @param {Error} error - Ошибка\r\n * @param {string} url - URL\r\n * @returns {void}\r\n */\r\nconst defaultErrorCallback = (error, url) => {\r\n    console.log(error)\r\n    modalPopNotifs.addNotif(\r\n        'Ошибка',\r\n        `Произошла ошибка на стороне сервера: <a href=\"${url}\" target=\"_blank\">url</a>` +\r\n        `<br> <em>${error}</em>`,\r\n        ModalPopNotifs.TYPES.ERROR\r\n    );\r\n}\r\n\r\n/**\r\n * Функция обратного вызова при завершении\r\n * @function\r\n * @param {string} url - URL\r\n * @param {object} [data] - Данные\r\n * @returns {void}\r\n */\r\nconst defaultFinalCallback = (url, data) => {\r\n    loader.close();\r\n}\r\n\r\n/**\r\n * Класс для работы с авторизацией на сервере.\r\n *\r\n * @class AuthApi\r\n */\r\nexport class AuthApi {\r\n\r\n    /**\r\n     * Метод для авторизации на сервере.\r\n     *\r\n     * @param {string} login - Логин пользователя.\r\n     * @param {string} password - Пароль пользователя.\r\n     * @param {function} callback - Функция обратного вызова с результатами авторизации.\r\n     * @param {function} [startCallback=()=>{}] - Функция для вызова при начале извлечения.\r\n     * @param {function} [errorCallback=(error, url)=>console.error(url, error)] - Функция для вызова при\r\n     *   возникновении ошибки.\r\n     * @param {function} [finalCallback=()=>{}] - Функция для вызова при завершении извлечения.\r\n     */\r\n    static login(\r\n        login, password, callback, startCallback = defaultStartCallback,\r\n        errorCallback = defaultErrorCallback, finalCallback = defaultFinalCallback\r\n    ) {\r\n        // Составляем URL для отправки запроса авторизации\r\n        const url = new URL(`/Authorisation/Login`, API_URL2);\r\n        // Составляем данные для отправки\r\n        const data = {\r\n            login: login,\r\n            password: password,\r\n        }\r\n        // Отправляем запрос авторизации\r\n        fetchPOSTData(url, data, callback, startCallback, errorCallback, finalCallback)\r\n    }\r\n\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/api/authApi.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "API_URL",
    "memberof": "ka/api/authApi.js",
    "static": true,
    "longname": "ka/api/authApi.js~API_URL",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/authApi.js",
    "importStyle": null,
    "description": "URL для обращения к API",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      },
      {
        "tagName": "@default",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "API_URL2",
    "memberof": "ka/api/authApi.js",
    "static": true,
    "longname": "ka/api/authApi.js~API_URL2",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/authApi.js",
    "importStyle": null,
    "description": "URL для обращения к API",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      },
      {
        "tagName": "@default",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "loader",
    "memberof": "ka/api/authApi.js",
    "static": true,
    "longname": "ka/api/authApi.js~loader",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/authApi.js",
    "importStyle": null,
    "description": "Экземпляр загрузчика",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      },
      {
        "tagName": "@default",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Loader"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "defaultStartCallback",
    "memberof": "ka/api/authApi.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/authApi.js~defaultStartCallback",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/authApi.js",
    "importStyle": null,
    "description": "Функция обратного вызова для начала",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "URL"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "Данные"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "defaultErrorCallback",
    "memberof": "ka/api/authApi.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/authApi.js~defaultErrorCallback",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/authApi.js",
    "importStyle": null,
    "description": "Функция обратного вызова при ошибке",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Ошибка"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "URL"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "defaultFinalCallback",
    "memberof": "ka/api/authApi.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/authApi.js~defaultFinalCallback",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/authApi.js",
    "importStyle": null,
    "description": "Функция обратного вызова при завершении",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "URL"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "Данные"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "class",
    "name": "AuthApi",
    "memberof": "ka/api/authApi.js",
    "static": true,
    "longname": "ka/api/authApi.js~AuthApi",
    "access": "public",
    "export": true,
    "importPath": "./ka/api/authApi.js",
    "importStyle": "{AuthApi}",
    "description": "Класс для работы с авторизацией на сервере.",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AuthApi"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "login",
    "memberof": "ka/api/authApi.js~AuthApi",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/authApi.js~AuthApi.login",
    "access": "public",
    "description": "Метод для авторизации на сервере.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "login",
        "description": "Логин пользователя."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "Пароль пользователя."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция обратного вызова с результатами авторизации."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "startCallback",
        "description": "Функция для вызова при начале извлечения."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "errorCallback",
        "description": "Функция для вызова при\n  возникновении ошибки."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "finalCallback",
        "description": "Функция для вызова при завершении извлечения."
      }
    ],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "ka/api/kaApi.js",
    "content": "import { fetchGETData, fetchPOSTData } from '../../ka/utils/fetchUtils.js';\r\nimport Loader from '../components/loader/Loader.js';\r\nimport ModalPopNotifs from '../components/modal/ModalPopNotifs.js';\r\nimport { modalPopNotifs } from '../modules/modals/modals.js';\r\n\r\n// TODO: Разделить для каждого apu в отдельный модуль, \r\n//       чтобы например реализовать Авторизацию, и сразу после входа\r\n//       автоматически вставлять токен доступа в заголовок запроса, \r\n//       а не передавать каждый раз самим\r\n\r\n// URL для обращения к API\r\nconst API_URL = `${window.location.origin}/api/`;\r\nconst API_URL2 = 'http://185.192.247.60:7128/';\r\nconst API_URL3 = 'http://185.192.247.60:7130/';\r\n\r\n// Загрузчик (отображение загрузки)\r\nconst loader = new Loader('.loader-container');\r\n\r\n// Функция вызываемая при начале запроса\r\nconst defaultStartCallback = () => {\r\n    loader.show('Загрузка...');\r\n}\r\n\r\n// Функция вызываемая при возникновении ошибки\r\nconst defaultErrorCallback = (error, url) => {\r\n    console.log(error)\r\n    modalPopNotifs.addNotif(\r\n        'Ошибка',\r\n        `Произошла ошибка на стороне сервера: <a href=\"${url}\" target=\"_blank\">url</a>` +\r\n        `<br> <em>${error}</em>`,\r\n        ModalPopNotifs.TYPES.ERROR\r\n    );\r\n}\r\n\r\n// Функция вызываемая при завершении запроса\r\nconst defaultFinalCallback = () => {\r\n    loader.close();\r\n}\r\n\r\n/**\r\n * Класс для работы с API КА\r\n */\r\nexport class KaApi {\r\n\r\n    /**\r\n     * Получение траекторий КА\r\n     * @param {Array} kaIds - Идентификаторы КА\r\n     * @param {string} start_date_iso - Начало периода в формате ISO\r\n     * @param {string} end_date_iso - Конец периода в формате ISO\r\n     * @param {number} step - Шаг времени в секундах\r\n     * @param {Function} callback - Функция обратного вызова с результатами\r\n     * @param {Function} [startCallback=defaultStartCallback] - Функция вызываемая при начале запроса\r\n     * @param {Function} [errorCallback=defaultErrorCallback] - Функция вызываемая при возникновении ошибки\r\n     * @param {Function} [finalCallback=defaultFinalCallback] - Функция вызываемая при завершении запроса\r\n     */\r\n    static getKaTrajectories(\r\n        kaIds, start_date_iso, end_date_iso, step,\r\n        callback, startCallback = defaultStartCallback,\r\n        errorCallback = defaultErrorCallback, finalCallback = defaultFinalCallback\r\n    ) {\r\n        const url = new URL(`/Geography/SatelliteTrajectories`, API_URL3);\r\n        const data = {\r\n            satellites_id: kaIds,\r\n            start_datetime_iso: start_date_iso,\r\n            end_datetime_iso: end_date_iso,\r\n            dates_delta_in_sec: step\r\n        }\r\n        fetchPOSTData(url, data, callback, startCallback, errorCallback, finalCallback)\r\n    }\r\n\r\n    /**\r\n     * Вычисление направления и угла между подточками\r\n     * @param {Array} callers_and_ka - Массив объектов с данными\r\n     * @param {Function} callback - Функция обратного вызова с результатами\r\n     * @param {Function} [startCallback=defaultStartCallback] - Функция вызываемая при начале запроса\r\n     * @param {Function} [errorCallback=defaultErrorCallback] - Функция вызываемая при возникновении ошибки\r\n     * @param {Function} [finalCallback=defaultFinalCallback] - Функция вызываемая при завершении запроса\r\n     */\r\n    static calculateAzimuth(\r\n        callers_and_ka,\r\n        callback, startCallback = defaultStartCallback,\r\n        errorCallback = defaultErrorCallback, finalCallback = defaultFinalCallback\r\n    ) {\r\n        const url = new URL(\r\n            `/Geography/CalculateAzimuthAndAngleForPointWithSubPoints`,\r\n            API_URL3\r\n        );\r\n        const data = callers_and_ka;\r\n        fetchPOSTData(url, data, callback, startCallback, errorCallback, finalCallback)\r\n    }\r\n\r\n    /**\r\n     * Получает позиции спутников на заданную дату.\r\n     *\r\n     * @param {Array} satellites_id - Массив идентификаторов спутников.\r\n     * @param {String} date_iso - Дата в формате ISO (например, \"2023-07-21T00:00:00Z\").\r\n     * @param {Function} callback - Функция, вызываемая при успешном завершении запроса.\r\n     * @param {Function} [startCallback=defaultStartCallback] - Функция, вызываемая перед началом запроса.\r\n     * @param {Function} [errorCallback=defaultErrorCallback] - Функция, вызываемая в случае ошибки запроса.\r\n     * @param {Function} [finalCallback=defaultFinalCallback] - Функция, вызываемая после завершения запроса (независимо от его исхода).\r\n     */\r\n    static getKaPositions(\r\n        satellites_id, date_iso, callback,\r\n        startCallback = defaultStartCallback,\r\n        errorCallback = defaultErrorCallback,\r\n        finalCallback = defaultFinalCallback\r\n    ) {\r\n        // Формируем URL для запроса\r\n        const url = new URL(`Geography/SatellitesPositionsOneTimeForAll`, API_URL3);\r\n        // Подготавливаем данные для запроса\r\n        const data = {\r\n            satellites_id: satellites_id,\r\n            datetime_iso: date_iso\r\n        }\r\n        // Отправляем POST-запрос\r\n        fetchPOSTData(url, data, callback, startCallback, errorCallback, finalCallback)\r\n    }\r\n\r\n    /**\r\n     * Получает имена спутников.\r\n     *\r\n     * @param {Function} callback - Функция, вызываемая при успешном завершении запроса.\r\n     * @param {Function} [startCallback=defaultStartCallback] - Функция, вызываемая перед началом запроса.\r\n     * @param {Function} [errorCallback=defaultErrorCallback] - Функция, вызываемая в случае ошибки запроса.\r\n     * @param {Function} [finalCallback=defaultFinalCallback] - Функция, вызываемая после завершения запроса (независимо от его исхода).\r\n     */\r\n    static getKaNames(\r\n        callback, startCallback = defaultStartCallback,\r\n        errorCallback = defaultErrorCallback, finalCallback = defaultFinalCallback\r\n    ) {\r\n        // Формируем URL для запроса\r\n        const url = new URL(`Characteristics/Satellites`, API_URL3);\r\n        // Отправляем GET-запрос\r\n        fetchGETData(url, callback, startCallback, errorCallback, finalCallback)\r\n    }\r\n\r\n    /**\r\n     * Получает имена наземных станций (RSS).\r\n     *\r\n     * @param {Function} callback - Функция, вызываемая при успешном завершении запроса.\r\n     * @param {Function} [startCallback=defaultStartCallback] - Функция, вызываемая перед началом запроса.\r\n     * @param {Function} [errorCallback=defaultErrorCallback] - Функция, вызываемая в случае ошибки запроса.\r\n     * @param {Function} [finalCallback=defaultFinalCallback] - Функция, вызываемая после завершения запроса (независимо от его исхода).\r\n     */\r\n    static getRssNames(\r\n        callback, startCallback = defaultStartCallback,\r\n        errorCallback = defaultErrorCallback, finalCallback = defaultFinalCallback\r\n    ) {\r\n        // Формируем URL для запроса\r\n        const url = new URL(`Characteristics/BSSs`, API_URL3);\r\n        // const url = new URL(`/Characteristics/BSSs`, API_URL2);\r\n        // Отправляем GET-запрос\r\n        fetchGETData(url, callback, startCallback, errorCallback, finalCallback)\r\n    }\r\n\r\n    /**\r\n     * Получает сеансы связи для заданных спутников.\r\n     *\r\n     * @param {Array} kaIds - Массив идентификаторов спутников.\r\n     * @param {Array} callers - Массив идентификаторов вызывающих.\r\n     * @param {String} start - Дата и время начала в формате ISO.\r\n     * @param {Number} step - Шаг времени в секундах.\r\n     * @param {Number} interval - Интервал времени в минутах.\r\n     * @param {Function} callback - Функция, вызываемая при успешном завершении запроса.\r\n     * @param {Function} [startCallback=defaultStartCallback] - Функция, вызываемая перед началом запроса.\r\n     * @param {Function} [errorCallback=defaultErrorCallback] - Функция, вызываемая в случае ошибки запроса.\r\n     * @param {Function} [finalCallback=defaultFinalCallback] - Функция, вызываемая после завершения запроса (независимо от его исхода).\r\n     */\r\n    static getKaSessions(\r\n        kaIds, callers, start, step, interval,\r\n        callback, startCallback = defaultStartCallback,\r\n        errorCallback = defaultErrorCallback, finalCallback = defaultFinalCallback\r\n    ) {\r\n        // Формируем URL для запроса\r\n        const url = new URL(`CommunicationAvailability/CalculateCommunicationAvailability`, API_URL2);\r\n        // Подготавливаем данные для запроса\r\n        const data = {\r\n            \"params\": {\r\n                \"start_datetime\": start,\r\n                \"interval_in_sec\": interval * 60, // Интервал в секундах\r\n                \"dates_delta_in_sec\": step,\r\n                \"min_session_time_in_sec\": 10,\r\n                \"acceptable_session_time_in_sec\": 100\r\n            },\r\n            \"callers\": callers,\r\n        }\r\n        // Отправляем POST-запрос\r\n        fetchPOSTData(url, data, callback, startCallback, errorCallback, finalCallback)\r\n    }\r\n\r\n    /**\r\n     * Получает сеансы связи между спутниками и наземными станциями (RSS).\r\n     *\r\n     * @param {Array} kaIds - Массив идентификаторов спутников.\r\n     * @param {Array} rssList - Массив идентификаторов наземных станций (RSS).\r\n     * @param {String} start - Дата и время начала в формате ISO.\r\n     * @param {Number} step - Шаг времени в секундах.\r\n     * @param {String} end - Дата и время окончания в формате ISO.\r\n     * @param {Function} callback - Функция, вызываемая при успешном завершении запроса.\r\n     * @param {Function} [startCallback=defaultStartCallback] - Функция, вызываемая перед началом запроса.\r\n     * @param {Function} [errorCallback=defaultErrorCallback] - Функция, вызываемая в случае ошибки запроса.\r\n     * @param {Function} [finalCallback=defaultFinalCallback] - Функция, вызываемая после завершения запроса (независимо от его исхода).\r\n     */\r\n    static getRssSessions(\r\n        kaIds, rssList, start, step, end,\r\n        callback, startCallback = defaultStartCallback,\r\n        errorCallback = defaultErrorCallback, finalCallback = defaultFinalCallback\r\n    ) {\r\n        // Формируем URL для запроса\r\n        const url = new URL(`CommunicationAvailability/CalculateBSSsSatellitesAvailability`, API_URL3);\r\n        // Подготавливаем данные для запроса\r\n        const data = {\r\n            \"params\": {\r\n                \"start_datetime_iso\": start,\r\n                \"end_datetime_iso\": end,\r\n                \"dates_delta_in_sec\": step,\r\n                \"min_session_time_in_sec\": 10,\r\n                \"acceptable_session_time_in_sec\": 100\r\n            },\r\n            \"BSSs\": rssList,\r\n            'satellites_id': kaIds\r\n        }\r\n        // Отправляем POST-запрос\r\n        fetchPOSTData(url, data, callback, startCallback, errorCallback, finalCallback)\r\n    }\r\n\r\n    /**\r\n     * Получает данные наземных станций (RSS) по идентификатору.\r\n     *\r\n     * @param {Array} idRss - Массив идентификаторов наземных станций (RSS).\r\n     * @param {Function} callback - Функция, вызываемая при успешном завершении фильтрации данных.\r\n     * @param {Function} [startCallback=defaultStartCallback] - Функция, вызываемая перед началом фильтрации.\r\n     * @param {Function} [errorCallback=defaultErrorCallback] - Функция, вызываемая в случае ошибки фильтрации.\r\n     * @param {Function} [finalCallback=defaultFinalCallback] - Функция, вызываемая после завершения фильтрации (независимо от ее исхода).\r\n     */\r\n    static getRss(\r\n        idRss,\r\n        callback, startCallback = defaultStartCallback,\r\n        errorCallback = defaultErrorCallback, finalCallback = defaultFinalCallback\r\n    ) {\r\n        this.getRssNames((data) => {\r\n            // Фильтруем данные по идентификаторам наземных станций (RSS)\r\n            const filteredData = data.filter(item => idRss.includes(item.name));\r\n            callback(filteredData);\r\n        },\r\n            startCallback, errorCallback, finalCallback);\r\n    }\r\n\r\n    /**\r\n     * Получает последние соединения.\r\n     *\r\n     * @param {Function} callback - Функция, вызываемая при успешном завершении запроса.\r\n     * @param {Function} [startCallback=defaultStartCallback] - Функция, вызываемая перед началом запроса.\r\n     * @param {Function} [errorCallback=defaultErrorCallback] - Функция, вызываемая в случае ошибки запроса.\r\n     * @param {Function} [finalCallback=defaultFinalCallback] - Функция, вызываемая после завершения запроса (независимо от его исхода).\r\n     */\r\n    static getLastConnections(\r\n        callback, startCallback = defaultStartCallback,\r\n        errorCallback = defaultErrorCallback, finalCallback = defaultFinalCallback\r\n    ) {\r\n        // Формируем URL для запроса\r\n        const url = new URL(`CommunicationAvailability/LastCommunicationAvailability`, API_URL2);\r\n        // Отправляем GET-запрос\r\n        fetchGETData(url, callback, startCallback, errorCallback, finalCallback)\r\n    }\r\n\r\n    /**\r\n     * Получает план частот.\r\n     *\r\n     * @param {Function} callback - Функция, вызываемая при успешном завершении запроса.\r\n     * @param {Function} [startCallback=defaultStartCallback] - Функция, вызываемая перед началом запроса.\r\n     * @param {Function} [errorCallback=defaultErrorCallback] - Функция, вызываемая в случае ошибки запроса.\r\n     * @param {Function} [finalCallback=defaultFinalCallback] - Функция, вызываемая после завершения запроса (независимо от его исхода).\r\n     */\r\n    static getChannelPlan(\r\n        callback, startCallback = defaultStartCallback,\r\n        errorCallback = defaultErrorCallback, finalCallback = defaultFinalCallback\r\n    ) {\r\n        // Формируем URL для запроса\r\n        const url = new URL(`CommunicationAvailability/GetFrequencyPlan`, API_URL3);\r\n        // Отправляем GET-запрос\r\n        fetchGETData(url, callback, startCallback, errorCallback, finalCallback)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/api/kaApi.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "API_URL",
    "memberof": "ka/api/kaApi.js",
    "static": true,
    "longname": "ka/api/kaApi.js~API_URL",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/kaApi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "API_URL2",
    "memberof": "ka/api/kaApi.js",
    "static": true,
    "longname": "ka/api/kaApi.js~API_URL2",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/kaApi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "API_URL3",
    "memberof": "ka/api/kaApi.js",
    "static": true,
    "longname": "ka/api/kaApi.js~API_URL3",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/kaApi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "loader",
    "memberof": "ka/api/kaApi.js",
    "static": true,
    "longname": "ka/api/kaApi.js~loader",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/kaApi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/loader/Loader.js~Loader"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "defaultStartCallback",
    "memberof": "ka/api/kaApi.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/kaApi.js~defaultStartCallback",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/kaApi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "defaultErrorCallback",
    "memberof": "ka/api/kaApi.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/kaApi.js~defaultErrorCallback",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/kaApi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "defaultFinalCallback",
    "memberof": "ka/api/kaApi.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/kaApi.js~defaultFinalCallback",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/kaApi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "class",
    "name": "KaApi",
    "memberof": "ka/api/kaApi.js",
    "static": true,
    "longname": "ka/api/kaApi.js~KaApi",
    "access": "public",
    "export": true,
    "importPath": "./ka/api/kaApi.js",
    "importStyle": "{KaApi}",
    "description": "Класс для работы с API КА",
    "lineNumber": 43,
    "interface": false
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "getKaTrajectories",
    "memberof": "ka/api/kaApi.js~KaApi",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/kaApi.js~KaApi.getKaTrajectories",
    "access": "public",
    "description": "Получение траекторий КА",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "kaIds",
        "description": "Идентификаторы КА"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "start_date_iso",
        "description": "Начало периода в формате ISO"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "end_date_iso",
        "description": "Конец периода в формате ISO"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "step",
        "description": "Шаг времени в секундах"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция обратного вызова с результатами"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultStartCallback",
        "defaultRaw": "defaultStartCallback",
        "name": "startCallback",
        "description": "Функция вызываемая при начале запроса"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultErrorCallback",
        "defaultRaw": "defaultErrorCallback",
        "name": "errorCallback",
        "description": "Функция вызываемая при возникновении ошибки"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultFinalCallback",
        "defaultRaw": "defaultFinalCallback",
        "name": "finalCallback",
        "description": "Функция вызываемая при завершении запроса"
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "calculateAzimuth",
    "memberof": "ka/api/kaApi.js~KaApi",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/kaApi.js~KaApi.calculateAzimuth",
    "access": "public",
    "description": "Вычисление направления и угла между подточками",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "callers_and_ka",
        "description": "Массив объектов с данными"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция обратного вызова с результатами"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultStartCallback",
        "defaultRaw": "defaultStartCallback",
        "name": "startCallback",
        "description": "Функция вызываемая при начале запроса"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultErrorCallback",
        "defaultRaw": "defaultErrorCallback",
        "name": "errorCallback",
        "description": "Функция вызываемая при возникновении ошибки"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultFinalCallback",
        "defaultRaw": "defaultFinalCallback",
        "name": "finalCallback",
        "description": "Функция вызываемая при завершении запроса"
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "getKaPositions",
    "memberof": "ka/api/kaApi.js~KaApi",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/kaApi.js~KaApi.getKaPositions",
    "access": "public",
    "description": "Получает позиции спутников на заданную дату.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "satellites_id",
        "description": "Массив идентификаторов спутников."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date_iso",
        "description": "Дата в формате ISO (например, \"2023-07-21T00:00:00Z\")."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, вызываемая при успешном завершении запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultStartCallback",
        "defaultRaw": "defaultStartCallback",
        "name": "startCallback",
        "description": "Функция, вызываемая перед началом запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultErrorCallback",
        "defaultRaw": "defaultErrorCallback",
        "name": "errorCallback",
        "description": "Функция, вызываемая в случае ошибки запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultFinalCallback",
        "defaultRaw": "defaultFinalCallback",
        "name": "finalCallback",
        "description": "Функция, вызываемая после завершения запроса (независимо от его исхода)."
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "getKaNames",
    "memberof": "ka/api/kaApi.js~KaApi",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/kaApi.js~KaApi.getKaNames",
    "access": "public",
    "description": "Получает имена спутников.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, вызываемая при успешном завершении запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultStartCallback",
        "defaultRaw": "defaultStartCallback",
        "name": "startCallback",
        "description": "Функция, вызываемая перед началом запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultErrorCallback",
        "defaultRaw": "defaultErrorCallback",
        "name": "errorCallback",
        "description": "Функция, вызываемая в случае ошибки запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultFinalCallback",
        "defaultRaw": "defaultFinalCallback",
        "name": "finalCallback",
        "description": "Функция, вызываемая после завершения запроса (независимо от его исхода)."
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "getRssNames",
    "memberof": "ka/api/kaApi.js~KaApi",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/kaApi.js~KaApi.getRssNames",
    "access": "public",
    "description": "Получает имена наземных станций (RSS).",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, вызываемая при успешном завершении запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultStartCallback",
        "defaultRaw": "defaultStartCallback",
        "name": "startCallback",
        "description": "Функция, вызываемая перед началом запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultErrorCallback",
        "defaultRaw": "defaultErrorCallback",
        "name": "errorCallback",
        "description": "Функция, вызываемая в случае ошибки запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultFinalCallback",
        "defaultRaw": "defaultFinalCallback",
        "name": "finalCallback",
        "description": "Функция, вызываемая после завершения запроса (независимо от его исхода)."
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "getKaSessions",
    "memberof": "ka/api/kaApi.js~KaApi",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/kaApi.js~KaApi.getKaSessions",
    "access": "public",
    "description": "Получает сеансы связи для заданных спутников.",
    "lineNumber": 169,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "kaIds",
        "description": "Массив идентификаторов спутников."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "callers",
        "description": "Массив идентификаторов вызывающих."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Дата и время начала в формате ISO."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "step",
        "description": "Шаг времени в секундах."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "Интервал времени в минутах."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, вызываемая при успешном завершении запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultStartCallback",
        "defaultRaw": "defaultStartCallback",
        "name": "startCallback",
        "description": "Функция, вызываемая перед началом запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultErrorCallback",
        "defaultRaw": "defaultErrorCallback",
        "name": "errorCallback",
        "description": "Функция, вызываемая в случае ошибки запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultFinalCallback",
        "defaultRaw": "defaultFinalCallback",
        "name": "finalCallback",
        "description": "Функция, вызываемая после завершения запроса (независимо от его исхода)."
      }
    ],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "getRssSessions",
    "memberof": "ka/api/kaApi.js~KaApi",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/kaApi.js~KaApi.getRssSessions",
    "access": "public",
    "description": "Получает сеансы связи между спутниками и наземными станциями (RSS).",
    "lineNumber": 204,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "kaIds",
        "description": "Массив идентификаторов спутников."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "rssList",
        "description": "Массив идентификаторов наземных станций (RSS)."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Дата и время начала в формате ISO."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "step",
        "description": "Шаг времени в секундах."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Дата и время окончания в формате ISO."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, вызываемая при успешном завершении запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultStartCallback",
        "defaultRaw": "defaultStartCallback",
        "name": "startCallback",
        "description": "Функция, вызываемая перед началом запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultErrorCallback",
        "defaultRaw": "defaultErrorCallback",
        "name": "errorCallback",
        "description": "Функция, вызываемая в случае ошибки запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultFinalCallback",
        "defaultRaw": "defaultFinalCallback",
        "name": "finalCallback",
        "description": "Функция, вызываемая после завершения запроса (независимо от его исхода)."
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "getRss",
    "memberof": "ka/api/kaApi.js~KaApi",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/kaApi.js~KaApi.getRss",
    "access": "public",
    "description": "Получает данные наземных станций (RSS) по идентификатору.",
    "lineNumber": 236,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "idRss",
        "description": "Массив идентификаторов наземных станций (RSS)."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, вызываемая при успешном завершении фильтрации данных."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultStartCallback",
        "defaultRaw": "defaultStartCallback",
        "name": "startCallback",
        "description": "Функция, вызываемая перед началом фильтрации."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultErrorCallback",
        "defaultRaw": "defaultErrorCallback",
        "name": "errorCallback",
        "description": "Функция, вызываемая в случае ошибки фильтрации."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultFinalCallback",
        "defaultRaw": "defaultFinalCallback",
        "name": "finalCallback",
        "description": "Функция, вызываемая после завершения фильтрации (независимо от ее исхода)."
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "getLastConnections",
    "memberof": "ka/api/kaApi.js~KaApi",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/kaApi.js~KaApi.getLastConnections",
    "access": "public",
    "description": "Получает последние соединения.",
    "lineNumber": 257,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, вызываемая при успешном завершении запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultStartCallback",
        "defaultRaw": "defaultStartCallback",
        "name": "startCallback",
        "description": "Функция, вызываемая перед началом запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultErrorCallback",
        "defaultRaw": "defaultErrorCallback",
        "name": "errorCallback",
        "description": "Функция, вызываемая в случае ошибки запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultFinalCallback",
        "defaultRaw": "defaultFinalCallback",
        "name": "finalCallback",
        "description": "Функция, вызываемая после завершения запроса (независимо от его исхода)."
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "getChannelPlan",
    "memberof": "ka/api/kaApi.js~KaApi",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/kaApi.js~KaApi.getChannelPlan",
    "access": "public",
    "description": "Получает план частот.",
    "lineNumber": 275,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, вызываемая при успешном завершении запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultStartCallback",
        "defaultRaw": "defaultStartCallback",
        "name": "startCallback",
        "description": "Функция, вызываемая перед началом запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultErrorCallback",
        "defaultRaw": "defaultErrorCallback",
        "name": "errorCallback",
        "description": "Функция, вызываемая в случае ошибки запроса."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultFinalCallback",
        "defaultRaw": "defaultFinalCallback",
        "name": "finalCallback",
        "description": "Функция, вызываемая после завершения запроса (независимо от его исхода)."
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "ka/api/reportApi.js",
    "content": "import { fetchGETData, fetchPOSTData, downloadPostFile } from '../../ka/utils/fetchUtils.js';\r\nimport Loader from '../components/loader/Loader.js';\r\nimport ModalPopNotifs from '../components/modal/ModalPopNotifs.js';\r\nimport { modalPopNotifs } from '../modules/modals/modals.js';\r\n\r\n// URL для обращения к API\r\n// TODO: удалить API_URL, переименовать API_URL2 -> API_URL\r\nconst API_URL = `${window.location.origin}/api/`;\r\nconst API_URL2 = 'http://185.192.247.60:8888/';\r\n\r\n// Загрузчик (отображение загрузки)\r\nconst loader = new Loader('.loader-container');\r\n\r\n/**\r\n * Функция обратного вызова, вызываемая при начале запроса к серверу.\r\n */\r\nconst defaultStartCallback = () => {\r\n    loader.show('Загрузка...');\r\n}\r\n\r\n/**\r\n * Функция обратного вызова, вызываемая при ошибке запроса к серверу.\r\n * @param {Error} error - объект ошибки.\r\n * @param {string} url - URL запроса.\r\n */\r\nconst defaultErrorCallback = (error, url) => {\r\n    console.log(error)\r\n    modalPopNotifs.addNotif(\r\n        'Ошибка',\r\n        `Произошла ошибка на стороне сервера: <a href=\"${url}\" target=\"_blank\">${url}</a>` +\r\n        `<br> <em>${error}</em>`,\r\n        ModalPopNotifs.TYPES.ERROR\r\n    );\r\n}\r\n\r\n/**\r\n * Функция обратного вызова, вызываемая при завершении запроса к серверу.\r\n */\r\nconst defaultFinalCallback = () => {\r\n    loader.close();\r\n}\r\n\r\n/**\r\n * Класс для работы с API для получения отчётов.\r\n */\r\nexport class ReportApi {\r\n\r\n    /**\r\n     * Загружает ODT отчёт с использованием POST-запроса и сохраняет его на компьютере.\r\n     * @param {object} data - Данные для передачи в POST-запросе.\r\n     * @param {string} [filename='report.odt'] - Имя файла для сохранения.\r\n     * @param {function} [startCallback=defaultStartCallback] - Функция для вызова при начале загрузки.\r\n     * @param {function} [errorCallback=defaultErrorCallback] - Функция для вызова при ошибке.\r\n     * @param {function} [finalCallback=defaultFinalCallback] - Функция для вызова при завершении загрузки.\r\n     */\r\n    static downloadOdt(\r\n        data, // Данные для передачи в POST-запросе.\r\n        filename = 'report.odt', // Имя файла для сохранения.\r\n        startCallback = defaultStartCallback, // Функция для вызова при начале загрузки.\r\n        errorCallback = defaultErrorCallback, // Функция для вызова при ошибке.\r\n        finalCallback = defaultFinalCallback // Функция для вызова при завершении загрузки.\r\n    ) {\r\n        // Создание URL для отправки запроса на сервер.\r\n        const url = new URL('report', API_URL2);\r\n        // Получение данных от сервера и вызов предоставленной функции обратного вызова.\r\n        downloadPostFile(url, data, filename, startCallback, errorCallback, finalCallback);\r\n    }\r\n\r\n\r\n    /**\r\n     * Загружает CSV отчёт с использованием POST-запроса и сохраняет его на компьютере.\r\n     * @param {object} header - Заголовок отчёта.\r\n     * @param {array} rows - Данные для отчёта.\r\n     * @param {string} [filename='report.csv'] - Имя файла для сохранения.\r\n     * @param {function} [startCallback=defaultStartCallback] - Функция для вызова при начале загрузки.\r\n     * @param {function} [errorCallback=defaultErrorCallback] - Функция для вызова при ошибке.\r\n     * @param {function} [finalCallback=defaultFinalCallback] - Функция для вызова при завершении загрузки.\r\n     */\r\n    static downloadCsv(\r\n        header,\r\n        rows, // Данные для отчёта.\r\n        filename = 'report.csv', // Имя файла для сохранения.\r\n        startCallback = defaultStartCallback, // Функция для вызова при начале загрузки.\r\n        errorCallback = defaultErrorCallback, // Функция для вызова при ошибке.\r\n        finalCallback = defaultFinalCallback // Функция для вызова при завершении загрузки.\r\n    ) {\r\n        const url = new URL('report/csv', API_URL2);\r\n        const data = { header, rows }\r\n        downloadPostFile(url, data, filename, startCallback, errorCallback, finalCallback);\r\n    }\r\n}\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/api/reportApi.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "API_URL",
    "memberof": "ka/api/reportApi.js",
    "static": true,
    "longname": "ka/api/reportApi.js~API_URL",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/reportApi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "API_URL2",
    "memberof": "ka/api/reportApi.js",
    "static": true,
    "longname": "ka/api/reportApi.js~API_URL2",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/reportApi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "loader",
    "memberof": "ka/api/reportApi.js",
    "static": true,
    "longname": "ka/api/reportApi.js~loader",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/reportApi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/loader/Loader.js~Loader"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "defaultStartCallback",
    "memberof": "ka/api/reportApi.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/reportApi.js~defaultStartCallback",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/reportApi.js",
    "importStyle": null,
    "description": "Функция обратного вызова, вызываемая при начале запроса к серверу.",
    "lineNumber": 17,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "defaultErrorCallback",
    "memberof": "ka/api/reportApi.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/reportApi.js~defaultErrorCallback",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/reportApi.js",
    "importStyle": null,
    "description": "Функция обратного вызова, вызываемая при ошибке запроса к серверу.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "объект ошибки."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "URL запроса."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "defaultFinalCallback",
    "memberof": "ka/api/reportApi.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/reportApi.js~defaultFinalCallback",
    "access": "public",
    "export": false,
    "importPath": "./ka/api/reportApi.js",
    "importStyle": null,
    "description": "Функция обратного вызова, вызываемая при завершении запроса к серверу.",
    "lineNumber": 39,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "ReportApi",
    "memberof": "ka/api/reportApi.js",
    "static": true,
    "longname": "ka/api/reportApi.js~ReportApi",
    "access": "public",
    "export": true,
    "importPath": "./ka/api/reportApi.js",
    "importStyle": "{ReportApi}",
    "description": "Класс для работы с API для получения отчётов.",
    "lineNumber": 46,
    "interface": false
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "downloadOdt",
    "memberof": "ka/api/reportApi.js~ReportApi",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/reportApi.js~ReportApi.downloadOdt",
    "access": "public",
    "description": "Загружает ODT отчёт с использованием POST-запроса и сохраняет его на компьютере.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Данные для передачи в POST-запросе."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'report.odt'",
        "defaultRaw": "'report.odt'",
        "name": "filename",
        "description": "Имя файла для сохранения."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultStartCallback",
        "defaultRaw": "defaultStartCallback",
        "name": "startCallback",
        "description": "Функция для вызова при начале загрузки."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultErrorCallback",
        "defaultRaw": "defaultErrorCallback",
        "name": "errorCallback",
        "description": "Функция для вызова при ошибке."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultFinalCallback",
        "defaultRaw": "defaultFinalCallback",
        "name": "finalCallback",
        "description": "Функция для вызова при завершении загрузки."
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "downloadCsv",
    "memberof": "ka/api/reportApi.js~ReportApi",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/api/reportApi.js~ReportApi.downloadCsv",
    "access": "public",
    "description": "Загружает CSV отчёт с использованием POST-запроса и сохраняет его на компьютере.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "header",
        "description": "Заголовок отчёта."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "rows",
        "description": "Данные для отчёта."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'report.csv'",
        "defaultRaw": "'report.csv'",
        "name": "filename",
        "description": "Имя файла для сохранения."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultStartCallback",
        "defaultRaw": "defaultStartCallback",
        "name": "startCallback",
        "description": "Функция для вызова при начале загрузки."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultErrorCallback",
        "defaultRaw": "defaultErrorCallback",
        "name": "errorCallback",
        "description": "Функция для вызова при ошибке."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultFinalCallback",
        "defaultRaw": "defaultFinalCallback",
        "name": "finalCallback",
        "description": "Функция для вызова при завершении загрузки."
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "ka/api_v2/index.js",
    "content": "import LoadingManager from \"../components/loader/LoadingManager.js\";\r\nimport KaApi from \"./kaApi.js\";\r\nimport KaApiPrew from \"./kaApiPrew.js\";\r\nimport ReportApi from \"./reportApi.js\";\r\nimport ModalPopNotifs from \"../components/modal/ModalPopNotifs.js\";\r\nimport { modalPopNotifs } from \"../modules/modals/modals.js\";\r\n\r\n\r\nconst loadingManager = new LoadingManager('.loader-container', 'Загрузка...');\r\n\r\nconst options = {\r\n    errorHandler: (error, url) => {\r\n        modalPopNotifs.addNotif(\r\n            'Ошибка',\r\n            `Произошла ошибка на стороне сервера: <a href=\"${url}\" target=\"_blank\">url</a>` +\r\n            `<br> <em>${error}</em>`,\r\n            ModalPopNotifs.TYPES.ERROR\r\n        );\r\n        throw new Error('Ошибка при запросе к серверу: ' + error);\r\n    },\r\n    setLoading: loadingManager.setLoading.bind(loadingManager),\r\n}\r\n\r\n// Общая точка входа в функции API\r\nconst API = {\r\n    ka: new KaApi(\"http://185.192.247.60:7130/\", options),\r\n    kaPrev: new KaApiPrew(\"http://185.192.247.60:7128/\", options),\r\n    report: new ReportApi(\"http://185.192.247.60:8888/\", options),\r\n}\r\n\r\nexport default API;\r\n\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/api_v2/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "loadingManager",
    "memberof": "ka/api_v2/index.js",
    "static": true,
    "longname": "ka/api_v2/index.js~loadingManager",
    "access": "public",
    "export": false,
    "importPath": "./ka/api_v2/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/loader/LoadingManager.js~LoadingManager"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "options",
    "memberof": "ka/api_v2/index.js",
    "static": true,
    "longname": "ka/api_v2/index.js~options",
    "access": "public",
    "export": false,
    "importPath": "./ka/api_v2/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"errorHandler\": *, \"setLoading\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "API",
    "memberof": "ka/api_v2/index.js",
    "static": true,
    "longname": "ka/api_v2/index.js~API",
    "access": "public",
    "export": true,
    "importPath": "./ka/api_v2/index.js",
    "importStyle": "API",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "{\"ka\": *, \"kaPrev\": *, \"report\": *}"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "ka/api_v2/kaApi.js",
    "content": "import _SomeBaseAPI from \"./_SomeBaseAPI.js\";\r\n\r\nexport default class KaApi extends _SomeBaseAPI {\r\n    constructor(baseURL = \"http://185.192.247.60:7130/\", options = {}) {\r\n        super(baseURL, options);\r\n    }\r\n\r\n    async getKaTrajectories(kaIds, start_date_iso, end_date_iso, step) {\r\n        return await this.serviceProxy.post(`Geography/SatelliteTrajectories`, {\r\n            satellites_id: kaIds,\r\n            start_datetime_iso: start_date_iso,\r\n            end_datetime_iso: end_date_iso,\r\n            dates_delta_in_sec: step,\r\n        });\r\n    }\r\n\r\n    async calculateAzimuth(callers_and_ka) {\r\n        return await this.serviceProxy.post(\r\n            `Geography/CalculateAzimuthAndAngleForPointWithSubPoints`,\r\n            callers_and_ka\r\n        );\r\n    }\r\n\r\n    async getKaPositions(satellites_id, date_iso) {\r\n        return await this.serviceProxy.post(\r\n            `Geography/SatellitesPositionsOneTimeForAll`,\r\n            {\r\n                satellites_id: satellites_id,\r\n                datetime_iso: date_iso,\r\n            }\r\n        );\r\n    }\r\n\r\n    async getKaNames() {\r\n        return await this.serviceProxy.get(`Characteristics/Satellites`);\r\n    }\r\n\r\n    async getRssNames() {\r\n        return await this.serviceProxy.get(`Characteristics/BSSs`);\r\n    }\r\n\r\n    async getRssSessions(kaIds, rssList, start, step, end) {\r\n        return await this.serviceProxy.post(\r\n            `CommunicationAvailability/CalculateBSSsSatellitesAvailability`,\r\n            {\r\n                params: {\r\n                    start_datetime_iso: start,\r\n                    end_datetime_iso: end,\r\n                    dates_delta_in_sec: step,\r\n                    min_session_time_in_sec: 10,\r\n                    acceptable_session_time_in_sec: 100,\r\n                },\r\n                BSSs: rssList,\r\n                satellites_id: kaIds,\r\n            }\r\n        );\r\n    }\r\n\r\n    async getRss(idRss) {\r\n        const data = await this.getRssNames();\r\n        // return data.filter((item) => idRss.includes(item.name));\r\n        // Замена на индексы\r\n        return data.filter((item, index) => idRss.includes(index + 1));\r\n    }\r\n\r\n    async getChannelPlan() {\r\n        return await this.serviceProxy.get(`CommunicationAvailability/GetFrequencyPlan`);\r\n    }\r\n\r\n    async getActiveSessions() {\r\n        return await this.serviceProxy.get(`CommunicationAvailability/GetActiveSessions`);\r\n    }\r\n\r\n    async getArchiveSessions() {\r\n        return await this.serviceProxy.get(`CommunicationAvailability/GetArchivalSessions`);\r\n    }\r\n\r\n     /**\r\n     * Получает архивные сессии по дате вызова.\r\n     *\r\n     * @param {Date} start - Начальная дата вызова.\r\n     * @param {Date} end - Конечная дата вызова.\r\n     * @return {object} Данные архивных сессий.\r\n     */\r\n    async getArchiveSessionsByCallDate(start, end) {\r\n        return await this.serviceProxy.get(`CommunicationAvailability/GetArchivalSessionsByCallDate`, {\r\n            start_date: start.toISOString().slice(0, -1),\r\n            end_date: end.toISOString().slice(0, -1),\r\n        });\r\n    }\r\n\r\n    async getCalculateBSSsSatellitesDistribution(dataList) {\r\n        const data = await this.serviceProxy.post(\r\n            'CommunicationAvailability/CalculateBSSsSatellitesDistribution',\r\n            dataList\r\n        );\r\n        return data.flat()\r\n    }\r\n\r\n    async getCalisionRSS(dataList) {\r\n        const data = await this.serviceProxy.post(\r\n            'CommunicationAvailability/CalculateRSSKAKolliz',\r\n            dataList\r\n        );\r\n        return data.flat()\r\n    }\r\n\r\n    async clearPlan() {\r\n        return await this.serviceProxy.post(\r\n            'CommunicationAvailability/ReleaseAllFrequencyResources',\r\n            {}\r\n        );\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/api_v2/kaApi.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "KaApi",
    "memberof": "ka/api_v2/kaApi.js",
    "static": true,
    "longname": "ka/api_v2/kaApi.js~KaApi",
    "access": "public",
    "export": true,
    "importPath": "./ka/api_v2/kaApi.js",
    "importStyle": "KaApi",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "ka/api_v2/_SomeBaseAPI.js~_SomeBaseAPI"
    ]
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "getKaTrajectories",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#getKaTrajectories",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "kaIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "start_date_iso",
        "types": [
          "*"
        ]
      },
      {
        "name": "end_date_iso",
        "types": [
          "*"
        ]
      },
      {
        "name": "step",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "calculateAzimuth",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#calculateAzimuth",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "callers_and_ka",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "getKaPositions",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#getKaPositions",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "satellites_id",
        "types": [
          "*"
        ]
      },
      {
        "name": "date_iso",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "getKaNames",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#getKaNames",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "getRssNames",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#getRssNames",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "getRssSessions",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#getRssSessions",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "kaIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "rssList",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "step",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "getRss",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#getRss",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "idRss",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "getChannelPlan",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#getChannelPlan",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "getActiveSessions",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#getActiveSessions",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "getArchiveSessions",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#getArchiveSessions",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "getArchiveSessionsByCallDate",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#getArchiveSessionsByCallDate",
    "access": "public",
    "description": "Получает архивные сессии по дате вызова.",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Начальная дата вызова."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Конечная дата вызова."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Данные архивных сессий."
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "getCalculateBSSsSatellitesDistribution",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#getCalculateBSSsSatellitesDistribution",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "dataList",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "getCalisionRSS",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#getCalisionRSS",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "dataList",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "clearPlan",
    "memberof": "ka/api_v2/kaApi.js~KaApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApi.js~KaApi#clearPlan",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "ka/api_v2/kaApiPrew.js",
    "content": "import _SomeBaseAPI from \"./_SomeBaseAPI.js\";\r\n\r\nexport default class KaApiPrew extends _SomeBaseAPI {\r\n    constructor(baseURL = \"http://185.192.247.60:7128/\", options = {}) {\r\n        super(baseURL, options);\r\n    }\r\n\r\n    async getKaSessions(kaIds, callers, start, step, interval) {\r\n        return await this.serviceProxy.post(\r\n            `CommunicationAvailability/CalculateCommunicationAvailability`,\r\n            {\r\n                params: {\r\n                    start_datetime: start,\r\n                    interval_in_sec: interval * 60, // Интервал в секундах\r\n                    dates_delta_in_sec: step,\r\n                    min_session_time_in_sec: 10,\r\n                    acceptable_session_time_in_sec: 100,\r\n                },\r\n                callers: callers,\r\n            }\r\n        );\r\n    }\r\n\r\n    async getLastConnections() {\r\n        return await this.serviceProxy.get(\r\n            `CommunicationAvailability/LastCommunicationAvailability`\r\n        );\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/api_v2/kaApiPrew.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "class",
    "name": "KaApiPrew",
    "memberof": "ka/api_v2/kaApiPrew.js",
    "static": true,
    "longname": "ka/api_v2/kaApiPrew.js~KaApiPrew",
    "access": "public",
    "export": true,
    "importPath": "./ka/api_v2/kaApiPrew.js",
    "importStyle": "KaApiPrew",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "ka/api_v2/_SomeBaseAPI.js~_SomeBaseAPI"
    ]
  },
  {
    "__docId__": 109,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/api_v2/kaApiPrew.js~KaApiPrew",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/api_v2/kaApiPrew.js~KaApiPrew#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "getKaSessions",
    "memberof": "ka/api_v2/kaApiPrew.js~KaApiPrew",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApiPrew.js~KaApiPrew#getKaSessions",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "kaIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "callers",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "step",
        "types": [
          "*"
        ]
      },
      {
        "name": "interval",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "getLastConnections",
    "memberof": "ka/api_v2/kaApiPrew.js~KaApiPrew",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/kaApiPrew.js~KaApiPrew#getLastConnections",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "ka/api_v2/reportApi.js",
    "content": "import _SomeBaseAPI from \"./_SomeBaseAPI.js\";\r\n\r\nexport default class ReportApi extends _SomeBaseAPI {\r\n    constructor(baseURL = \"http://185.192.247.60:8888/\", options = {}) {\r\n        super(baseURL, options);\r\n    }\r\n\r\n    async downloadOdt(data, filename = 'report.odt') {\r\n        return await this.serviceProxy.download('report', data, filename);\r\n    }\r\n\r\n    async downloadCsv(header, rows, filename = 'report.csv') {\r\n        return await this.serviceProxy.download('report/csv', { header, rows }, filename);\r\n    }\r\n}",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/api_v2/reportApi.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "class",
    "name": "ReportApi",
    "memberof": "ka/api_v2/reportApi.js",
    "static": true,
    "longname": "ka/api_v2/reportApi.js~ReportApi",
    "access": "public",
    "export": true,
    "importPath": "./ka/api_v2/reportApi.js",
    "importStyle": "ReportApi",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "ka/api_v2/_SomeBaseAPI.js~_SomeBaseAPI"
    ]
  },
  {
    "__docId__": 114,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/api_v2/reportApi.js~ReportApi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/api_v2/reportApi.js~ReportApi#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "downloadOdt",
    "memberof": "ka/api_v2/reportApi.js~ReportApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/reportApi.js~ReportApi#downloadOdt",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "filename",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "report.odt",
        "defaultValue": "report.odt"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "downloadCsv",
    "memberof": "ka/api_v2/reportApi.js~ReportApi",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "ka/api_v2/reportApi.js~ReportApi#downloadCsv",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "header",
        "types": [
          "*"
        ]
      },
      {
        "name": "rows",
        "types": [
          "*"
        ]
      },
      {
        "name": "filename",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "report.csv",
        "defaultValue": "report.csv"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "ka/api_v2/_SomeBaseAPI.js",
    "content": "/**\r\n * Абстрактный клиент,\r\n * который определял бы, как взаимодействовать с набором распространенных микросервисов,\r\n * например, логикой аутентификации и т.д.\r\n */\r\n\r\nimport _ServiceProxy from \"./_ServiceProxy.js\";\r\n\r\nexport default class _SomeBaseAPI {\r\n  constructor(baseURL, options = {}) {\r\n    this.serviceProxy = new _ServiceProxy(baseURL, options);\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/api_v2/_SomeBaseAPI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "class",
    "name": "_SomeBaseAPI",
    "memberof": "ka/api_v2/_SomeBaseAPI.js",
    "static": true,
    "longname": "ka/api_v2/_SomeBaseAPI.js~_SomeBaseAPI",
    "access": "private",
    "export": true,
    "importPath": "./ka/api_v2/_SomeBaseAPI.js",
    "importStyle": "_SomeBaseAPI",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 119,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/api_v2/_SomeBaseAPI.js~_SomeBaseAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/api_v2/_SomeBaseAPI.js~_SomeBaseAPI#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "serviceProxy",
    "memberof": "ka/api_v2/_SomeBaseAPI.js~_SomeBaseAPI",
    "static": false,
    "longname": "ka/api_v2/_SomeBaseAPI.js~_SomeBaseAPI#serviceProxy",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "ka/components/checkbox-manager/CheckboxManager.js",
    "content": "/**\r\n * Класс для управления чекбоксом\r\n * @param {string} selector - селектор чекбокса\r\n * @param {object} selects - объект с параметрами для чекбокса\r\n * @property {HTMLInputElement} checkbox - чекбокс\r\n * @property {object} selects - объект с параметрами для чекбокса\r\n */\r\nexport default class CheckboxManager {\r\n    /**\r\n     * Конструктор класса CheckboxManager.\r\n     * @param {string} selector - селектор чекбокса.\r\n     * @param {object} selects - объект с параметрами для чекбокса.\r\n     */\r\n    constructor(selector, selects) {\r\n        /**\r\n         * DOM-элемент чекбокса.\r\n         * @type {HTMLInputElement}\r\n         */\r\n        this.checkbox = document.querySelector(selector);\r\n\r\n        /**\r\n         * Объект с параметрами для чекбокса.\r\n         * @type {object}\r\n         */\r\n        this.selects = selects;\r\n    }\r\n\r\n    /**\r\n     * Устанавливает значение чекбокса.\r\n     * @param {boolean} value - значение чекбокса.\r\n     */\r\n    checked(value) {\r\n        if (value === true) {\r\n            this.checkbox.checked = true;\r\n            this.selects.isSelect = true;\r\n        } else if (value === false) {\r\n            this.checkbox.checked = false;\r\n            this.selects.isSelect = false;\r\n        }\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/checkbox-manager/CheckboxManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "class",
    "name": "CheckboxManager",
    "memberof": "ka/components/checkbox-manager/CheckboxManager.js",
    "static": true,
    "longname": "ka/components/checkbox-manager/CheckboxManager.js~CheckboxManager",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/checkbox-manager/CheckboxManager.js",
    "importStyle": "CheckboxManager",
    "description": "Класс для управления чекбоксом",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "селектор чекбокса"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "selects",
        "description": "объект с параметрами для чекбокса"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "checkbox",
        "description": "чекбокс"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "selects",
        "description": "объект с параметрами для чекбокса"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 123,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/checkbox-manager/CheckboxManager.js~CheckboxManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/checkbox-manager/CheckboxManager.js~CheckboxManager#constructor",
    "access": "public",
    "description": "Конструктор класса CheckboxManager.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "селектор чекбокса."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "selects",
        "description": "объект с параметрами для чекбокса."
      }
    ]
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "checkbox",
    "memberof": "ka/components/checkbox-manager/CheckboxManager.js~CheckboxManager",
    "static": false,
    "longname": "ka/components/checkbox-manager/CheckboxManager.js~CheckboxManager#checkbox",
    "access": "public",
    "description": "DOM-элемент чекбокса.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "selects",
    "memberof": "ka/components/checkbox-manager/CheckboxManager.js~CheckboxManager",
    "static": false,
    "longname": "ka/components/checkbox-manager/CheckboxManager.js~CheckboxManager#selects",
    "access": "public",
    "description": "Объект с параметрами для чекбокса.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "checked",
    "memberof": "ka/components/checkbox-manager/CheckboxManager.js~CheckboxManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/checkbox-manager/CheckboxManager.js~CheckboxManager#checked",
    "access": "public",
    "description": "Устанавливает значение чекбокса.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "значение чекбокса."
      }
    ],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "ka/components/diagram-gant/diagramGant.js",
    "content": "import dateUtils from \"../../utils/dateUtils.js\";\r\n// TODO: Переписать все методы через DiagramGantBase и удалить этот файл\r\n\r\n\r\n/**\r\n * Класс DiagramGant представляет собой компонент диаграммы Ганта.\r\n * \r\n * Диаграмма Ганта - это графическое представление процессов или задач с\r\n * обозначенными временными интервалами. Компонент обеспечивает создание\r\n * диаграммы Ганта и ее настройку с помощью данных.\r\n */\r\nexport class DiagramGant {\r\n\r\n    /**\r\n     * Конструктор класса DiagramGant.\r\n     *\r\n     * @param {string} selector - Селектор для поиска элемента в DOM,\r\n     * в котором будет размещаться диаграмма Ганта.\r\n     * @param {string} diagramName - Название диаграммы.\r\n     */\r\n    constructor(selector, diagramName = '') {\r\n        // Поиск элемента в DOM по указанному селектору.\r\n        this.element = document.querySelector(selector);\r\n        // Начальная и конечная даты периода.\r\n        this.start = null;\r\n        this.end = null;\r\n        // Общая длительность периода.\r\n        this.global_interval = null;\r\n        // Флаг, указывающий на изменение данных диаграммы.\r\n        this.isSetData = false;\r\n        // Название диаграммы.\r\n        this.diagramName = diagramName;\r\n    }\r\n\r\n    /**\r\n     * Устанавливает начальную и конечную даты периода.\r\n     *\r\n     * @param {Date} start - Начальная дата периода.\r\n     * @param {Date} end - Конечная дата периода.\r\n     */\r\n    setPeriod(start, end) {\r\n        this.start = start;\r\n        this.end = end;\r\n        this.global_interval = this.end - this.start;\r\n    }\r\n\r\n    /**\r\n     * Очищает внутреннее содержимое элемента и устанавливает флаг isChange в false.\r\n     *\r\n     * Этот метод очищает внутреннее содержимое элемента, на который ссылается this.element,\r\n     * и устанавливает флаг isChange в false. Флаг используется для отслеживания,\r\n     * были ли данные диаграммы изменены.\r\n     *\r\n     * @return {void} Этот метод не возвращает значения.\r\n     */\r\n    clear() {\r\n        // Очищает внутреннее содержимое элемента, на который ссылается this.element.\r\n        this.element.innerHTML = '';\r\n        // Устанавливает флаг isChange в false.\r\n        this.isSetData = false;\r\n    }\r\n\r\n    /**\r\n     * Устанавливает данные для компонента.\r\n     *\r\n     * @param {Date} start - Начальная дата периода.\r\n     * @param {Date} end - Конечная дата периода.\r\n     * @param {Array} data - Данные, которые нужно установить.\r\n     * @return {void}\r\n     */\r\n    setData(start, end, data) {\r\n        this.clear();\r\n        this.setPeriod(start, end);\r\n        this.isSetData = true;\r\n        this.setName(this.diagramName);\r\n        this.addDateBlock(start, end);\r\n    }\r\n\r\n    /**\r\n     * Добавляет блок с датой начала и датой окончания в диаграмму Ганта.\r\n     *\r\n     * @param {Date} start - Дата начала периода.\r\n     * @param {Date} end - Дата окончания периода.\r\n     */\r\n    addDateBlock(start, end) {\r\n        // Формируем текст подписи\r\n        const formattedStart = dateUtils.formatDisplayDateTime(start); // Форматируем дату начала\r\n        const formattedEnd = dateUtils.formatDisplayDateTime(end); // Форматируем дату конца\r\n        const interval = Math.round((end - start) / 1000);\r\n        const captionText = `За период c ${formattedStart} по ${formattedEnd}.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Продолжительность периода анализа: ${dateUtils.secondsToHMS(interval)} сек.`; // Объединяем все данные в одну строку\r\n        const div = document.createElement('div');\r\n        div.classList.add('diagram-gant__date');\r\n        div.innerHTML = captionText;\r\n        this.element.appendChild(div);\r\n    }\r\n\r\n    /**\r\n     * Добавляет блок с сообщением \"Нет данных\" в диаграмму Ганта.\r\n     *\r\n     * @param {string} name - Название блока. По умолчанию \"Нет данных\".\r\n     */\r\n    setNoneData(name = 'Нет данных') {\r\n        const div = document.createElement('div');\r\n        div.classList.add('diagram-gant__none-data');\r\n        div.innerHTML = name;\r\n        this.element.appendChild(div);\r\n    }\r\n\r\n    /**\r\n     * Создает дочерний div для диаграммы с ее названием.\r\n     *\r\n     * @param {string} divText - Название диаграммы.\r\n     */\r\n    setName(divText) {\r\n        const diagramName = document.createElement('div');\r\n        diagramName.classList.add('diagram-gant__name');\r\n        diagramName.innerHTML = divText;\r\n        this.element.appendChild(diagramName);\r\n    }\r\n\r\n    /**\r\n     * Добавляет строку в диаграмму Ганти.\r\n     * Добавляет строку в диаграмму Ганта.\r\n     *\r\n     * @param {HTMLElement} groupBlock - Элемент HTML, в который добавляется строка.\r\n     * @param {string} name - Название строки.\r\n     * @param {Date} start - Дата начала строки.\r\n     * @param {Date} end - Дата конца строки.\r\n     * @param {string} caption - Подпись строки.\r\n     * @param {boolean} selected - Является ли строка выбранной или нет.\r\n     * @param {string|null} bg - Цвет фона строки.\r\n     * @param {boolean} transparent - Прозрачность строки.\r\n     * @param {boolean} is_bold - Жирный шрифт.\r\n     * @param {string} empty_name - Название строки, если она находится вне зоны КА.\r\n     * @param {boolean} is_line_sep - Разделительная линия.\r\n     * @param {string} style - Стили строки.\r\n     */\r\n    addRowGant(groupBlock, name, start, end, caption, selected = false, bg = null, transparent = false, is_bold = false, empty_name = 'Вне зоны КА', is_line_sep = false, style = '') {\r\n        // Создание новой строки\r\n        const line = this.addRow(groupBlock, name, is_bold, is_line_sep, style);\r\n\r\n\r\n        // Добавление неактивного участка диаграммы, если он находится за пределами зоны КА\r\n        if (this.start.getTime() !== start.getTime()) {\r\n            this.addLineNull(line, this.start, start, empty_name);\r\n        }\r\n\r\n        // Добавление активного участка диаграммы\r\n        this.addLineData(line, start, end, caption, selected, bg, transparent);\r\n\r\n        // Добавление неактивного участка диаграммы, если он находится за пределами зоны КА\r\n        if (this.end.getTime() !== end.getTime()) {\r\n            this.addLineNull(line, end, this.end, empty_name);\r\n        }\r\n\r\n        // Добавление подписи к активному участку диаграммы\r\n        this.addCaptionData(line, start, end, caption);\r\n    }\r\n\r\n\r\n    /**\r\n     * Добавляет групповой блок на диаграмму.\r\n     *\r\n     * @param {string} name - Имя группы блока.\r\n     * @return {HTMLElement} Созданный элемент группы блока.\r\n     */\r\n    addGroupBlock(name) {\r\n        // Создаем новый блок для группы\r\n        const groupBlock = document.createElement('div');\r\n        groupBlock.classList.add('diogram-gant__abonent');\r\n\r\n        const nameDiv = document.createElement('div');\r\n        nameDiv.classList.add('diogram-gant__row-name');\r\n        nameDiv.innerHTML = name;\r\n        groupBlock.append(nameDiv);\r\n        this.element.append(groupBlock);\r\n        return groupBlock;\r\n    }\r\n\r\n    /**\r\n     * Добавляет строку в указанный групповой блок с заданным именем. `row-sputnik`\r\n     *\r\n     * @param {HTMLElement} groupBlock - Групповой блок, в который будет добавлена строка.\r\n     * @param {string} name - Имя строки.\r\n     * @return {HTMLElement} Созданный элемент строки `diogram-gant__row-interval`.\r\n     */\r\n    addRow(groupBlock, name, bold = false, is_line_sep = false, name_style = '') {\r\n        // Создаем блок для названия строки\r\n        const nameBlock = document.createElement('div');\r\n        nameBlock.classList.add('diagram-gant__row-sputnik');\r\n        nameBlock.innerHTML = name;\r\n\r\n        // Создаем блок строки\r\n        const line = document.createElement('div');\r\n        line.classList.add('diagram-gant__row-interval', 'row-interval', 'row-interval--procent');\r\n\r\n        // Устанавливаем стиль для названия строки\r\n        if (bold) {\r\n            nameBlock.style.fontWeight = 'bold';\r\n        } else {\r\n            nameBlock.style.fontSize = '14px';\r\n        }\r\n\r\n        // Устанавливаем стиль для разделительной линии\r\n        if (is_line_sep) {\r\n            line.classList.add('diagram-gant__end-rows-block');\r\n        }\r\n\r\n        // Применяем пользовательский стиль\r\n        if (name_style) {\r\n            nameBlock.style.cssText += name_style;\r\n        }\r\n\r\n        // Добавляем блоки в групповой блок\r\n        groupBlock.append(nameBlock, line);\r\n        return line\r\n    }\r\n\r\n    /**\r\n     * Добавляет строку с данными в указанный элемент строки.\r\n     *\r\n     * @param {HTMLElement} line - Элемент строки, в который будет добавлена строка с данными.\r\n     * @param {number} start - Начальное время данных.\r\n     * @param {number} end - Конечное время данных.\r\n     * @param {string} [name=''] - Имя данных. По умолчанию - пустая строка.\r\n     * @param {boolean} [selected=false] - Являются ли данные выбранными или нет. По умолчанию - false.\r\n     */\r\n    addLineData(line, start, end, name = '', selected = false, bg = null, transparent = false) {\r\n        // Вычисляем разницу между конечным и начальным временем\r\n        const interval = end - start;\r\n\r\n        // Вычисляем долю временного интервала в отношении общей длительности данных\r\n        const ration = interval / this.global_interval;\r\n\r\n        // Создаем блок для данных\r\n        const block = document.createElement('div');\r\n        block.classList.add('row-interval__block', 'row-interval__block--in');\r\n\r\n        // Устанавливаем стиль для выбранных данных\r\n        if (selected) {\r\n            block.classList.add('row-interval__block--selected');\r\n        }\r\n\r\n        // Устанавливаем стиль фона для данных\r\n        if (bg) {\r\n            block.style.background = bg;\r\n        }\r\n\r\n        // Устанавливаем стиль для прозрачных данных\r\n        if (transparent) {\r\n            block.classList.add('row-interval__block--transparent');\r\n        }\r\n\r\n        // Устанавливаем ширину блока в процентах\r\n        block.style.width = `${ration * 100}%`;\r\n\r\n        // Добавляем текст в блок\r\n        this.addTextSpan(block, name + \" сек.\");\r\n\r\n        // Добавляем блок в строку\r\n        line.append(block);\r\n    }\r\n\r\n    /**\r\n     * Добавляет текст в блок данных.\r\n     *\r\n     * @param {HTMLElement} block - Блок данных.\r\n     * @param {string} text - Текст для добавления.\r\n     */\r\n    addTextSpan(block, text) {\r\n        const span = document.createElement('span');\r\n        span.classList.add('row-interval__value-text');\r\n        span.innerHTML = text;\r\n        span.title = text;\r\n        block.append(span);\r\n    }\r\n\r\n    /**\r\n     * Добавляет подпись с информацией о временных интервалах в указанный элемент строки.\r\n     *\r\n     * @param {HTMLElement} line - Элемент строки, в который будет добавлена подпись.\r\n     * @param {Date} start - Дата начала временного интервала.\r\n     * @param {Date} end - Дата конца временного интервала.\r\n     * @param {number} interval - Длительность временного интервала в секундах.\r\n     */\r\n    addCaptionData(line, start, end, interval) {\r\n        // Создаем элемент подписи\r\n        const caption = document.createElement('div');\r\n        caption.classList.add('row-interval__caption');\r\n\r\n        // Формируем текст подписи\r\n        const formattedStart = dateUtils.formatDisplayDateTime(start); // Форматируем дату начала\r\n        const formattedEnd = dateUtils.formatDisplayDateTime(end); // Форматируем дату конца\r\n        const captionText = `c ${formattedStart} по ${formattedEnd}. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Время доступности: ${interval} сек.`; // Объединяем все данные в одну строку\r\n\r\n        // Устанавливаем текст подписи\r\n        caption.innerHTML = captionText;\r\n\r\n        // Добавляем подпись в строку\r\n        line.append(caption);\r\n    }\r\n\r\n    /**\r\n     * Добавляет элемент с информацией о промежутке времени, выходящего за пределы данных.\r\n     *\r\n     * @param {HTMLElement} line - Элемент строки, в который будет добавлен блок.\r\n     * @param {Date} start - Дата начала временного интервала.\r\n     * @param {Date} end - Дата конца временного интервала.\r\n     * @param {string} name - Название блока.\r\n     */\r\n    addLineNull(line, start, end, name = 'Вне зоны КА') {\r\n        // Количество секунд в промежутке времени\r\n        const interval = end - start;\r\n        // Доля промежутка времени в общей длительности данных\r\n        const ration = interval / this.global_interval;\r\n        // Создаем блок\r\n        const block = document.createElement('div');\r\n        // Добавляем классы для стилизации\r\n        block.classList.add('row-interval__block', 'row-interval__block--out');\r\n        // Устанавливаем ширину блока в процентах\r\n        block.style.width = `${ration * 100}%`;\r\n        // Вставляем текст в блок\r\n        this.addTextSpan(block, name);\r\n        // Добавляем блок в строку\r\n        line.append(block);\r\n    }\r\n}\r\n\r\n/**\r\n * Класс CallersOverlayGant наследуется от DiagramGant и отвечает за управление и отображение данных о звонящих и их спутниках в формате диаграммы Ганта.\r\n */\r\nexport class CallersOverlayGant extends DiagramGant {\r\n\r\n    /**\r\n     * Устанавливает данные для диаграммы Ганта.\r\n     *\r\n     * @param {Date} start - Начальная дата отображаемого периода.\r\n     * @param {Date} end - Конечная дата отображаемого периода.\r\n     * @param {Object} data - Объект, содержащий данные о звонящих и их спутниках.\r\n     */\r\n    setData(start, end, data) {\r\n        // Вызываем метод родительского класса для установки данных\r\n        super.setData(start, end, data);\r\n\r\n        // Проверяем, пусты ли данные\r\n        if (data.length === 0) {\r\n            this.setNoneData();\r\n            return;\r\n        }\r\n\r\n        const { callers_sats_data, first_acceptable_session, general_availability_of_sessions, sessions, united_satellite_data, callers_combined_availability } = data;\r\n\r\n        // Проверяем, пусты ли данные о звонящих и спутниках\r\n        if (callers_sats_data.length === 0 && united_satellite_data.satellites_communication_data.length === 0 && callers_combined_availability.length === 0) {\r\n            this.setNoneData();\r\n            return;\r\n        }\r\n\r\n        const united_satellite_dataDICT = {};\r\n\r\n        // Создаем словарь для данных объединенных спутников\r\n        for (const sat of united_satellite_data.satellites_communication_data) {\r\n            const { name, BSSs_and_callers_general_availability, BSSs_general_availability, BSSs_satellites_general_availability } = sat;\r\n            united_satellite_dataDICT[name] = {\r\n                BSSs_and_callers_general_availability,\r\n                BSSs_general_availability,\r\n                BSSs_satellites_general_availability,\r\n            };\r\n        }\r\n\r\n        const callers_combined_availabilityDICT = {};\r\n\r\n        // Создаем словарь для данных объединенной доступности звонящих\r\n        for (const sat of callers_combined_availability) {\r\n            const { name, satellites_data, general_availability } = sat;\r\n            callers_combined_availabilityDICT[name] = {\r\n                satellites_data,\r\n                general_availability\r\n            };\r\n        }\r\n\r\n        // Проходимся по данным звонящих и добавляем строки для каждого звонящего и их спутников\r\n        for (const caller of callers_sats_data) {\r\n            const { name, satellites_data, general_availability } = caller;\r\n\r\n            // Добавляем групповой блок для звонящего\r\n            const groupBlock = this.addGroupBlock(name);\r\n\r\n            // Получаем данные о всех спутниках и общей доступности для текущего звонящего\r\n            const { satellites_data: all_sat_data, general_availability: all_gen_data } = callers_combined_availabilityDICT[name];\r\n\r\n            // Проходимся по данным всех спутников и добавляем строки для каждого спутника\r\n            for (const satGen of all_sat_data) {\r\n                const { satellite_name, communication_interval } = satGen;\r\n                // Добавляем строки для интервалов связи спутника\r\n                this.general_row(\r\n                    groupBlock,\r\n                    communication_interval,\r\n                    `${satellite_name} в зоне связи`,\r\n                    'rgb(204, 240, 243)',\r\n                    false\r\n                );\r\n            }\r\n\r\n            // Добавляем общую доступность для объединенных данных звонящего\r\n            this.general_row(groupBlock, all_gen_data, `${name} доступность КА`, '#a4e7c1', true, 'Вне зоны связи', false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Добавляет строку с общими данными о доступности.\r\n     *\r\n     * @param {Object} groupBlock - Групповой блок для добавления строки.\r\n     * @param {Array} general_availability - Массив данных о доступности.\r\n     * @param {string} name - Имя строки.\r\n     * @param {string|null} bg - Цвет фона строки.\r\n     * @param {boolean} bold - Флаг, указывающий, должна ли строка быть жирной.\r\n     * @param {string} empty_name - Имя для пустых интервалов.\r\n     * @param {boolean} is_line_sep - Флаг, указывающий, должна ли строка быть разделенной.\r\n     */\r\n    general_row(groupBlock, general_availability, name, bg = null, bold = true, empty_name = 'Вне зоны связи', is_line_sep = true) {\r\n        // Изначально выбранная дата равна начальной дате периода\r\n        let selectedDate = this.start;\r\n\r\n        // Добавляем строку без названия\r\n        const line = this.addRow(groupBlock, name, bold, is_line_sep);\r\n\r\n        // Итерируемся по каждой сессии в данных\r\n        for (const session of general_availability) {\r\n            // Создаем объекты даты начала и конца сессии\r\n            const sessionStart = new Date(session.start_datetime_iso);\r\n            const sessionEnd = new Date(session.end_datetime_iso);\r\n\r\n            // Если дата начала сессии не равна начальной дате периода,\r\n            // добавляем линию \"Вне зоны КА\"\r\n            if (sessionStart.getTime() != selectedDate.getTime()) {\r\n                this.addLineNull(line, selectedDate, sessionStart, empty_name);\r\n            }\r\n\r\n            // Добавляем строку данных сессии\r\n            this.addLineData(line, sessionStart, sessionEnd, session.duration_in_sec, true, bg);\r\n\r\n            // Обновляем выбранную дату до даты конца текущей сессии\r\n            selectedDate = sessionEnd;\r\n        }\r\n\r\n        // Если выбранная дата не равна конечной дате периода,\r\n        // добавляем линию \"Вне зоны КА\"\r\n        if (selectedDate.getTime() !== this.end.getTime()) {\r\n            this.addLineNull(line, selectedDate, this.end, empty_name);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Класс SessionsDiagramGant наследуется от DiagramGant и отвечает за управление и отображение данных о сеансах связи в формате диаграммы Ганта.\r\n */\r\nexport class SessionsDiagramGant extends DiagramGant {\r\n    /**\r\n     * Устанавливает данные для компонента.\r\n     *\r\n     * @param {Date} start - Начальная дата периода.\r\n     * @param {Date} end - Конечная дата периода.\r\n     * @param {Array} data - Массив объектов. Каждый объект содержит следующие свойства:\r\n     *   - `{string} first_caller_name` - Имя первого вызывающего.\r\n     *   - `{string} second_caller_name` - Имя второго вызывающего.\r\n     *   - `{string} first_sat_name` - Имя первого спутника.\r\n     *   - `{string} second_sat_name` - Имя второго спутника.\r\n     *   - `{string} start_datetime_iso` - Дата начала сессии в формате ISO.\r\n     *   - `{string} end_datetime_iso` - Дата конца сессии в формате ISO.\r\n     *   - `{number} duration_in_sec` - Длительность сессии в секундах.\r\n     * @param {Object} [selectedData={}] - Объект с выбранными данными. Содержит следующие свойства:\r\n     *   - `{string} first_caller_name` - Имя первого вызывающего.\r\n     *   - `{string} second_caller_name` - Имя второго вызывающего.\r\n     *   - `{string} first_sat_name` - Имя первого спутника.\r\n     *   - `{string} second_sat_name_` - Имя второго спутника.\r\n     */\r\n    setData(start, end, data, selectedData = null) {\r\n        // Вызываем родительский метод для установки данных.\r\n        super.setData(start, end, data);\r\n\r\n        // Если данные пусты, устанавливаем сообщение об отсутствии сеансов связи.\r\n        if (data.length == 0) {\r\n            this.setNoneData('Нет сеансов связи.');\r\n            return;\r\n        }\r\n\r\n        let index = 1;\r\n\r\n        // Итерируемся по каждой сессии в данных.\r\n        for (const session of data) {\r\n            let selected = false;\r\n\r\n            // Проверяем, выбрана ли текущая сессия.\r\n            if (selectedData) {\r\n                selected = session.first_caller_name === selectedData.first_caller_name &&\r\n                    session.second_caller_name === selectedData.second_caller_name &&\r\n                    session.first_sat_name === selectedData.first_sat_name &&\r\n                    session.second_sat_name === selectedData.second_sat_name;\r\n            }\r\n\r\n            // Создаем групповой блок с именами вызывающих.\r\n            const groupBlock = this.addGroupBlock(`Сеанс ${index}`);\r\n            index++;\r\n\r\n            // Добавляем строку с деталями сессии.\r\n            this.addRowGant(\r\n                groupBlock,\r\n                `${session.first_caller_name} - ${session.first_sat_name} <br> ${session.second_caller_name} - ${session.second_sat_name}`,\r\n                new Date(session.start_datetime_iso),\r\n                new Date(session.end_datetime_iso),\r\n                session.duration_in_sec,\r\n                selected, // Указываем, выбрана ли строка.\r\n                null,\r\n                false,\r\n                false,\r\n                'Вне зоны связи'\r\n            );\r\n        }\r\n\r\n        // Отмечаем, что данные изменились.\r\n        this.isChange = true;\r\n    }\r\n}\r\n\r\n/**\r\n * Класс GeneralDiagramGant наследуется от DiagramGant и отвечает за управление и отображение данных о сеансах связи в общем формате диаграммы Ганта.\r\n */\r\nexport class GeneralDiagramGant extends DiagramGant {\r\n    /**\r\n     * Устанавливает данные для компонента.\r\n     *\r\n     * @param {Date} start - Начальная дата периода.\r\n     * @param {Date} end - Конечная дата периода.\r\n     * @param {Array} data - Массив объектов. Каждый объект содержит следующие свойства:\r\n     *   - `{string} start_datetime_iso` - Дата начала сессии в формате ISO.\r\n     *   - `{string} end_datetime_iso` - Дата конца сессии в формате ISO.\r\n     *   - `{number} duration_in_sec` - Длительность сессии в секундах.\r\n     */\r\n    setData(start, end, data, callers_data) {\r\n        // Вызываем родительский метод для установки данных.\r\n        super.setData(start, end, data);\r\n\r\n        // Проверяем, есть ли данные, если нет - устанавливаем сообщение об отсутствии сеансов связи.\r\n        if (data.length == 0) {\r\n            this.setNoneData('Нет сеансов связи.');\r\n            return;\r\n        }\r\n\r\n        // Изначально выбранная дата равна начальной дате периода.\r\n        let selectedDate = this.start;\r\n\r\n        // Проходимся по всем абонентам и возвращаем text \"A1+A2+A3...\"\r\n        const abonents_names = callers_data\r\n            .map(item => item.name) // Извлекаем только значения свойства \"name\"\r\n            .join('+'); // Объединяем их с разделителем \"+\"\r\n\r\n        // Создаем групповой блок без названия.\r\n        const groupBlock = this.addGroupBlock(abonents_names);\r\n\r\n        // суммарная длительность всех сеансов.\r\n        let totalDuration = 0;\r\n\r\n        // Итерируемся по каждой сессии в данных.\r\n        for (const session of data) {\r\n            // Создаем объекты даты начала и конца сессии.\r\n            const sessionStart = new Date(session.start_datetime_iso);\r\n            const sessionEnd = new Date(session.end_datetime_iso);\r\n\r\n            // Увеличиваем сумму длительности сессии\r\n            totalDuration += session.duration_in_sec;\r\n\r\n            // Обновляем выбранную дату до даты конца текущей сессии.\r\n            selectedDate = sessionEnd;\r\n        }\r\n\r\n\r\n        // Символ пробела\r\n        const space = '&nbsp;'\r\n\r\n        // умножаем число пробелов\r\n        const spaces = space.repeat(46);\r\n\r\n        // Делаем caption\r\n        const totalDurationString = spaces + 'Продолжительность периода связи ' + dateUtils.secondsToHMS(totalDuration);\r\n\r\n        // Добавляем строку с caption\r\n        const line = this.addRow(groupBlock, totalDurationString);\r\n\r\n        // Обнуляем выбранную дату\r\n        selectedDate = this.start;\r\n\r\n        // Итерируемся по каждой сессии в данных.\r\n        for (const session of data) {\r\n            // Создаем объекты даты начала и конца сессии.\r\n            const sessionStart = new Date(session.start_datetime_iso);\r\n            const sessionEnd = new Date(session.end_datetime_iso);\r\n\r\n            // Если дата начала сессии не равна начальной дате периода,\r\n            // добавляем линию \"Вне зоны связи\".\r\n            if (sessionStart.getTime() != selectedDate.getTime()) {\r\n                this.addLineNull(line, selectedDate, sessionStart, 'Вне зоны связи');\r\n            }\r\n\r\n            // Добавляем строку данных сессии.\r\n            this.addLineData(line, sessionStart, sessionEnd, session.duration_in_sec);\r\n\r\n            // Обновляем выбранную дату до даты конца текущей сессии.\r\n            selectedDate = sessionEnd;\r\n\r\n            // Увеличиваем сумму длительности сессии\r\n            totalDuration += session.duration_in_sec;\r\n        }\r\n\r\n        // Если выбранная дата не равна конечной дате периода,\r\n        // добавляем линию \"Вне зоны связи\".\r\n        if (selectedDate.getTime() !== this.end.getTime()) {\r\n            this.addLineNull(line, selectedDate, this.end, 'Вне зоны связи');\r\n        }\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/diagram-gant/diagramGant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "class",
    "name": "DiagramGant",
    "memberof": "ka/components/diagram-gant/diagramGant.js",
    "static": true,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/diagram-gant/diagramGant.js",
    "importStyle": "{DiagramGant}",
    "description": "Класс DiagramGant представляет собой компонент диаграммы Ганта.\n\nДиаграмма Ганта - это графическое представление процессов или задач с\nобозначенными временными интервалами. Компонент обеспечивает создание\nдиаграммы Ганта и ее настройку с помощью данных.",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 129,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#constructor",
    "access": "public",
    "description": "Конструктор класса DiagramGant.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "Селектор для поиска элемента в DOM,\nв котором будет размещаться диаграмма Ганта."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "diagramName",
        "description": "Название диаграммы."
      }
    ]
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "element",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#element",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "start",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#start",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "end",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#end",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "global_interval",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#global_interval",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "isSetData",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#isSetData",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "diagramName",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#diagramName",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "setPeriod",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#setPeriod",
    "access": "public",
    "description": "Устанавливает начальную и конечную даты периода.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Начальная дата периода."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Конечная дата периода."
      }
    ],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "clear",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#clear",
    "access": "public",
    "description": "Очищает внутреннее содержимое элемента и устанавливает флаг isChange в false.\n\nЭтот метод очищает внутреннее содержимое элемента, на который ссылается this.element,\nи устанавливает флаг isChange в false. Флаг используется для отслеживания,\nбыли ли данные диаграммы изменены.",
    "lineNumber": 56,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": "Этот метод не возвращает значения."
    },
    "params": []
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "setData",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#setData",
    "access": "public",
    "description": "Устанавливает данные для компонента.",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Начальная дата периода."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Конечная дата периода."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Данные, которые нужно установить."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "addDateBlock",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#addDateBlock",
    "access": "public",
    "description": "Добавляет блок с датой начала и датой окончания в диаграмму Ганта.",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Дата начала периода."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Дата окончания периода."
      }
    ],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "setNoneData",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#setNoneData",
    "access": "public",
    "description": "Добавляет блок с сообщением \"Нет данных\" в диаграмму Ганта.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Название блока. По умолчанию \"Нет данных\"."
      }
    ],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "setName",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#setName",
    "access": "public",
    "description": "Создает дочерний div для диаграммы с ее названием.",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "divText",
        "description": "Название диаграммы."
      }
    ],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "addRowGant",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#addRowGant",
    "access": "public",
    "description": "Добавляет строку в диаграмму Ганти.\nДобавляет строку в диаграмму Ганта.",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "groupBlock",
        "description": "Элемент HTML, в который добавляется строка."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Название строки."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Дата начала строки."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Дата конца строки."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "caption",
        "description": "Подпись строки."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "selected",
        "description": "Является ли строка выбранной или нет."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "bg",
        "description": "Цвет фона строки."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "transparent",
        "description": "Прозрачность строки."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "is_bold",
        "description": "Жирный шрифт."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "empty_name",
        "description": "Название строки, если она находится вне зоны КА."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "is_line_sep",
        "description": "Разделительная линия."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "Стили строки."
      }
    ],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "addGroupBlock",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#addGroupBlock",
    "access": "public",
    "description": "Добавляет групповой блок на диаграмму.",
    "lineNumber": 167,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Имя группы блока."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "Созданный элемент группы блока."
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "addRow",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#addRow",
    "access": "public",
    "description": "Добавляет строку в указанный групповой блок с заданным именем. `row-sputnik`",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "groupBlock",
        "description": "Групповой блок, в который будет добавлена строка."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Имя строки."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "Созданный элемент строки `diogram-gant__row-interval`."
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "addLineData",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#addLineData",
    "access": "public",
    "description": "Добавляет строку с данными в указанный элемент строки.",
    "lineNumber": 228,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "Элемент строки, в который будет добавлена строка с данными."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Начальное время данных."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Конечное время данных."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "name",
        "description": "Имя данных. По умолчанию - пустая строка."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "selected",
        "description": "Являются ли данные выбранными или нет. По умолчанию - false."
      }
    ],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "addTextSpan",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#addTextSpan",
    "access": "public",
    "description": "Добавляет текст в блок данных.",
    "lineNumber": 270,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "block",
        "description": "Блок данных."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Текст для добавления."
      }
    ],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "addCaptionData",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#addCaptionData",
    "access": "public",
    "description": "Добавляет подпись с информацией о временных интервалах в указанный элемент строки.",
    "lineNumber": 286,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "Элемент строки, в который будет добавлена подпись."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Дата начала временного интервала."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Дата конца временного интервала."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "Длительность временного интервала в секундах."
      }
    ],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "addLineNull",
    "memberof": "ka/components/diagram-gant/diagramGant.js~DiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~DiagramGant#addLineNull",
    "access": "public",
    "description": "Добавляет элемент с информацией о промежутке времени, выходящего за пределы данных.",
    "lineNumber": 311,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "Элемент строки, в который будет добавлен блок."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Дата начала временного интервала."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Дата конца временного интервала."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Название блока."
      }
    ],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "class",
    "name": "CallersOverlayGant",
    "memberof": "ka/components/diagram-gant/diagramGant.js",
    "static": true,
    "longname": "ka/components/diagram-gant/diagramGant.js~CallersOverlayGant",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/diagram-gant/diagramGant.js",
    "importStyle": "{CallersOverlayGant}",
    "description": "Класс CallersOverlayGant наследуется от DiagramGant и отвечает за управление и отображение данных о звонящих и их спутниках в формате диаграммы Ганта.",
    "lineNumber": 332,
    "interface": false,
    "extends": [
      "DiagramGant"
    ]
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "setData",
    "memberof": "ka/components/diagram-gant/diagramGant.js~CallersOverlayGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~CallersOverlayGant#setData",
    "access": "public",
    "description": "Устанавливает данные для диаграммы Ганта.",
    "lineNumber": 341,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Начальная дата отображаемого периода."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Конечная дата отображаемого периода."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Объект, содержащий данные о звонящих и их спутниках."
      }
    ],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "general_row",
    "memberof": "ka/components/diagram-gant/diagramGant.js~CallersOverlayGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~CallersOverlayGant#general_row",
    "access": "public",
    "description": "Добавляет строку с общими данными о доступности.",
    "lineNumber": 421,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "groupBlock",
        "description": "Групповой блок для добавления строки."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "general_availability",
        "description": "Массив данных о доступности."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Имя строки."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "bg",
        "description": "Цвет фона строки."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bold",
        "description": "Флаг, указывающий, должна ли строка быть жирной."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "empty_name",
        "description": "Имя для пустых интервалов."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "is_line_sep",
        "description": "Флаг, указывающий, должна ли строка быть разделенной."
      }
    ],
    "return": null
  },
  {
    "__docId__": 157,
    "kind": "class",
    "name": "SessionsDiagramGant",
    "memberof": "ka/components/diagram-gant/diagramGant.js",
    "static": true,
    "longname": "ka/components/diagram-gant/diagramGant.js~SessionsDiagramGant",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/diagram-gant/diagramGant.js",
    "importStyle": "{SessionsDiagramGant}",
    "description": "Класс SessionsDiagramGant наследуется от DiagramGant и отвечает за управление и отображение данных о сеансах связи в формате диаграммы Ганта.",
    "lineNumber": 458,
    "interface": false,
    "extends": [
      "DiagramGant"
    ]
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "setData",
    "memberof": "ka/components/diagram-gant/diagramGant.js~SessionsDiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~SessionsDiagramGant#setData",
    "access": "public",
    "description": "Устанавливает данные для компонента.",
    "lineNumber": 478,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Начальная дата периода."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Конечная дата периода."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Массив объектов. Каждый объект содержит следующие свойства:\n  - `{string} first_caller_name` - Имя первого вызывающего.\n  - `{string} second_caller_name` - Имя второго вызывающего.\n  - `{string} first_sat_name` - Имя первого спутника.\n  - `{string} second_sat_name` - Имя второго спутника.\n  - `{string} start_datetime_iso` - Дата начала сессии в формате ISO.\n  - `{string} end_datetime_iso` - Дата конца сессии в формате ISO.\n  - `{number} duration_in_sec` - Длительность сессии в секундах."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "selectedData",
        "description": "Объект с выбранными данными. Содержит следующие свойства:\n  - `{string} first_caller_name` - Имя первого вызывающего.\n  - `{string} second_caller_name` - Имя второго вызывающего.\n  - `{string} first_sat_name` - Имя первого спутника.\n  - `{string} second_sat_name_` - Имя второго спутника."
      }
    ],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "isChange",
    "memberof": "ka/components/diagram-gant/diagramGant.js~SessionsDiagramGant",
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~SessionsDiagramGant#isChange",
    "access": "public",
    "description": null,
    "lineNumber": 522,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "class",
    "name": "GeneralDiagramGant",
    "memberof": "ka/components/diagram-gant/diagramGant.js",
    "static": true,
    "longname": "ka/components/diagram-gant/diagramGant.js~GeneralDiagramGant",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/diagram-gant/diagramGant.js",
    "importStyle": "{GeneralDiagramGant}",
    "description": "Класс GeneralDiagramGant наследуется от DiagramGant и отвечает за управление и отображение данных о сеансах связи в общем формате диаграммы Ганта.",
    "lineNumber": 529,
    "interface": false,
    "extends": [
      "DiagramGant"
    ]
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "setData",
    "memberof": "ka/components/diagram-gant/diagramGant.js~GeneralDiagramGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGant.js~GeneralDiagramGant#setData",
    "access": "public",
    "description": "Устанавливает данные для компонента.",
    "lineNumber": 540,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Начальная дата периода."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Конечная дата периода."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Массив объектов. Каждый объект содержит следующие свойства:\n  - `{string} start_datetime_iso` - Дата начала сессии в формате ISO.\n  - `{string} end_datetime_iso` - Дата конца сессии в формате ISO.\n  - `{number} duration_in_sec` - Длительность сессии в секундах."
      }
    ],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "ka/components/diagram-gant/diagramGantConcretical/CallersDiagramGant.js",
    "content": "\r\n/**\r\n * Класс для отображения диаграммы доступности КА для звонящих абонентов.\r\n *\r\n * @class CallersDiagramGantNEW\r\n * @extends {DiagramGantBase}\r\n */\r\nimport DiagramGantBase from \"../DiagramGantBase.js\";\r\nimport { dataToDiagramBlocks, blocksToCaption } from \"./metaDiagramGant.js\";\r\n\r\nexport class CallersDiagramGantNEW extends DiagramGantBase {\r\n    /**\r\n     * Установка данных для отображения в виде группы строк.\r\n     *\r\n     * @param {Date} start - Дата начала периода.\r\n     * @param {Date} end - Дата конца периода.\r\n     * @param {Array<Object>} data - Массив объектов с данными для отображения.\r\n     * @return {void}\r\n     */\r\n    setData(start, end, data) {\r\n        // Вызываем метод родительского класса для установки данных\r\n        super.setData(start, end, data);\r\n        const groups = [];\r\n\r\n        // Проходим по абонентам\r\n        for (const caller of data) {\r\n            const { name, satellites_data, general_availability } = caller;\r\n            // Добавляем групповой блок диаграммы \r\n            const group = {\r\n                name,\r\n                lines: [],\r\n            }\r\n            // Проходимся по данным спутников и добавляем строку для каждого спутника\r\n            for (const intervalData of satellites_data) {\r\n                const { satellite_name, communication_interval } = intervalData;\r\n                // Создаем, настраиваем линию\r\n                const blocks = dataToDiagramBlocks(communication_interval)\r\n                const line = {\r\n                    nameElement: {\r\n                        name: satellite_name,\r\n                        styles: {\r\n                            fontSize: '14px',\r\n                        }\r\n                    },\r\n                    emptySetting: {\r\n                        name: 'Вне зоны КА',\r\n                    },\r\n                    captionElement: {\r\n                        caption: blocksToCaption(blocks),\r\n                    },\r\n                    blocks: blocks,\r\n                }\r\n                group.lines.push(line);\r\n            }\r\n\r\n            // Добавляем генеральную строку\r\n            const blocks = dataToDiagramBlocks(general_availability)\r\n            const line = {\r\n                nameElement: {\r\n                    name: `${name} - доступность КА`,\r\n                    styles: {\r\n                        fontWeight: 'bold'\r\n                    }\r\n                },\r\n                emptySetting: {\r\n                    name: 'Вне зоны КА',\r\n                },\r\n                captionElement: {\r\n                    caption: blocksToCaption(blocks),\r\n                },\r\n                allBlocksSetting: {\r\n                    selected: true,\r\n                },\r\n                blocks: blocks,\r\n            }\r\n            group.lines.push(line);\r\n            groups.push(group);\r\n        }\r\n\r\n        // Устанавливаем отформатированные данные для отображения\r\n        this.setFormatData(start, end, groups)\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/diagram-gant/diagramGantConcretical/CallersDiagramGant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "class",
    "name": "CallersDiagramGantNEW",
    "memberof": "ka/components/diagram-gant/diagramGantConcretical/CallersDiagramGant.js",
    "static": true,
    "longname": "ka/components/diagram-gant/diagramGantConcretical/CallersDiagramGant.js~CallersDiagramGantNEW",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/diagram-gant/diagramGantConcretical/CallersDiagramGant.js",
    "importStyle": "{CallersDiagramGantNEW}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false,
    "extends": [
      "ka/components/diagram-gant/DiagramGantBase.js~DiagramGantBase"
    ]
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "setData",
    "memberof": "ka/components/diagram-gant/diagramGantConcretical/CallersDiagramGant.js~CallersDiagramGantNEW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGantConcretical/CallersDiagramGant.js~CallersDiagramGantNEW#setData",
    "access": "public",
    "description": "Установка данных для отображения в виде группы строк.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Дата начала периода."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Дата конца периода."
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Массив объектов с данными для отображения."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "ka/components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js",
    "content": "import DiagramGantBase from \"../DiagramGantBase.js\";\r\nimport { dataToDiagramBlocks, blocksToCaption } from \"./metaDiagramGant.js\";\r\n\r\n\r\n/**\r\n * Преобразует данные о спутниках в словарь, где каждый спутник ассоциирован с его доступностью и данными по BSS.\r\n * \r\n * @param {Object} united_satellite_data - Объект, содержащий данные о спутниках. \r\n *   - `{Array} satellites_communication_data` - Массив объектов, где каждый объект содержит информацию о спутниках.\r\n * @returns {Object} Словарь, где ключами являются имена спутников, а значениями объекты с данными о доступности и BSS.\r\n *   - `{Object} BSSs_and_callers_general_availability` - Общая доступность BSS и вызывающих.\r\n *   - `{Object} BSSs_general_availability` - Доступность BSS.\r\n *   - `{Object} BSSs_satellites_general_availability` - Доступность спутников BSS.\r\n *   - `{Object} BSSs_satellites_general_availabilityDICT` - Словарь, где ключами являются имена спутников, а значениями данные о доступности этих спутников.\r\n */\r\nfunction to_united_satellite_dict(united_satellite_data) {\r\n    const united_satellite_dataDICT = {};\r\n\r\n    for (const sat of united_satellite_data.satellites_communication_data) {\r\n        const { name, BSSs_and_callers_general_availability, BSSs_general_availability, BSSs_satellites_general_availability } = sat;\r\n\r\n        // Создаем словарь для доступности спутников BSS\r\n        const BSSs_satellites_general_availabilityDICT = {};\r\n        for (const satGen of BSSs_satellites_general_availability) {\r\n            const { satellite_name, satellite_general_availability } = satGen;\r\n            BSSs_satellites_general_availabilityDICT[satellite_name] = satellite_general_availability;\r\n        }\r\n\r\n        united_satellite_dataDICT[name] = {\r\n            BSSs_and_callers_general_availability,\r\n            BSSs_general_availability,\r\n            BSSs_satellites_general_availability,\r\n            BSSs_satellites_general_availabilityDICT\r\n        };\r\n    }\r\n\r\n    return united_satellite_dataDICT;\r\n}\r\n\r\n/**\r\n * Преобразует данные о доступности вызывающих в словарь, где каждый вызывающий ассоциирован с его доступностью и данными по спутникам.\r\n * \r\n * @param {Array} callers_combined_availability - Массив объектов, где каждый объект содержит информацию о доступности вызывающего.\r\n *   - `{string} name` - Имя вызывающего.\r\n *   - `{Array} satellites_data` - Массив объектов, содержащих данные о спутниках.\r\n *     - `{string} satellite_name` - Имя спутника.\r\n *     - `{Array} communication_interval` - Массив объектов с периодами связи.\r\n *   - `{Object} general_availability` - Общая доступность вызывающего.\r\n * @returns {Object} Словарь, где ключами являются имена вызывающих, а значениями объекты с данными о доступности и спутниках.\r\n *   - `{Array} satellites_data` - Массив объектов с данными о спутниках.\r\n *   - `{Object} general_availability` - Общая доступность вызывающего.\r\n *   - `{Object} satellites_dataDICT` - Словарь, где ключами являются имена спутников, а значениями массивы с периодами связи.\r\n */\r\nfunction to_callers_combined_availabilityDICT(callers_combined_availability) {\r\n    const callers_combined_availabilityDICT = {};\r\n\r\n    for (const sat of callers_combined_availability) {\r\n        const { name, satellites_data, general_availability } = sat;\r\n\r\n        // Создаем словарь для данных по спутникам\r\n        const satellites_dataDICT = {};\r\n        for (const satGen of satellites_data) {\r\n            const { satellite_name, communication_interval } = satGen;\r\n            satellites_dataDICT[satellite_name] = communication_interval;\r\n        }\r\n\r\n        callers_combined_availabilityDICT[name] = {\r\n            satellites_data,\r\n            general_availability,\r\n            satellites_dataDICT\r\n        };\r\n    }\r\n\r\n    return callers_combined_availabilityDICT;\r\n}\r\n\r\n\r\n/**\r\n * Класс для создания диаграммы Ганта с отображением данных о связи между абонентами и спутниками.\r\n * Наследует от `DiagramGantBase`.\r\n */\r\nexport class CallersKaRssDiagramGantNEW extends DiagramGantBase {\r\n    /**\r\n     * Устанавливает данные для компонента диаграммы Ганта.\r\n     *\r\n     * @param {Date} start - Начальная дата периода отображения диаграммы.\r\n     * @param {Date} end - Конечная дата периода отображения диаграммы.\r\n     * @param {Object} data - Объект, содержащий данные для отображения:\r\n     *   - `{Array} callers_sats_data` - Массив данных по абонентам и их спутникам. Каждый объект содержит:\r\n     *     - `{string} name` - Имя абонента.\r\n     *     - `{Array} satellites_data` - Массив данных о спутниках для данного абонента. Каждый объект содержит:\r\n     *       - `{string} satellite_name` - Имя спутника.\r\n     *       - `{Array} communication_interval` - Массив периодов связи спутника с абонентом.\r\n     *     - `{Object} general_availability` - Общая доступность абонента.\r\n     *   - `{Object} united_satellite_data` - Данные о спутниках и их доступности.\r\n     *   - `{Object} callers_combined_availability` - Данные о доступности вызывающих в сочетании со спутниками.\r\n     * @returns {void}\r\n     */\r\n    setData(start, end, data) {\r\n        // Вызываем метод родительского класса для установки данных\r\n        super.setData(start, end, data);\r\n\r\n        const { callers_sats_data, united_satellite_data, callers_combined_availability } = data;\r\n\r\n        // Преобразуем массивы данных в словари\r\n        const united_satellite_dataDICT = to_united_satellite_dict(united_satellite_data);\r\n        const callers_combined_availabilityDICT = to_callers_combined_availabilityDICT(callers_combined_availability);\r\n\r\n        const groups = [];\r\n\r\n        // Проходим по данным абонентов\r\n        for (const caller of callers_sats_data) {\r\n            const { name, satellites_data } = caller;\r\n\r\n            // Создаем групповой блок для абонента\r\n            const group = {\r\n                name,\r\n                lines: [],\r\n            };\r\n\r\n            // Обрабатываем данные по каждому спутнику\r\n            for (const intervalData of satellites_data) {\r\n                const { satellite_name, communication_interval } = intervalData;\r\n\r\n                // Создаем и настраиваем линию для связи абонента со спутником\r\n                const kaBlocks = dataToDiagramBlocks(communication_interval);\r\n                const kaLine = {\r\n                    nameElement: {\r\n                        name: `Аб. - ${satellite_name}`,\r\n                        styles: {\r\n                            fontSize: '14px',\r\n                        }\r\n                    },\r\n                    emptySetting: {\r\n                        name: 'Вне зоны КА',\r\n                    },\r\n                    allBlocksSetting: {\r\n                        styles: {\r\n                            backgroundColor: 'rgb(118 200 211)',\r\n                        }\r\n                    },\r\n                    captionElement: {\r\n                        caption: blocksToCaption(kaBlocks),\r\n                    },\r\n                    blocks: kaBlocks,\r\n                };\r\n\r\n                // Создаем и настраиваем линию для РСС\r\n                const satellite_general_availability = united_satellite_dataDICT[name].BSSs_satellites_general_availabilityDICT[satellite_name] || [];\r\n                const rssBlocks = dataToDiagramBlocks(satellite_general_availability);\r\n                const rssLine = {\r\n                    nameElement: {\r\n                        name: `РСС - ${satellite_name}`,\r\n                        styles: {\r\n                            fontSize: '14px',\r\n                        }\r\n                    },\r\n                    emptySetting: {\r\n                        name: 'Вне зоны РСС',\r\n                    },\r\n                    allBlocksSetting: {\r\n                        styles: {\r\n                            backgroundColor: 'rgb(118 200 211)',\r\n                        }\r\n                    },\r\n                    captionElement: {\r\n                        caption: blocksToCaption(rssBlocks),\r\n                    },\r\n                    blocks: rssBlocks,\r\n                };\r\n\r\n                // Создаем и настраиваем линию для совмещения данных КА и РСС\r\n                const communication_interval_all = callers_combined_availabilityDICT[name].satellites_dataDICT[satellite_name] || [];\r\n                const kaAndRssBlocks = dataToDiagramBlocks(communication_interval_all);\r\n                const kaAndRssLine = {\r\n                    nameElement: {\r\n                        name: `${satellite_name} + РСС<br>Аб. в зоне связи`,\r\n                        styles: {\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold'\r\n                        }\r\n                    },\r\n                    emptySetting: {\r\n                        name: 'Вне зоны связи',\r\n                    },\r\n                    allBlocksSetting: {\r\n                        styles: {\r\n                            backgroundColor: '#a4e7c1',\r\n                        }\r\n                    },\r\n                    blocksSetting: {\r\n                        classes: ['diagram-gant__end-rows-block']\r\n                    },\r\n                    captionElement: {\r\n                        caption: blocksToCaption(kaAndRssBlocks),\r\n                    },\r\n                    blocks: kaAndRssBlocks,\r\n                };\r\n\r\n                // Добавляем линии в групповой блок\r\n                group.lines.push(kaLine, rssLine, kaAndRssLine);\r\n            }\r\n\r\n            // Создаем и настраиваем генеральную строку для общего доступности\r\n            const { satellites_data: all_sat_data, general_availability: all_gen_data } = callers_combined_availabilityDICT[name];\r\n            const finalRss = dataToDiagramBlocks(all_gen_data);\r\n            const finalLine = {\r\n                nameElement: {\r\n                    name: `${name} - доступность связи`,\r\n                    styles: {\r\n                        fontWeight: 'bold'\r\n                    }\r\n                },\r\n                emptySetting: {\r\n                    name: 'Вне зоны связи',\r\n                },\r\n                allBlocksSetting: {\r\n                    styles: {\r\n                        backgroundColor: '#a17dc4'\r\n                    }\r\n                },\r\n                captionElement: {\r\n                    caption: blocksToCaption(finalRss),\r\n                },\r\n                blocks: finalRss,\r\n            };\r\n            group.lines.push(finalLine);\r\n\r\n            // Добавляем групповой блок в массив групп\r\n            groups.push(group);\r\n        }\r\n\r\n        this.setCaptionFormatter((formatStart, formatEnd, formatInterval) => {\r\n            return `За период с ${formatStart} по ${formatEnd}.&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp Продолжительность периода анализа: ${formatInterval}`;\r\n        })\r\n\r\n        // Устанавливаем форматированные данные в диаграмму\r\n        this.setFormatData(start, end, groups);\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "to_united_satellite_dict",
    "memberof": "ka/components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js~to_united_satellite_dict",
    "access": "public",
    "export": false,
    "importPath": "./ka/components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js",
    "importStyle": null,
    "description": "Преобразует данные о спутниках в словарь, где каждый спутник ассоциирован с его доступностью и данными по BSS.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Словарь, где ключами являются имена спутников, а значениями объекты с данными о доступности и BSS.\n  - `{Object} BSSs_and_callers_general_availability` - Общая доступность BSS и вызывающих.\n  - `{Object} BSSs_general_availability` - Доступность BSS.\n  - `{Object} BSSs_satellites_general_availability` - Доступность спутников BSS.\n  - `{Object} BSSs_satellites_general_availabilityDICT` - Словарь, где ключами являются имена спутников, а значениями данные о доступности этих спутников."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "united_satellite_data",
        "description": "Объект, содержащий данные о спутниках. \n  - `{Array} satellites_communication_data` - Массив объектов, где каждый объект содержит информацию о спутниках."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Словарь, где ключами являются имена спутников, а значениями объекты с данными о доступности и BSS.\n  - `{Object} BSSs_and_callers_general_availability` - Общая доступность BSS и вызывающих.\n  - `{Object} BSSs_general_availability` - Доступность BSS.\n  - `{Object} BSSs_satellites_general_availability` - Доступность спутников BSS.\n  - `{Object} BSSs_satellites_general_availabilityDICT` - Словарь, где ключами являются имена спутников, а значениями данные о доступности этих спутников."
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "to_callers_combined_availabilityDICT",
    "memberof": "ka/components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js~to_callers_combined_availabilityDICT",
    "access": "public",
    "export": false,
    "importPath": "./ka/components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js",
    "importStyle": null,
    "description": "Преобразует данные о доступности вызывающих в словарь, где каждый вызывающий ассоциирован с его доступностью и данными по спутникам.",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Словарь, где ключами являются имена вызывающих, а значениями объекты с данными о доступности и спутниках.\n  - `{Array} satellites_data` - Массив объектов с данными о спутниках.\n  - `{Object} general_availability` - Общая доступность вызывающего.\n  - `{Object} satellites_dataDICT` - Словарь, где ключами являются имена спутников, а значениями массивы с периодами связи."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "callers_combined_availability",
        "description": "Массив объектов, где каждый объект содержит информацию о доступности вызывающего.\n  - `{string} name` - Имя вызывающего.\n  - `{Array} satellites_data` - Массив объектов, содержащих данные о спутниках.\n    - `{string} satellite_name` - Имя спутника.\n    - `{Array} communication_interval` - Массив объектов с периодами связи.\n  - `{Object} general_availability` - Общая доступность вызывающего."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Словарь, где ключами являются имена вызывающих, а значениями объекты с данными о доступности и спутниках.\n  - `{Array} satellites_data` - Массив объектов с данными о спутниках.\n  - `{Object} general_availability` - Общая доступность вызывающего.\n  - `{Object} satellites_dataDICT` - Словарь, где ключами являются имена спутников, а значениями массивы с периодами связи."
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "CallersKaRssDiagramGantNEW",
    "memberof": "ka/components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js",
    "static": true,
    "longname": "ka/components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js~CallersKaRssDiagramGantNEW",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js",
    "importStyle": "{CallersKaRssDiagramGantNEW}",
    "description": "Класс для создания диаграммы Ганта с отображением данных о связи между абонентами и спутниками.\nНаследует от `DiagramGantBase`.",
    "lineNumber": 82,
    "interface": false,
    "extends": [
      "ka/components/diagram-gant/DiagramGantBase.js~DiagramGantBase"
    ]
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "setData",
    "memberof": "ka/components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js~CallersKaRssDiagramGantNEW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js~CallersKaRssDiagramGantNEW#setData",
    "access": "public",
    "description": "Устанавливает данные для компонента диаграммы Ганта.",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Начальная дата периода отображения диаграммы."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Конечная дата периода отображения диаграммы."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Объект, содержащий данные для отображения:\n  - `{Array} callers_sats_data` - Массив данных по абонентам и их спутникам. Каждый объект содержит:\n    - `{string} name` - Имя абонента.\n    - `{Array} satellites_data` - Массив данных о спутниках для данного абонента. Каждый объект содержит:\n      - `{string} satellite_name` - Имя спутника.\n      - `{Array} communication_interval` - Массив периодов связи спутника с абонентом.\n    - `{Object} general_availability` - Общая доступность абонента.\n  - `{Object} united_satellite_data` - Данные о спутниках и их доступности.\n  - `{Object} callers_combined_availability` - Данные о доступности вызывающих в сочетании со спутниками."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "ka/components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js",
    "content": "\r\nimport DiagramGantBase from \"../DiagramGantBase.js\";\r\nimport { dataToDiagramBlocks, blocksToCaption } from \"./metaDiagramGant.js\";\r\n\r\n\r\n/**\r\n * Преобразует данные о спутниках в словарь.\r\n *\r\n * @param {Object} united_satellite_data - Объект с объединенными данными о спутниках.\r\n * @returns {Object} united_satellite_dataDICT - Словарь, где ключами являются имена спутников, а значениями - их данные.\r\n */\r\nfunction to_united_satellite_dict(united_satellite_data) {\r\n    const united_satellite_dataDICT = {};\r\n\r\n    for (const sat of united_satellite_data.satellites_communication_data) {\r\n        const { name, BSSs_and_callers_general_availability, BSSs_general_availability, BSSs_satellites_general_availability } = sat;\r\n        united_satellite_dataDICT[name] = {\r\n            BSSs_and_callers_general_availability,\r\n            BSSs_general_availability,\r\n            BSSs_satellites_general_availability,\r\n        };\r\n    }\r\n\r\n    return united_satellite_dataDICT;\r\n}\r\n\r\n/**\r\n * Преобразует данные о доступности абонентов в словарь.\r\n *\r\n * @param {Array} callers_combined_availability - Массив объектов с данными о доступности абонентов.\r\n * @returns {Object} callers_combined_availabilityDICT - Словарь, где ключами являются имена абонентов, а значениями - их данные.\r\n */\r\nfunction to_callers_combined_availabilityDICT(callers_combined_availability) {\r\n    const callers_combined_availabilityDICT = {};\r\n\r\n    for (const sat of callers_combined_availability) {\r\n        const { name, satellites_data, general_availability } = sat;\r\n        callers_combined_availabilityDICT[name] = {\r\n            satellites_data,\r\n            general_availability\r\n        };\r\n    }\r\n\r\n    return callers_combined_availabilityDICT;\r\n}\r\n\r\n/**\r\n * Класс CallersOverlayGantNEW наследуется от DiagramGantBase и отвечает за управление и отображение данных о сеансах связи абонентов в формате диаграммы Ганта.\r\n */\r\nexport class CallersOverlayGantNEW extends DiagramGantBase {\r\n    /**\r\n     * Устанавливает данные для компонента.\r\n     *\r\n     * @param {Date} start - Начальная дата периода.\r\n     * @param {Date} end - Конечная дата периода.\r\n     * @param {Object} data - Объект с данными. Содержит следующие свойства:\r\n     *   - `{Array} callers_sats_data` - Данные о спутниках абонентов.\r\n     *   - `{Object} first_acceptable_session` - Первоначальные данные о сессиях.\r\n     *   - `{Array} general_availability_of_sessions` - Общая доступность сессий.\r\n     *   - `{Array} sessions` - Данные о сессиях.\r\n     *   - `{Object} united_satellite_data` - Объединенные данные о спутниках.\r\n     *   - `{Array} callers_combined_availability` - Объединенные данные о доступности абонентов.\r\n     */\r\n    setData(start, end, data) {\r\n        // Вызываем метод родительского класса для установки данных.\r\n        super.setData(start, end, data);\r\n        const { callers_sats_data, first_acceptable_session, general_availability_of_sessions, sessions, united_satellite_data, callers_combined_availability } = data;\r\n\r\n        // Создаем словари для данных о спутниках и доступности абонентов.\r\n        const united_satellite_dataDICT = to_united_satellite_dict(united_satellite_data);\r\n        const callers_combined_availabilityDICT = to_callers_combined_availabilityDICT(callers_combined_availability);\r\n\r\n        const groups = [];\r\n\r\n        // Проходим по абонентам.\r\n        for (const caller of callers_sats_data) {\r\n            const { name, satellites_data, general_availability } = caller;\r\n\r\n            // Создаем групповой блок диаграммы для каждого абонента.\r\n            const group = {\r\n                name,\r\n                lines: [],\r\n            }\r\n\r\n            // Получаем данные о доступности спутников и общую доступность абонента.\r\n            const { satellites_data: all_sat_data, general_availability: all_gen_data } = callers_combined_availabilityDICT[name];\r\n\r\n            // Проходим по данным о спутниках.\r\n            for (const satGen of all_sat_data) {\r\n                const { satellite_name, communication_interval } = satGen;\r\n                const blocks = dataToDiagramBlocks(communication_interval);\r\n\r\n                // Создаем строку с данными о сессиях связи для каждого спутника.\r\n                const line = {\r\n                    nameElement: {\r\n                        name: `${satellite_name} + РСС<br>Аб. в зоне связи`,\r\n                        styles: {\r\n                            fontSize: '14px',\r\n                        }\r\n                    },\r\n                    emptySetting: {\r\n                        name: 'Вне зоны связи',\r\n                    },\r\n                    allBlocksSetting: {\r\n                        styles: {\r\n                            backgroundColor: 'rgb(164, 231, 193)',\r\n                        }\r\n                    },\r\n                    blocksSetting: {\r\n                        classes: ['diagram-gant__end-rows-block']\r\n                    },\r\n                    captionElement: {\r\n                        caption: blocksToCaption(blocks),\r\n                    },\r\n                    blocks: blocks,\r\n                }\r\n                group.lines.push(line);\r\n            }\r\n\r\n            // Создаем генеральную строку с данными о доступности абонента.\r\n            const blocks = dataToDiagramBlocks(all_gen_data);\r\n            const line = {\r\n                nameElement: {\r\n                    name: `${name} -  Общая доступность связи`,\r\n                    styles: {\r\n                        fontWeight: 'bold'\r\n                    }\r\n                },\r\n                emptySetting: {\r\n                    name: 'Вне зоны связи',\r\n                },\r\n                allBlocksSetting: {\r\n                    styles: {\r\n                        backgroundColor: 'rgb(118 200 211)',\r\n                    }\r\n\r\n                },\r\n                captionElement: {\r\n                    caption: blocksToCaption(blocks),\r\n                },\r\n                blocks: blocks,\r\n            }\r\n            group.lines.push(line);\r\n            groups.push(group);\r\n        }\r\n\r\n        this.setCaptionFormatter((formatStart, formatEnd, formatInterval) => {\r\n            return `За период с ${formatStart} по ${formatEnd}.&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp Продолжительность периода анализа: ${formatInterval}`;\r\n        })\r\n\r\n        // Устанавливаем форматированные данные для диаграммы.\r\n        this.setFormatData(start, end, groups)\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "to_united_satellite_dict",
    "memberof": "ka/components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js~to_united_satellite_dict",
    "access": "public",
    "export": false,
    "importPath": "./ka/components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js",
    "importStyle": null,
    "description": "Преобразует данные о спутниках в словарь.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} united_satellite_dataDICT - Словарь, где ключами являются имена спутников, а значениями - их данные."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "united_satellite_data",
        "description": "Объект с объединенными данными о спутниках."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "united_satellite_dataDICT - Словарь, где ключами являются имена спутников, а значениями - их данные."
    },
    "ignore": true
  },
  {
    "__docId__": 172,
    "kind": "function",
    "name": "to_callers_combined_availabilityDICT",
    "memberof": "ka/components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js~to_callers_combined_availabilityDICT",
    "access": "public",
    "export": false,
    "importPath": "./ka/components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js",
    "importStyle": null,
    "description": "Преобразует данные о доступности абонентов в словарь.",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} callers_combined_availabilityDICT - Словарь, где ключами являются имена абонентов, а значениями - их данные."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "callers_combined_availability",
        "description": "Массив объектов с данными о доступности абонентов."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "callers_combined_availabilityDICT - Словарь, где ключами являются имена абонентов, а значениями - их данные."
    },
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "class",
    "name": "CallersOverlayGantNEW",
    "memberof": "ka/components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js",
    "static": true,
    "longname": "ka/components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js~CallersOverlayGantNEW",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js",
    "importStyle": "{CallersOverlayGantNEW}",
    "description": "Класс CallersOverlayGantNEW наследуется от DiagramGantBase и отвечает за управление и отображение данных о сеансах связи абонентов в формате диаграммы Ганта.",
    "lineNumber": 50,
    "interface": false,
    "extends": [
      "ka/components/diagram-gant/DiagramGantBase.js~DiagramGantBase"
    ]
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "setData",
    "memberof": "ka/components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js~CallersOverlayGantNEW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js~CallersOverlayGantNEW#setData",
    "access": "public",
    "description": "Устанавливает данные для компонента.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Начальная дата периода."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Конечная дата периода."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Объект с данными. Содержит следующие свойства:\n  - `{Array} callers_sats_data` - Данные о спутниках абонентов.\n  - `{Object} first_acceptable_session` - Первоначальные данные о сессиях.\n  - `{Array} general_availability_of_sessions` - Общая доступность сессий.\n  - `{Array} sessions` - Данные о сессиях.\n  - `{Object} united_satellite_data` - Объединенные данные о спутниках.\n  - `{Array} callers_combined_availability` - Объединенные данные о доступности абонентов."
      }
    ],
    "return": null
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "ka/components/diagram-gant/diagramGantConcretical/RssDiagramGant.js",
    "content": "import DiagramGantBase from \"../DiagramGantBase.js\";\r\nimport { dataToDiagramBlocks, blocksToCaption, blocksToCaptionExt } from \"./metaDiagramGant.js\";\r\n\r\n\r\n/**\r\n * Класс для создания диаграммы Ганта, отображающей данные о РСС (Радиосвязи и Спутниках).\r\n * Расширяет функциональность базового класса `DiagramGantBase`.\r\n */\r\nexport class RssDiagramGantNEW extends DiagramGantBase {\r\n    /**\r\n     * Устанавливает данные для диаграммы Ганта.\r\n     *\r\n     * @param {Date} start - Начальная дата периода.\r\n     * @param {Date} end - Конечная дата периода.\r\n     * @param {Array} data - Массив объектов с данными о РСС. Каждый объект содержит следующие свойства:\r\n     *   - `{string} name` - Имя РСС.\r\n     *   - `{number} lat` - Широта РСС.\r\n     *   - `{number} lon` - Долгота РСС.\r\n     *   - `{Array} satellites_data` - Массив данных о спутниках, содержащий следующие свойства:\r\n     *     - `{string} name` - Имя спутника.\r\n     *     - `{Array} datetime_period` - Массив объектов с данными о периодах связи со спутником. Каждый объект содержит:\r\n     *       - `{string} start_datetime_iso` - Дата и время начала периода в формате ISO.\r\n     *       - `{string} end_datetime_iso` - Дата и время конца периода в формате ISO.\r\n     *       - `{number} duration_in_sec` - Длительность связи в секундах.\r\n     *   - `{Array} general_availability` - Массив объектов с данными о доступности РСС, содержащий такие же свойства, как и в `datetime_period`.\r\n     */\r\n    setData(start, end, data) {\r\n        // Вызываем метод родительского класса для установки начальных данных.\r\n        super.setData(start, end, data);\r\n        const groups = [];\r\n\r\n        // Проходим по каждому РСС в предоставленных данных.\r\n        for (const rss of data) {\r\n            const { name, lat, lon, satellites_data, general_availability } = rss;\r\n            // Создаем групповой блок диаграммы для каждого РСС с его именем и координатами.\r\n            const group = {\r\n                name: `РСС <br> ${name} <br><span style=\"font-size: 14px;\"> Широта: ${lat} <br>Долгота: ${lon}</span>`,\r\n                lines: [],\r\n            };\r\n\r\n            // Проходим по данным спутников для данного РСС и добавляем строки для каждого спутника.\r\n            for (const intervalData of satellites_data) {\r\n                const { name: satellite_name, datetime_period: communication_interval } = intervalData;\r\n\r\n                // Преобразуем данные о периодах связи в формат для диаграммы.\r\n                const blocks = dataToDiagramBlocks(communication_interval);\r\n\r\n                // Создаем и настраиваем строку для диаграммы Ганта для спутника.\r\n                const line = {\r\n                    nameElement: {\r\n                        name: satellite_name,\r\n                        styles: {\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                        }\r\n                    },\r\n                    emptySetting: {\r\n                        name: 'Вне зоны КА',\r\n                    },\r\n                    captionElement: {\r\n                        caption: blocksToCaptionExt(blocks),\r\n                    },\r\n                    blocks: blocks,\r\n                };\r\n\r\n                // Добавляем строку для спутника в групповой блок.\r\n                group.lines.push(line);\r\n            }\r\n\r\n            // Добавляем групповой блок с данными о РСС в массив групп.\r\n            groups.push(group);\r\n        }\r\n\r\n        // Устанавливаем форматированные данные для диаграммы Ганта.\r\n        this.setFormatData(start, end, groups);\r\n    }\r\n}\r\n\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/diagram-gant/diagramGantConcretical/RssDiagramGant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "class",
    "name": "RssDiagramGantNEW",
    "memberof": "ka/components/diagram-gant/diagramGantConcretical/RssDiagramGant.js",
    "static": true,
    "longname": "ka/components/diagram-gant/diagramGantConcretical/RssDiagramGant.js~RssDiagramGantNEW",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/diagram-gant/diagramGantConcretical/RssDiagramGant.js",
    "importStyle": "{RssDiagramGantNEW}",
    "description": "Класс для создания диаграммы Ганта, отображающей данные о РСС (Радиосвязи и Спутниках).\nРасширяет функциональность базового класса `DiagramGantBase`.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "ka/components/diagram-gant/DiagramGantBase.js~DiagramGantBase"
    ]
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "setData",
    "memberof": "ka/components/diagram-gant/diagramGantConcretical/RssDiagramGant.js~RssDiagramGantNEW",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/diagramGantConcretical/RssDiagramGant.js~RssDiagramGantNEW#setData",
    "access": "public",
    "description": "Устанавливает данные для диаграммы Ганта.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Начальная дата периода."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Конечная дата периода."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Массив объектов с данными о РСС. Каждый объект содержит следующие свойства:\n  - `{string} name` - Имя РСС.\n  - `{number} lat` - Широта РСС.\n  - `{number} lon` - Долгота РСС.\n  - `{Array} satellites_data` - Массив данных о спутниках, содержащий следующие свойства:\n    - `{string} name` - Имя спутника.\n    - `{Array} datetime_period` - Массив объектов с данными о периодах связи со спутником. Каждый объект содержит:\n      - `{string} start_datetime_iso` - Дата и время начала периода в формате ISO.\n      - `{string} end_datetime_iso` - Дата и время конца периода в формате ISO.\n      - `{number} duration_in_sec` - Длительность связи в секундах.\n  - `{Array} general_availability` - Массив объектов с данными о доступности РСС, содержащий такие же свойства, как и в `datetime_period`."
      }
    ],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js",
    "content": "\r\nexport default class SwitchDiagramRss {\r\n\r\n    constructor(selector) {\r\n        this.element = document.querySelector(selector);\r\n        const switcher = document.createElement('div');\r\n        switcher.classList.add('switch-diagram-gant');\r\n        switcher.innerHTML = `\r\n            <span style=\"font-weight: bold\">Группировка данных: </span>\r\n            <label style=\"margin-right: 10px\">\r\n                <input  type=\"radio\" name=\"type\" value=\"rss\" style=\"margin-right: 10px\" checked>КА по РСС\r\n            </label>\r\n            <label>\r\n                <input type=\"radio\" name=\"type\" value=\"ka\" style=\"margin-right: 10px\">РСС по КА\r\n            </label>\r\n        `;\r\n        this.element.appendChild(switcher);\r\n        this.callbacks = [];\r\n        switcher.addEventListener('change', (event) => {\r\n            const type = event.target.value;\r\n            this.onSwitchDiagramRss(type);\r\n        });\r\n        \r\n    }\r\n        \r\n    setChecked(type) {\r\n        const radios = this.element.querySelectorAll('input[type=radio]');\r\n        radios.forEach(radio => {\r\n            if (radio.value === type) {\r\n                radio.checked = true;\r\n            } else {\r\n                radio.checked = false;\r\n            }\r\n        });\r\n    }\r\n    \r\n\r\n    addCallback(callback) {\r\n        this.callbacks.push(callback);\r\n    }\r\n\r\n    onSwitchDiagramRss(type) {\r\n        this.callbacks.forEach(callback => callback(type));\r\n    }\r\n}",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "class",
    "name": "SwitchDiagramRss",
    "memberof": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js",
    "static": true,
    "longname": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js~SwitchDiagramRss",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js",
    "importStyle": "SwitchDiagramRss",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 180,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js~SwitchDiagramRss",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js~SwitchDiagramRss#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "element",
    "memberof": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js~SwitchDiagramRss",
    "static": false,
    "longname": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js~SwitchDiagramRss#element",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "callbacks",
    "memberof": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js~SwitchDiagramRss",
    "static": false,
    "longname": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js~SwitchDiagramRss#callbacks",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "setChecked",
    "memberof": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js~SwitchDiagramRss",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js~SwitchDiagramRss#setChecked",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "addCallback",
    "memberof": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js~SwitchDiagramRss",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js~SwitchDiagramRss#addCallback",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "onSwitchDiagramRss",
    "memberof": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js~SwitchDiagramRss",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js~SwitchDiagramRss#onSwitchDiagramRss",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "ka/components/diagram-gant/TimelineGant.js",
    "content": "import dateUtils from \"../../utils/dateUtils.js\";\r\n\r\n// TODO: выделить в отдельную папку этот js и timeline.css\r\n// чтобы не мусорить папку\r\n\r\nexport class TimelineGant {\r\n    /**\r\n     * Конструктор класса TimelineGant.\r\n     * Создает экземпляр класса для управления гант-диаграммой.\r\n     * \r\n     * @param {string} selector - Селектор элемента, в котором будет отображаться гант-диаграмма.\r\n     */\r\n    constructor(selector) {\r\n        this.element = document.querySelector(selector);\r\n\r\n        // Интервал времени в минутах, необходимый для некоторых расчетов.\r\n        this.interval = null;\r\n\r\n        // Начальное и конечное время диаграммы.\r\n        this.startTime = null;\r\n        this.endTime = null;\r\n\r\n        // Общее время диаграммы.\r\n        this.total_time = null;\r\n        // Ширина элемента диаграммы.\r\n        this.width = null;\r\n\r\n        // Отслеживает изменения размера элемента диаграммы и обновляет ее при необходимости.\r\n        const resizeObserver = new ResizeObserver((entries) => {\r\n            this.updateWidth();\r\n            this.update();\r\n        });\r\n        resizeObserver.observe(this.element);\r\n    }\r\n\r\n    /**\r\n     * Очищает содержимое элемента диаграммы.\r\n     */\r\n    clear() {\r\n        this.element.innerHTML = '';\r\n    }\r\n\r\n    /**\r\n     * Добавляет заголовок к диаграмме.\r\n     * Создает и добавляет дочерний элемент с информацией о временном периоде диаграммы.\r\n     */\r\n    addCaption() {\r\n        const additionInfo = document.createElement('div');\r\n        additionInfo.className = 'additionInfo';\r\n        additionInfo.textContent = `c ${dateUtils.formatDisplayDateTime(this.startTime)} по ${dateUtils.formatDisplayDateTime(this.endTime)}, прогноз: ${dateUtils.secondsToHMS((this.interval * 60).toFixed(0))}`;\r\n        this.element.appendChild(additionInfo);\r\n    }\r\n\r\n    /**\r\n     * Обновляет содержимое элемента диаграммы.\r\n     * Очищает содержимое, создает разделители и добавляет заголовок.\r\n     */\r\n    update() {\r\n        this.clear();\r\n        this.createDividers();\r\n    }\r\n\r\n    /**\r\n     * Устанавливает период времени для диаграммы.\r\n     * Обновляет начальное и конечное время, интервал времени и обновляет диаграмму.\r\n     * @param {Date} start - Начальное время.\r\n     * @param {Date} end - Конечное время.\r\n     * @param {number} interval - Интервал времени.\r\n     */\r\n    setPeriod(start, end, interval) {\r\n        this.startTime = start;\r\n        this.endTime = end;\r\n        this.interval = interval;\r\n        this.totalTime = this.endTime - this.startTime;\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Создает разделители для диаграммы.\r\n     * Создает разделители времени и добавляет их в элемент диаграммы.\r\n     */\r\n    createDividers() {\r\n        // Проверка на наличие необходимых данных\r\n        if (!this.startTime || !this.endTime || !this.totalTime || !this.interval) return;\r\n\r\n        // Вычисление количества разделителей\r\n        const timeDivisions = this.calculateTimeDivisions(60);\r\n\r\n        // Создание и добавление разделителей\r\n        for (let i = 0; i <= timeDivisions; i++) {\r\n            const currentTime = new Date(this.startTime.getTime() + (this.totalTime * (i / timeDivisions)));\r\n            const divider = this.createDivider(timeDivisions, currentTime, i);\r\n            this.element.appendChild(divider);\r\n        }\r\n\r\n        // Добавление заголовка\r\n        this.addCaption();\r\n    }\r\n\r\n    /**\r\n     * Создает разделитель времени.\r\n     * @param {number} timeDivisions - Количество разделителей.\r\n     * @param {Date} currentTime - Текущее время.\r\n     * @param {number} i - Индекс текущего разделителя.\r\n     * @returns {HTMLDivElement} - Разделитель времени.\r\n     */\r\n    createDivider(timeDivisions, currentTime, i) {\r\n        const divider = document.createElement('div');\r\n        divider.className = 'divider';\r\n\r\n        // Добавление класса для последнего разделителя\r\n        if (i == timeDivisions) {\r\n            divider.classList.add('lastDivider');\r\n        }\r\n\r\n        const time = document.createElement('div');\r\n        time.className = 'time';\r\n        time.textContent = dateUtils.formatDisplayTime(currentTime);\r\n        divider.appendChild(time);\r\n        return divider;\r\n    }\r\n\r\n    /**\r\n     * Обновляет ширину элемента диаграммы.\r\n     */\r\n    updateWidth() {\r\n        this.width = this.element.clientWidth;\r\n    }\r\n\r\n    /**\r\n     * Вычисляет количество разделителей времени в зависимости от ширины элемента диаграммы.\r\n     * @param {number} pixelsPerDivision - Количество пикселей на один разделитель.\r\n     * @returns {number} - Количество разделителей.\r\n     */\r\n    calculateTimeDivisions(pixelsPerDivision) {\r\n        return Math.floor(this.width / pixelsPerDivision);\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/diagram-gant/TimelineGant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "class",
    "name": "TimelineGant",
    "memberof": "ka/components/diagram-gant/TimelineGant.js",
    "static": true,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/diagram-gant/TimelineGant.js",
    "importStyle": "{TimelineGant}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 188,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#constructor",
    "access": "public",
    "description": "Конструктор класса TimelineGant.\nСоздает экземпляр класса для управления гант-диаграммой.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "Селектор элемента, в котором будет отображаться гант-диаграмма."
      }
    ]
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "element",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#element",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "interval",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#interval",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "startTime",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#startTime",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "endTime",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#endTime",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "total_time",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#total_time",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "width",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#width",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "clear",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#clear",
    "access": "public",
    "description": "Очищает содержимое элемента диаграммы.",
    "lineNumber": 39,
    "params": [],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "addCaption",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#addCaption",
    "access": "public",
    "description": "Добавляет заголовок к диаграмме.\nСоздает и добавляет дочерний элемент с информацией о временном периоде диаграммы.",
    "lineNumber": 47,
    "params": [],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "update",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#update",
    "access": "public",
    "description": "Обновляет содержимое элемента диаграммы.\nОчищает содержимое, создает разделители и добавляет заголовок.",
    "lineNumber": 58,
    "params": [],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "setPeriod",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#setPeriod",
    "access": "public",
    "description": "Устанавливает период времени для диаграммы.\nОбновляет начальное и конечное время, интервал времени и обновляет диаграмму.",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Начальное время."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Конечное время."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "Интервал времени."
      }
    ],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "totalTime",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#totalTime",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "createDividers",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#createDividers",
    "access": "public",
    "description": "Создает разделители для диаграммы.\nСоздает разделители времени и добавляет их в элемент диаграммы.",
    "lineNumber": 82,
    "params": [],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "createDivider",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#createDivider",
    "access": "public",
    "description": "Создает разделитель времени.",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLDivElement} - Разделитель времени."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "timeDivisions",
        "description": "Количество разделителей."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "currentTime",
        "description": "Текущее время."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": "Индекс текущего разделителя."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLDivElement"
      ],
      "spread": false,
      "description": "Разделитель времени."
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "updateWidth",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#updateWidth",
    "access": "public",
    "description": "Обновляет ширину элемента диаграммы.",
    "lineNumber": 126,
    "params": [],
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "calculateTimeDivisions",
    "memberof": "ka/components/diagram-gant/TimelineGant.js~TimelineGant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/diagram-gant/TimelineGant.js~TimelineGant#calculateTimeDivisions",
    "access": "public",
    "description": "Вычисляет количество разделителей времени в зависимости от ширины элемента диаграммы.",
    "lineNumber": 135,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} - Количество разделителей."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pixelsPerDivision",
        "description": "Количество пикселей на один разделитель."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Количество разделителей."
    }
  },
  {
    "__docId__": 208,
    "kind": "file",
    "name": "ka/components/interval/Interval.js",
    "content": "export class Interval {\r\n\r\n    /**\r\n     * Класс, представляющий интервал времени для выполнения задачи.\r\n     * @constructor\r\n     * @param {number} delay - Интервал выполнения в секундах.\r\n     */\r\n    constructor(delay) {\r\n        this.delay = delay;\r\n        /**\r\n         * Метод, выполняемый в интервале.\r\n         * @type {Function}\r\n         */\r\n        this.callback = () => { };\r\n        /**\r\n         * ID интервала, который выполняет задачу.\r\n         * @type {null|number}\r\n         */\r\n        this.intervalID = null;\r\n        /**\r\n         * Флаг, указывающий, выполняется ли задача в данный момент.\r\n         * @type {boolean}\r\n         */\r\n        this.isStarted = false;\r\n        /**\r\n         * Метод, вызываемый при запуске задачи.\r\n         * @type {Function}\r\n         */\r\n        this.startCallback = () => { };\r\n        /**\r\n         * Метод, вызываемый при остановке задачи.\r\n         * @type {Function}\r\n         */\r\n        this.stopCallback = () => { };\r\n    }\r\n\r\n    /**\r\n     * Метод запускает выполнение задачи по заданному интервалу.\r\n     * Если задача уже запущена, то она сначала останавливается.\r\n     * Затем задача запускается снова с помощью setInterval и ID сохраняется в поле intervalID.\r\n     * Поле isStarted устанавливается в true.\r\n     * Вызывается метод startCallback, если он был передан.\r\n     */\r\n    start() {\r\n        this.stop(); // Останавливаем выполнение задачи, если она уже запущена\r\n        this.intervalID = setInterval(() => this.callback(), this.delay * 1000);\r\n        this.isStarted = true;\r\n        this.startCallback(); // Вызываем метод startCallback, если он был передан\r\n    }\r\n\r\n    /**\r\n     * Метод устанавливает функцию, выполняемую в интервале.\r\n     * @param {Function} callback - Функция, выполняемая в интервале.\r\n     */\r\n    setCallback(callback) {\r\n        /**\r\n         * Метод, выполняемый в интервале.\r\n         * @type {Function}\r\n         */\r\n        this.callback = callback;\r\n    }\r\n\r\n    /**\r\n     * Устанавливает метод, вызываемый при запуске задачи.\r\n     * @param {Function} callback - Метод, вызываемый при запуске задачи.\r\n     */\r\n    onStartCallback(callback) {\r\n        /**\r\n         * Метод, вызываемый при запуске задачи.\r\n         * @type {Function}\r\n         */\r\n        this.startCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * Устанавливает метод, вызываемый при остановке задачи.\r\n     * @param {Function} callback - Метод, вызываемый при остановке задачи.\r\n     */\r\n    onStopCallback(callback) {\r\n        /**\r\n         * Метод, вызываемый при остановке задачи.\r\n         * @type {Function}\r\n         */\r\n        this.stopCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * Останавливает выполнение задачи по заданному интервалу.\r\n     * Если задача не запущена, то метод ничего не делает.\r\n     * Затем выполнение задачи прекращается, ID интервала сбрасывается в null,\r\n     * поле isStarted устанавливается в false.\r\n     * Вызывается метод stopCallback, если он был передан.\r\n     */\r\n    stop() {\r\n        // Если интервал не запущен, то ничего не делаем\r\n        if (!this.intervalID) return\r\n\r\n        // Останавливаем выполнение задачи\r\n        clearInterval(this.intervalID);\r\n\r\n        // Сбрасываем ID интервала\r\n        this.intervalID = null;\r\n\r\n        // Устанавливаем флаг, что задача не запущена\r\n        this.isStarted = false;\r\n\r\n        // Вызываем метод stopCallback, если он был передан\r\n        this.stopCallback();\r\n    }\r\n\r\n    /**\r\n     * Метод переключает выполнение задачи в противоположное состояние.\r\n     * Если задача не запущена, то она запускается с помощью метода start().\r\n     * Если задача уже запущена, то она останавливается с помощью метода stop().\r\n     */\r\n    toggle() {\r\n        if (!this.isStarted) {\r\n            this.start();\r\n        } else {\r\n            this.stop();\r\n        }\r\n    }\r\n\r\n}",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/interval/Interval.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 209,
    "kind": "class",
    "name": "Interval",
    "memberof": "ka/components/interval/Interval.js",
    "static": true,
    "longname": "ka/components/interval/Interval.js~Interval",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/interval/Interval.js",
    "importStyle": "{Interval}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 210,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/interval/Interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/interval/Interval.js~Interval#constructor",
    "access": "public",
    "description": "Класс, представляющий интервал времени для выполнения задачи.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "delay",
        "description": "Интервал выполнения в секундах."
      }
    ]
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "delay",
    "memberof": "ka/components/interval/Interval.js~Interval",
    "static": false,
    "longname": "ka/components/interval/Interval.js~Interval#delay",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "callback",
    "memberof": "ka/components/interval/Interval.js~Interval",
    "static": false,
    "longname": "ka/components/interval/Interval.js~Interval#callback",
    "access": "public",
    "description": "Метод, выполняемый в интервале.",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "intervalID",
    "memberof": "ka/components/interval/Interval.js~Interval",
    "static": false,
    "longname": "ka/components/interval/Interval.js~Interval#intervalID",
    "access": "public",
    "description": "ID интервала, который выполняет задачу.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "null",
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "isStarted",
    "memberof": "ka/components/interval/Interval.js~Interval",
    "static": false,
    "longname": "ka/components/interval/Interval.js~Interval#isStarted",
    "access": "public",
    "description": "Флаг, указывающий, выполняется ли задача в данный момент.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "startCallback",
    "memberof": "ka/components/interval/Interval.js~Interval",
    "static": false,
    "longname": "ka/components/interval/Interval.js~Interval#startCallback",
    "access": "public",
    "description": "Метод, вызываемый при запуске задачи.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "stopCallback",
    "memberof": "ka/components/interval/Interval.js~Interval",
    "static": false,
    "longname": "ka/components/interval/Interval.js~Interval#stopCallback",
    "access": "public",
    "description": "Метод, вызываемый при остановке задачи.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "start",
    "memberof": "ka/components/interval/Interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/interval/Interval.js~Interval#start",
    "access": "public",
    "description": "Метод запускает выполнение задачи по заданному интервалу.\nЕсли задача уже запущена, то она сначала останавливается.\nЗатем задача запускается снова с помощью setInterval и ID сохраняется в поле intervalID.\nПоле isStarted устанавливается в true.\nВызывается метод startCallback, если он был передан.",
    "lineNumber": 44,
    "params": [],
    "return": null
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "setCallback",
    "memberof": "ka/components/interval/Interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/interval/Interval.js~Interval#setCallback",
    "access": "public",
    "description": "Метод устанавливает функцию, выполняемую в интервале.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, выполняемая в интервале."
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "onStartCallback",
    "memberof": "ka/components/interval/Interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/interval/Interval.js~Interval#onStartCallback",
    "access": "public",
    "description": "Устанавливает метод, вызываемый при запуске задачи.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Метод, вызываемый при запуске задачи."
      }
    ],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "onStopCallback",
    "memberof": "ka/components/interval/Interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/interval/Interval.js~Interval#onStopCallback",
    "access": "public",
    "description": "Устанавливает метод, вызываемый при остановке задачи.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Метод, вызываемый при остановке задачи."
      }
    ],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "stop",
    "memberof": "ka/components/interval/Interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/interval/Interval.js~Interval#stop",
    "access": "public",
    "description": "Останавливает выполнение задачи по заданному интервалу.\nЕсли задача не запущена, то метод ничего не делает.\nЗатем выполнение задачи прекращается, ID интервала сбрасывается в null,\nполе isStarted устанавливается в false.\nВызывается метод stopCallback, если он был передан.",
    "lineNumber": 94,
    "params": [],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "toggle",
    "memberof": "ka/components/interval/Interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/interval/Interval.js~Interval#toggle",
    "access": "public",
    "description": "Метод переключает выполнение задачи в противоположное состояние.\nЕсли задача не запущена, то она запускается с помощью метода start().\nЕсли задача уже запущена, то она останавливается с помощью метода stop().",
    "lineNumber": 116,
    "params": [],
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "ka/components/loader/Loader.js",
    "content": "// TODO: Если например он запустился изза загрузки данных, а затем идет расчет, то\r\n//      1. Запуск загрузки данных   - показывается значок загрузки\r\n//      2. Запуск расчета           - делаем видимым значок загрузки\r\n//      3. Закрытие расчета         - закрываем значок загрузки\r\n//      4. Закрытие загрузки данных - закрываем значок загрузки (уже закрыт)\r\n// Надо сделать менеджер, или изменить код, чтобы он закрывал тогда\r\n// Когда все загрузки закончены\r\n\r\nexport default class Loader {\r\n    /**\r\n     * Конструктор класса загрузчика.\r\n     * \r\n     * @param {string} selector - селектор элемента загрузчика.\r\n     */\r\n    constructor(selector, delay = 300) {\r\n        this.delay = delay;\r\n        /**\r\n         * DOM-элемент, представляющий загрузчик.\r\n         * @type {HTMLElement}\r\n         */\r\n        this.element = document.querySelector(selector);\r\n        /**\r\n         * DOM-элемент, представляющий заголовок загрузчика.\r\n         * @type {HTMLElement}\r\n         */\r\n        this.titleElement = this.element.querySelector('.loader-container__title');\r\n\r\n        this.isLoading = false;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Открывает загрузчик.\r\n     * \r\n     * Этот метод удаляет класс 'loder-container--hidden' у элемента загрузчика,\r\n     * что приведет к его отображению.\r\n     */\r\n    open() {\r\n        this.isLoading = true;\r\n        setTimeout(() => {\r\n            if (!this.isLoading) return;\r\n            this.element.classList.remove('loader-container--hidden');\r\n        }, this.delay);\r\n    }\r\n\r\n    /**\r\n     * Скрывает загрузчик.\r\n     * \r\n     * Этот метод добавляет класс 'loder-container--hidden' к элементу загрузчика,\r\n     * что приведет к его скрытию.\r\n     */\r\n    close() {\r\n        this.isLoading = false;\r\n        this.element.classList.add('loader-container--hidden');\r\n    }\r\n\r\n    /**\r\n     * Устанавливает заголовок загрузчика и открывает его.\r\n     *\r\n     * @param {string} title - Заголовок загрузчика.\r\n     */\r\n    show(title) {\r\n        // Устанавливаем заголовок загрузчика\r\n        this.titleElement.innerText = title;\r\n        this.open()\r\n    }\r\n\r\n    hasLoading() {\r\n        return this.element.classList.contains('loader-container--hidden');\r\n    }\r\n}",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/loader/Loader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "class",
    "name": "Loader",
    "memberof": "ka/components/loader/Loader.js",
    "static": true,
    "longname": "ka/components/loader/Loader.js~Loader",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/loader/Loader.js",
    "importStyle": "Loader",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 232,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/loader/Loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/loader/Loader.js~Loader#constructor",
    "access": "public",
    "description": "Конструктор класса загрузчика.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "селектор элемента загрузчика."
      }
    ]
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "delay",
    "memberof": "ka/components/loader/Loader.js~Loader",
    "static": false,
    "longname": "ka/components/loader/Loader.js~Loader#delay",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "element",
    "memberof": "ka/components/loader/Loader.js~Loader",
    "static": false,
    "longname": "ka/components/loader/Loader.js~Loader#element",
    "access": "public",
    "description": "DOM-элемент, представляющий загрузчик.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "titleElement",
    "memberof": "ka/components/loader/Loader.js~Loader",
    "static": false,
    "longname": "ka/components/loader/Loader.js~Loader#titleElement",
    "access": "public",
    "description": "DOM-элемент, представляющий заголовок загрузчика.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "isLoading",
    "memberof": "ka/components/loader/Loader.js~Loader",
    "static": false,
    "longname": "ka/components/loader/Loader.js~Loader#isLoading",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "open",
    "memberof": "ka/components/loader/Loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/loader/Loader.js~Loader#open",
    "access": "public",
    "description": "Открывает загрузчик.\n\nЭтот метод удаляет класс 'loder-container--hidden' у элемента загрузчика,\nчто приведет к его отображению.",
    "lineNumber": 38,
    "params": [],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "close",
    "memberof": "ka/components/loader/Loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/loader/Loader.js~Loader#close",
    "access": "public",
    "description": "Скрывает загрузчик.\n\nЭтот метод добавляет класс 'loder-container--hidden' к элементу загрузчика,\nчто приведет к его скрытию.",
    "lineNumber": 52,
    "params": [],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "show",
    "memberof": "ka/components/loader/Loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/loader/Loader.js~Loader#show",
    "access": "public",
    "description": "Устанавливает заголовок загрузчика и открывает его.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "Заголовок загрузчика."
      }
    ],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "hasLoading",
    "memberof": "ka/components/loader/Loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/loader/Loader.js~Loader#hasLoading",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "file",
    "name": "ka/components/loader/LoadingManager.js",
    "content": "export default class LoadingManager {\r\n    /**\r\n     * Конструктор класса LoadingManager.\r\n     * \r\n     * @param {string} selector - Селектор элемента загрузчика.\r\n     * @param {string} title - Заголовок загрузчика.\r\n     * @param {number} [delay=300] - Задержка перед отображением загрузчика в миллисекундах.\r\n     */\r\n    constructor(selector, title, delay = 500) {\r\n        /**\r\n         * Количество активных загрузок.\r\n         * @type {number}\r\n         */\r\n        this.refCount = 0;\r\n\r\n        /**\r\n         * Задержка перед отображением загрузчика в миллисекундах.\r\n         * @type {number}\r\n         */\r\n        this.delay = delay;\r\n\r\n        /**\r\n         * Идентификатор таймера для задержки отображения загрузчика.\r\n         * @type {number|null}\r\n         */\r\n        this.timeoutId = null;\r\n\r\n        /**\r\n         * DOM-элемент, представляющий загрузчик.\r\n         * @type {HTMLElement}\r\n         */\r\n        this.element = document.querySelector(selector);\r\n\r\n        /**\r\n         * DOM-элемент, представляющий заголовок загрузчика.\r\n         * @type {HTMLElement}\r\n         */\r\n        this.titleElement = this.element.querySelector('.loader-container__title');\r\n\r\n        // Устанавливаем начальное значение заголовка и скрываем загрузчик\r\n        this.setTitle(title);\r\n        this.setLoading(false);\r\n    }\r\n\r\n    /**\r\n     * Устанавливает состояние загрузки.\r\n     * \r\n     * @param {boolean} isLoading - Флаг, указывающий, начинается ли (true) или заканчивается (false) загрузка.\r\n     */\r\n    setLoading(isLoading) {\r\n\r\n        if (isLoading) {\r\n            this.refCount++;\r\n        } else if (this.refCount > 0) {\r\n            this.refCount--;\r\n        }\r\n\r\n        // Всегда очищаем существующий таймер, если он есть\r\n        if (this.timeoutId) {\r\n            clearTimeout(this.timeoutId);\r\n            this.timeoutId = null;\r\n        }\r\n        // Если загрузок нет, скрываем загрузчик и завершаем выполнение функции\r\n        if (this.refCount <= 0) {\r\n            return this.hide();\r\n        }\r\n        // Если загрузок больше одной, показываем загрузчик немедленно\r\n        if (this.refCount > 1) {\r\n            return this.open();\r\n        }\r\n        // Если загрузка только началась, создаем таймер для отображения\r\n        if (this.refCount === 1) {\r\n            this.timeoutId = setTimeout(() => {\r\n                this.open();\r\n            }, this.delay);\r\n        }\r\n    }\r\n\r\n    getIsLoading() {\r\n        return this.refCount > 0;\r\n    }\r\n\r\n    /**\r\n     * Устанавливает заголовок загрузчика.\r\n     * \r\n     * @param {string} title - Заголовок загрузчика.\r\n     */\r\n    setTitle(title) {\r\n        this.titleElement.innerHTML = title;\r\n    }\r\n\r\n    /**\r\n     * Открывает (отображает) загрузчик.\r\n     */\r\n    open() {\r\n        this.element.classList.remove('loader-container--hidden');\r\n    }\r\n\r\n    /**\r\n     * Скрывает загрузчик.\r\n     */\r\n    hide() {\r\n        this.element.classList.add('loader-container--hidden');\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/loader/LoadingManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 244,
    "kind": "class",
    "name": "LoadingManager",
    "memberof": "ka/components/loader/LoadingManager.js",
    "static": true,
    "longname": "ka/components/loader/LoadingManager.js~LoadingManager",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/loader/LoadingManager.js",
    "importStyle": "LoadingManager",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 245,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/loader/LoadingManager.js~LoadingManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/loader/LoadingManager.js~LoadingManager#constructor",
    "access": "public",
    "description": "Конструктор класса LoadingManager.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "Селектор элемента загрузчика."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "Заголовок загрузчика."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "300",
        "defaultRaw": 300,
        "name": "delay",
        "description": "Задержка перед отображением загрузчика в миллисекундах."
      }
    ]
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "refCount",
    "memberof": "ka/components/loader/LoadingManager.js~LoadingManager",
    "static": false,
    "longname": "ka/components/loader/LoadingManager.js~LoadingManager#refCount",
    "access": "public",
    "description": "Количество активных загрузок.",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 247,
    "kind": "member",
    "name": "delay",
    "memberof": "ka/components/loader/LoadingManager.js~LoadingManager",
    "static": false,
    "longname": "ka/components/loader/LoadingManager.js~LoadingManager#delay",
    "access": "public",
    "description": "Задержка перед отображением загрузчика в миллисекундах.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "timeoutId",
    "memberof": "ka/components/loader/LoadingManager.js~LoadingManager",
    "static": false,
    "longname": "ka/components/loader/LoadingManager.js~LoadingManager#timeoutId",
    "access": "public",
    "description": "Идентификатор таймера для задержки отображения загрузчика.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "number",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "element",
    "memberof": "ka/components/loader/LoadingManager.js~LoadingManager",
    "static": false,
    "longname": "ka/components/loader/LoadingManager.js~LoadingManager#element",
    "access": "public",
    "description": "DOM-элемент, представляющий загрузчик.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "titleElement",
    "memberof": "ka/components/loader/LoadingManager.js~LoadingManager",
    "static": false,
    "longname": "ka/components/loader/LoadingManager.js~LoadingManager#titleElement",
    "access": "public",
    "description": "DOM-элемент, представляющий заголовок загрузчика.",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "setLoading",
    "memberof": "ka/components/loader/LoadingManager.js~LoadingManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/loader/LoadingManager.js~LoadingManager#setLoading",
    "access": "public",
    "description": "Устанавливает состояние загрузки.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isLoading",
        "description": "Флаг, указывающий, начинается ли (true) или заканчивается (false) загрузка."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "getIsLoading",
    "memberof": "ka/components/loader/LoadingManager.js~LoadingManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/loader/LoadingManager.js~LoadingManager#getIsLoading",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "setTitle",
    "memberof": "ka/components/loader/LoadingManager.js~LoadingManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/loader/LoadingManager.js~LoadingManager#setTitle",
    "access": "public",
    "description": "Устанавливает заголовок загрузчика.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "Заголовок загрузчика."
      }
    ],
    "return": null
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "open",
    "memberof": "ka/components/loader/LoadingManager.js~LoadingManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/loader/LoadingManager.js~LoadingManager#open",
    "access": "public",
    "description": "Открывает (отображает) загрузчик.",
    "lineNumber": 95,
    "params": [],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "hide",
    "memberof": "ka/components/loader/LoadingManager.js~LoadingManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/loader/LoadingManager.js~LoadingManager#hide",
    "access": "public",
    "description": "Скрывает загрузчик.",
    "lineNumber": 102,
    "params": [],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "file",
    "name": "ka/components/modal/ModalNotification.js",
    "content": "export default class ModalNotification {\r\n    /**\r\n     * Создает новый экземпляр ModalNotification.\r\n     *\r\n     * @param {string} selector - CSS-селектор для элемента модальной уведомления.\r\n     * \r\n     */\r\n    constructor(selector) {\r\n        /**\r\n         * Элемент модальной уведомления. \r\n         * @type {HTMLElement}\r\n         */\r\n        this.notification = document.querySelector(selector);\r\n        /**\r\n         * Контейнер модальной уведомления.\r\n         * @type {HTMLElement}\r\n         */\r\n        this.content = this.notification.querySelector('.modal-notification__container');\r\n        /**\r\n         * Заголовок модальной уведомления.\r\n         * @type {HTMLElement}\r\n         */\r\n        this.titleElement = this.notification.querySelector('.modal-notification__title');\r\n        /**\r\n         * Описание модальной уведомления.\r\n         * @type {HTMLElement}\r\n         */\r\n        this.descriptionElement = this.notification.querySelector('.modal-notification__description');\r\n        /**\r\n         * Кнопка \"ОК\" модальной уведомления.\r\n         * @type {HTMLElement}\r\n         */\r\n        this.btnOk = this.notification.querySelector('.modal-notification__button-ok');\r\n        /**\r\n         * Кнопка закрытия модальной уведомления.\r\n         * @type {HTMLElement}\r\n         */\r\n        this.btnClose = this.notification.querySelector('.modal-notification__button-close');\r\n\r\n        /**\r\n         * Функция, которая вызывается при открытии модальной уведомления.\r\n         * @type {Function}\r\n         */\r\n        this.onOpenCallback = () => { };\r\n        /**\r\n         * Функция, которая будет вызываться при закрытии модального уведомления.\r\n         * \r\n         * @type {function}\r\n         */\r\n        this.onCloseCallback = () => { };\r\n\r\n        /**\r\n         * Функция, которая будет вызываться при нажатии на кнопку \"ОК\" модального уведомления.\r\n         *\r\n         * @type {function}\r\n         */\r\n        this.onOkCallback = () => { };\r\n\r\n        // Добавляем обработчики для закрытия модальной уведомления\r\n        this.notification.onclick = (event) => {\r\n            this.close();\r\n        };\r\n\r\n        this.content.onclick = (event) => {\r\n            event.stopPropagation();\r\n        };\r\n\r\n        this.btnClose.onclick = () => {\r\n            this.close();\r\n        };\r\n\r\n        // Добавляем обработчик для кнопки \"ОК\"\r\n        this.btnOk.onclick = () => {\r\n            this.onOkCallback()\r\n            this.close();\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Открывает модальное уведомление с заданным заголовком, описанием и обратным вызовом onOpen.\r\n     *\r\n     * @param {string} title - Заголовок модального уведомления.\r\n     * @param {string} description - Описание модального уведомления.\r\n     * @param {function} onOkCallback - Функция, которая будет вызываться при подтверждении действия в модальном уведомлении.\r\n     */\r\n    openNotification(title, description, onOkCallback) {\r\n        // Устанавливаем заголовок модального уведомления.\r\n        this.setTitle(title);\r\n\r\n        // Устанавливаем описание модального уведомления.\r\n        this.setDescription(description);\r\n\r\n        // Устанавливаем обратный вызов при клике на кнопку \"ОК\".\r\n        this.onOkCallback = onOkCallback;\r\n\r\n        // Открываем модальное уведомление.\r\n        this.open();\r\n    }\r\n\r\n\r\n    /**\r\n     * Устанавливает функцию обратного вызова при закрытии модального уведомления.\r\n     *\r\n     * @param {function} callback - Функция, которая будет вызываться при закрытии модального уведомления.\r\n     */\r\n    onClose(callback) {\r\n        this.onCloseCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * Открывает модальное уведомление.\r\n     *\r\n     * Добавляет класс 'modal-notification--open' к элементу уведомления,\r\n     * что приводит к отображению модального окна.\r\n     */\r\n    open() {\r\n        // Добавляем класс 'modal-notification--open', что приводит к отображению модального окна.\r\n        this.notification.classList.add('modal-notification--open');\r\n        this.onOpenCallback();\r\n    }\r\n\r\n    /**\r\n     * Закрывает модальное уведомление, удаляя класс 'modal-notification--open'\r\n     * из элемента уведомления.\r\n     */\r\n    close() {\r\n        // Удаляем класс 'modal-notification--open', что приводит к скрытию модального окна.\r\n        this.notification.classList.remove('modal-notification--open');\r\n        this.onCloseCallback();\r\n    }\r\n\r\n\r\n    /**\r\n     * Устанавливает заголовок модального уведомления.\r\n     *\r\n     * @param {string} title - Заголовок модального уведомления.\r\n     */\r\n    setTitle(title) {\r\n        this.titleElement.innerHTML = title;\r\n    }\r\n\r\n\r\n    /**\r\n     * Устанавливает описание модального уведомления.\r\n     *\r\n     * @param {string} description - Описание модального уведомления.\r\n     */\r\n    setDescription(description) {\r\n        this.descriptionElement.innerHTML = description;\r\n    }\r\n\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/modal/ModalNotification.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 259,
    "kind": "class",
    "name": "ModalNotification",
    "memberof": "ka/components/modal/ModalNotification.js",
    "static": true,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/modal/ModalNotification.js",
    "importStyle": "ModalNotification",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 260,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#constructor",
    "access": "public",
    "description": "Создает новый экземпляр ModalNotification.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "CSS-селектор для элемента модальной уведомления."
      }
    ]
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "notification",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#notification",
    "access": "public",
    "description": "Элемент модальной уведомления. ",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "content",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#content",
    "access": "public",
    "description": "Контейнер модальной уведомления.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "titleElement",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#titleElement",
    "access": "public",
    "description": "Заголовок модальной уведомления.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "descriptionElement",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#descriptionElement",
    "access": "public",
    "description": "Описание модальной уведомления.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "btnOk",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#btnOk",
    "access": "public",
    "description": "Кнопка \"ОК\" модальной уведомления.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 266,
    "kind": "member",
    "name": "btnClose",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#btnClose",
    "access": "public",
    "description": "Кнопка закрытия модальной уведомления.",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "onOpenCallback",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#onOpenCallback",
    "access": "public",
    "description": "Функция, которая вызывается при открытии модальной уведомления.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 268,
    "kind": "member",
    "name": "onCloseCallback",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#onCloseCallback",
    "access": "public",
    "description": "Функция, которая будет вызываться при закрытии модального уведомления.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "onOkCallback",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#onOkCallback",
    "access": "public",
    "description": "Функция, которая будет вызываться при нажатии на кнопку \"ОК\" модального уведомления.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "openNotification",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#openNotification",
    "access": "public",
    "description": "Открывает модальное уведомление с заданным заголовком, описанием и обратным вызовом onOpen.",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "Заголовок модального уведомления."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "Описание модального уведомления."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onOkCallback",
        "description": "Функция, которая будет вызываться при подтверждении действия в модальном уведомлении."
      }
    ],
    "return": null
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "onClose",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#onClose",
    "access": "public",
    "description": "Устанавливает функцию обратного вызова при закрытии модального уведомления.",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, которая будет вызываться при закрытии модального уведомления."
      }
    ],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "open",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#open",
    "access": "public",
    "description": "Открывает модальное уведомление.\n\nДобавляет класс 'modal-notification--open' к элементу уведомления,\nчто приводит к отображению модального окна.",
    "lineNumber": 116,
    "params": [],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "close",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#close",
    "access": "public",
    "description": "Закрывает модальное уведомление, удаляя класс 'modal-notification--open'\nиз элемента уведомления.",
    "lineNumber": 126,
    "params": [],
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "setTitle",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#setTitle",
    "access": "public",
    "description": "Устанавливает заголовок модального уведомления.",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "Заголовок модального уведомления."
      }
    ],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "setDescription",
    "memberof": "ka/components/modal/ModalNotification.js~ModalNotification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/modal/ModalNotification.js~ModalNotification#setDescription",
    "access": "public",
    "description": "Устанавливает описание модального уведомления.",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "Описание модального уведомления."
      }
    ],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "file",
    "name": "ka/components/panel/standart/control.js",
    "content": "import Toggle from \"../../../ui/toggle/toggle.js\";\r\n\r\nexport default class Control {\r\n    /**\r\n     * Конструктор класса.\r\n     */\r\n    constructor() {\r\n        this.onRefreshCallback = () => { };\r\n        this.elements = []\r\n        this.toggles = []\r\n        // Сохраняем интервал, для того чтобы затем его удалить.\r\n        this.refreshInterval = null;\r\n        this.refreshDelay = 1000;\r\n    }\r\n\r\n    createElement() {\r\n        const element = document.createElement('div');\r\n        // Создаем элемент, который будет являться элементом управления.\r\n        const panelElement = element.appendChild(document.createElement('div'));\r\n        // Добавляем класс, определяющий стиль элемента управления.\r\n        panelElement.classList.add('channel-plan-control-panel');\r\n\r\n        // Кнопка обновления\r\n        const refreshButton = panelElement.appendChild(document.createElement('button'));\r\n        // Устанавливаем текст и заголовок кнопки.\r\n        refreshButton.textContent = '↻ Обновить';\r\n        refreshButton.title = \"Обновить данные\";\r\n        // Добавляем класс, определяющий стиль кнопки.\r\n        refreshButton.classList.add('channel-plan-control-panel__button');\r\n        // Обработчик события нажатия кнопки обновления\r\n        refreshButton.onclick = () => {\r\n           this.refresh()\r\n        };\r\n\r\n        // Создаем toggle переключатель режима\r\n        const toggle = new Toggle('Автообновление');\r\n        // Добавляем что мы \r\n        panelElement.appendChild(toggle.element);\r\n        // Обработчик события нажатия toggle переключателя\r\n        toggle.onChange((event) => {\r\n            this.setAutorefresh(event.target.checked);\r\n        })\r\n        this.elements.push(element);\r\n        this.toggles.push(toggle);\r\n\r\n        return element;\r\n    }\r\n\r\n    // Обновляем все Toggle переключатели\r\n    setToggles(checked) {\r\n        this.toggles.forEach((toggle) => {\r\n            toggle.getInput().checked = checked;\r\n        })\r\n    }\r\n\r\n    setAutorefresh(isAutorefresh) {\r\n        if (isAutorefresh) {\r\n            this.setToggles(true);\r\n            if (this.refreshInterval !== null) return;\r\n            this.refreshInterval = setInterval(() => {\r\n                this.refresh();\r\n            }, this.refreshDelay);\r\n        } else {\r\n            this.setToggles(false);\r\n            if (this.refreshInterval === null) return\r\n            clearInterval(this.refreshInterval);\r\n            this.refreshInterval = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Устанавливаем обработчик события нажатия кнопки обновления.\r\n     * @param {Function} callback - Функция, вызываемая при нажатии кнопки обновления.\r\n     */\r\n    onRefresh(callback) {\r\n        this.onRefreshCallback = callback;\r\n    }\r\n\r\n    refresh() {\r\n        this.onRefreshCallback();\r\n    }\r\n}",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/panel/standart/control.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 279,
    "kind": "class",
    "name": "Control",
    "memberof": "ka/components/panel/standart/control.js",
    "static": true,
    "longname": "ka/components/panel/standart/control.js~Control",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/panel/standart/control.js",
    "importStyle": "Control",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 280,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/panel/standart/control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/panel/standart/control.js~Control#constructor",
    "access": "public",
    "description": "Конструктор класса.",
    "lineNumber": 7
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "onRefreshCallback",
    "memberof": "ka/components/panel/standart/control.js~Control",
    "static": false,
    "longname": "ka/components/panel/standart/control.js~Control#onRefreshCallback",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "elements",
    "memberof": "ka/components/panel/standart/control.js~Control",
    "static": false,
    "longname": "ka/components/panel/standart/control.js~Control#elements",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "toggles",
    "memberof": "ka/components/panel/standart/control.js~Control",
    "static": false,
    "longname": "ka/components/panel/standart/control.js~Control#toggles",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "refreshInterval",
    "memberof": "ka/components/panel/standart/control.js~Control",
    "static": false,
    "longname": "ka/components/panel/standart/control.js~Control#refreshInterval",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "refreshDelay",
    "memberof": "ka/components/panel/standart/control.js~Control",
    "static": false,
    "longname": "ka/components/panel/standart/control.js~Control#refreshDelay",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "createElement",
    "memberof": "ka/components/panel/standart/control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/panel/standart/control.js~Control#createElement",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "setToggles",
    "memberof": "ka/components/panel/standart/control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/panel/standart/control.js~Control#setToggles",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "checked",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "setAutorefresh",
    "memberof": "ka/components/panel/standart/control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/panel/standart/control.js~Control#setAutorefresh",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "isAutorefresh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "onRefresh",
    "memberof": "ka/components/panel/standart/control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/panel/standart/control.js~Control#onRefresh",
    "access": "public",
    "description": "Устанавливаем обработчик события нажатия кнопки обновления.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, вызываемая при нажатии кнопки обновления."
      }
    ],
    "return": null
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "refresh",
    "memberof": "ka/components/panel/standart/control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/panel/standart/control.js~Control#refresh",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 294,
    "kind": "file",
    "name": "ka/components/state/State.js",
    "content": "/**\r\n * Класс для хранения состояния.\r\n * Хранит данные в виде объекта и предоставляет методы для их изменения и получения.\r\n * Также предоставляет возможность подписываться на изменения данных и получать уведомление при изменении.\r\n */\r\nexport default class State {\r\n    /**\r\n     * Создает новый объект State с указанными данными.\r\n     * @param {object} data - Объект, содержащий начальные данные.\r\n     */\r\n    constructor(data) {\r\n        /**\r\n         * Хранит все данные объекта State.\r\n         * @type {object}\r\n         * @private\r\n         */\r\n        this.data = data;\r\n\r\n        /**\r\n         * Хранит список функций обратного вызова для каждого ключа данных.\r\n         * @type {object}\r\n         * @private\r\n         */\r\n        this.keyCallbacks = {};\r\n    }\r\n\r\n    /**\r\n     * Добавляет функцию обратного вызова для указанного ключа.\r\n     * @param {string} key - Ключ данных, для которого добавляется функция обратного вызова.\r\n     * @param {function} callback - Функция, которая будет вызвана при изменении данных указанного ключа.\r\n     */\r\n    on(key, callback) {\r\n        if (!this.keyCallbacks[key]) {\r\n            this.keyCallbacks[key] = [];\r\n        }\r\n        this.keyCallbacks[key].push(callback);\r\n    }\r\n\r\n    /**\r\n     * Устанавливает значение указанного ключа данных.\r\n     * Вызывает все функции обратного вызова, зарегистрированные для данного ключа.\r\n     * @param {string} key - Ключ данных, для которого устанавливается значение.\r\n     * @param {*} value - Новое значение данных.\r\n     */\r\n    set(key, value) {\r\n        this.data[key] = value;\r\n        this.handleCallback(key, value);\r\n    }\r\n\r\n    /**\r\n     * Возвращает значение указанного ключа данных.\r\n     * @param {string} key - Ключ данных, для которого возвращается значение.\r\n     * @return {*} Значение данных указанного ключа.\r\n     */\r\n    get(key) {\r\n        return this.data[key];\r\n    }\r\n\r\n    /**\r\n     * Вызывает все функции обратного вызова, зарегистрированные для указанного ключа данных.\r\n     * @param {string} key - Ключ данных, для которого вызываются функции обратного вызова.\r\n     * @param {*} value - Значение данных указанного ключа.\r\n     * @private\r\n     */\r\n    handleCallback(key, value) {\r\n        if (this.keyCallbacks[key]) {\r\n            this.keyCallbacks[key].forEach(callback => callback(value));\r\n        }\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/state/State.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 295,
    "kind": "class",
    "name": "State",
    "memberof": "ka/components/state/State.js",
    "static": true,
    "longname": "ka/components/state/State.js~State",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/state/State.js",
    "importStyle": "State",
    "description": "Класс для хранения состояния.\nХранит данные в виде объекта и предоставляет методы для их изменения и получения.\nТакже предоставляет возможность подписываться на изменения данных и получать уведомление при изменении.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 296,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/state/State.js~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/state/State.js~State#constructor",
    "access": "public",
    "description": "Создает новый объект State с указанными данными.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Объект, содержащий начальные данные."
      }
    ]
  },
  {
    "__docId__": 297,
    "kind": "member",
    "name": "data",
    "memberof": "ka/components/state/State.js~State",
    "static": false,
    "longname": "ka/components/state/State.js~State#data",
    "access": "private",
    "description": "Хранит все данные объекта State.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 298,
    "kind": "member",
    "name": "keyCallbacks",
    "memberof": "ka/components/state/State.js~State",
    "static": false,
    "longname": "ka/components/state/State.js~State#keyCallbacks",
    "access": "private",
    "description": "Хранит список функций обратного вызова для каждого ключа данных.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "on",
    "memberof": "ka/components/state/State.js~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/state/State.js~State#on",
    "access": "public",
    "description": "Добавляет функцию обратного вызова для указанного ключа.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Ключ данных, для которого добавляется функция обратного вызова."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, которая будет вызвана при изменении данных указанного ключа."
      }
    ],
    "return": null
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "set",
    "memberof": "ka/components/state/State.js~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/state/State.js~State#set",
    "access": "public",
    "description": "Устанавливает значение указанного ключа данных.\nВызывает все функции обратного вызова, зарегистрированные для данного ключа.",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Ключ данных, для которого устанавливается значение."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Новое значение данных."
      }
    ],
    "return": null
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "get",
    "memberof": "ka/components/state/State.js~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/state/State.js~State#get",
    "access": "public",
    "description": "Возвращает значение указанного ключа данных.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Ключ данных, для которого возвращается значение."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Значение данных указанного ключа."
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "handleCallback",
    "memberof": "ka/components/state/State.js~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/state/State.js~State#handleCallback",
    "access": "private",
    "description": "Вызывает все функции обратного вызова, зарегистрированные для указанного ключа данных.",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Ключ данных, для которого вызываются функции обратного вызова."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Значение данных указанного ключа."
      }
    ],
    "return": null
  },
  {
    "__docId__": 303,
    "kind": "file",
    "name": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js",
    "content": "import dateUtils from \"../../../utils/dateUtils.js\";\r\nimport { ModalInfo } from \"./ModalInfo.js\";\r\n\r\nimport Table from \"./Table.js\";\r\n\r\n\r\nexport default class ActiveSessionTable {\r\n\r\n    constructor(selector) {\r\n        this.element = document.querySelector(selector);\r\n        this.container = document.createElement('div');\r\n        this.modal = new ModalInfo();\r\n        this.element.appendChild(this.modal.getElement());\r\n        this.element.appendChild(this.container);\r\n    }\r\n\r\n    clear() {\r\n        this.container.innerHTML = '';\r\n    }\r\n\r\n    setData(dataSessions) {\r\n        this.clear();\r\n        dataSessions.forEach(session => {\r\n            this.addSession(session);\r\n        })\r\n    }\r\n\r\n    addSession(session) {\r\n        const sessionData = session.session_data;\r\n        const sessionBlock = this.createSessionBlock();\r\n        sessionBlock.appendChild(this.createHeader(session.ID, sessionData));\r\n        sessionBlock.appendChild(this.createMainTable(sessionData));\r\n        const detailsTable = sessionBlock.appendChild(this.createDetailsTable(sessionData));\r\n        sessionBlock.appendChild(this.createToggleButton(detailsTable));\r\n        // sessionBlock.appendChild(this.createModalButton(detailsTable));\r\n\r\n        this.container.appendChild(sessionBlock);\r\n    }\r\n\r\n    createSessionBlock() {\r\n        const sessionBlock = document.createElement('div');\r\n        sessionBlock.style.border = '1px solid black';\r\n        sessionBlock.style.borderRadius = '10px';\r\n        sessionBlock.style.marginBottom = '10px';\r\n        sessionBlock.style.padding = '10px';\r\n\r\n        return sessionBlock;\r\n    }\r\n\r\n    createHeader(ID, sessionData) {\r\n        const div = document.createElement('div');\r\n        div.style.textAlign = 'center';\r\n        div.style.border = '1px solid black';\r\n        div.style.borderRadius = '10px';\r\n        div.style.backgroundColor = '#cccccc';\r\n        div.style.marginBottom = '10px';\r\n        div.style.width = '100%';\r\n        div.innerHTML = `Сеанс связи: ${dateUtils.formatDisplayDateTime(new Date(sessionData['Data_Vyz']))}_${ID}`\r\n        return div\r\n    }\r\n\r\n    createMainTable(data) {\r\n        const table = new Table();\r\n        // TODO: ПРОВЕРКА НА УБИРАЕНИЕ\r\n        if (data['ID_Abonent_T1'] == 0 || data['ID_Abonent_T2'] == 0) {\r\n            data['ID_Abonent_T1'] = 1;\r\n            data['ID_Abonent_T2'] = 2;\r\n        }\r\n        const rows = [\r\n            { name: 'Вызывающий Аб.:', value: `Аб. ${data['ID_Abonent_T1']}` },\r\n            { name: 'Вызываемый Аб.:', value: `Аб. ${data['ID_Abonent_T2']}` },\r\n            { name: 'Дата вызова:', value: dateUtils.formatDisplayDateTime(new Date(data['Data_Vyz'])) },\r\n        ];\r\n        // Стили таблицы\r\n        table.tableStyles = {\r\n            width: '100%',\r\n            fontSize: '14px',\r\n            borderCollapse: 'collapse',\r\n            marginBottom: '10px',\r\n            wordBreak: 'break-word',\r\n            whiteSpace: 'normal',\r\n            borderCollapse: 'separate', /* Позволяет использовать border-spacing */\r\n            borderSpacing: '5px', /* Расстояние между ячейками таблицы */\r\n        }\r\n        // Стили ячейки с названием\r\n        table.tdNameStyles = {\r\n            width: '160px',\r\n            maxWidth: '160px',\r\n            minWidth: '160px',\r\n        }\r\n        // Стили ячейки со значением\r\n        table.tdValueStyles = {\r\n        }\r\n        table.setData(rows);\r\n\r\n        return table.getElement();\r\n    }\r\n\r\n    createDetailsTable(data) {\r\n        const table = new Table();\r\n        const rows = [\r\n            { name: 'Запрос на сеанс связи:', value: data['ID_Zapros_Seans_Tek'] },\r\n\r\n\r\n            { name: 'Номер телефона вызывающего:', value: data['Tlf1'] },\r\n            { name: 'КА вызывающего:', value: data['ID_KA1'] },\r\n            { name: 'РСС вызывающего:', value: data['ID_RSS1'] },\r\n\r\n            { name: 'Номер канала вызывающего:', value: data['Canal1'] },\r\n            { name: 'Номер тайм-слота вызывающего:', value: data['Time_Slot1'] },\r\n\r\n            { name: 'Номер телефона вызываемого:', value: data['Tlf2'] },\r\n            { name: 'КА вызываемого:', value: data['ID_KA2'] },\r\n            { name: 'РСС вызываемого:', value: data['ID_RSS2'] },\r\n\r\n            { name: 'Номер канала вызываемого:', value: data['Canal2'] },\r\n            { name: 'Номер тайм-слота вызываемого:', value: data['Time_Slot2'] },\r\n\r\n            { name: 'Дата вызова:', value: dateUtils.formatDisplayDateTime(new Date(data['Data_Vyz'])) },\r\n            { name: 'Дата решения:', value: dateUtils.formatDisplayDateTime(new Date(data['Data_Otv'])) },\r\n            { name: 'Дата начала сеанса:', value: dateUtils.formatDisplayDateTime(new Date(data['Data_Beg'])) },\r\n            { name: 'Дата начала передачи:', value: dateUtils.formatDisplayDateTime(new Date(data['Data_Beg_Razg'])) },\r\n\r\n            // { name: 'На удаление:', value: '' },\r\n            { name: 'Дата завершения сеанса:', value: dateUtils.formatDisplayDateTime(new Date(data['Data_End'])) },\r\n            { name: 'Длительность сеанса:', value: data['Time_Seans'] },\r\n            { name: 'Длительность передачи:', value: data['Time_Razg'] },\r\n            // Добавьте другие поля, если необходимо\r\n        ];\r\n        // Стили таблицы\r\n        table.tableStyles = {\r\n            width: '100%',\r\n            borderCollapse: 'collapse',\r\n            marginBottom: '10px',\r\n            wordBreak: 'break-word',\r\n            whiteSpace: 'normal',\r\n            borderCollapse: 'separate', /* Позволяет использовать border-spacing */\r\n            borderSpacing: '5px', /* Расстояние между ячейками таблицы */\r\n            fontSize: '14px',\r\n            display: 'none',\r\n        }\r\n\r\n        // Стили ячейки с названием\r\n        table.tdNameStyles = {\r\n            width: '160px',\r\n            maxWidth: '160px',\r\n            minWidth: '160px',\r\n        }\r\n        // Стили ячейки со значением\r\n        table.tdValueStyles = {\r\n            // border: '1px solid black',\r\n        }\r\n        table.setData(rows);\r\n\r\n        return table.getElement();\r\n    }\r\n\r\n    createToggleButton(detailsTable) {\r\n        const container = document.createElement('div');\r\n        container.style.display = 'flex';\r\n        container.style.justifyContent = 'flex-end'; // Выравнивание по правому краю\r\n        container.style.marginBottom = '5px';\r\n        // Кнопка \"Показать подробно/Скрыть\"\r\n        const toggleButton = document.createElement('button');\r\n        toggleButton.style.marginLeft = 'auto';\r\n        toggleButton.style.cursor = 'pointer';\r\n        toggleButton.style.fontSize = '12px';\r\n        toggleButton.style.fontWeight = 'bold';\r\n        toggleButton.style.width = '160px';\r\n        toggleButton.style.backgroundColor = '#ada5a5';\r\n        toggleButton.style.boxShadow = 'none';\r\n        toggleButton.style.border = 'none';\r\n        toggleButton.style.borderRadius = '5px';\r\n        toggleButton.style.height = '20px';\r\n        toggleButton.textContent = 'Детализация';\r\n        toggleButton.addEventListener('click', () => {\r\n            const isHidden = detailsTable.style.display === 'none';\r\n            detailsTable.style.display = isHidden ? 'table' : 'none';\r\n            toggleButton.textContent = isHidden ? 'Скрыть' : 'Детализация';\r\n        });\r\n\r\n        toggleButton.addEventListener('mouseover', () => {\r\n            toggleButton.style.backgroundColor = '#cac5c5';\r\n        })\r\n\r\n        toggleButton.addEventListener('mouseout', () => {\r\n            toggleButton.style.backgroundColor = '#ada5a5';\r\n        })\r\n\r\n        // Добавляем кнопку в контейнер\r\n        container.appendChild(toggleButton);\r\n\r\n        // Возвращаем контейнер с кнопкой\r\n        return container;\r\n    }\r\n\r\n    createModalButton(detailsTable) {\r\n        const container = document.createElement('div');\r\n        container.style.display = 'flex';\r\n        container.style.justifyContent = 'flex-end'; // Выравнивание по правому краю\r\n        // Кнопка \"Показать подробно/Скрыть\"\r\n        const toggleButton = document.createElement('button');\r\n        toggleButton.style.marginLeft = 'auto';\r\n        toggleButton.textContent = 'Детализация в модальном окне';\r\n\r\n        toggleButton.addEventListener('click', () => {\r\n            const clone = detailsTable.cloneNode(true);\r\n            clone.style.display = 'block';\r\n            this.modal.showByElement(clone);;\r\n        });\r\n\r\n        // Добавляем кнопку в контейнер\r\n        container.appendChild(toggleButton);\r\n\r\n        // Возвращаем контейнер с кнопкой\r\n        return container;\r\n    }\r\n\r\n}\r\n\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/ActiveSessionTable/ActiveSessionTable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 304,
    "kind": "class",
    "name": "ActiveSessionTable",
    "memberof": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js",
    "static": true,
    "longname": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/ActiveSessionTable/ActiveSessionTable.js",
    "importStyle": "ActiveSessionTable",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 305,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "element",
    "memberof": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable#element",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "container",
    "memberof": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable#container",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "modal",
    "memberof": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable#modal",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "clear",
    "memberof": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable#clear",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "setData",
    "memberof": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable#setData",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "dataSessions",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "addSession",
    "memberof": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable#addSession",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "session",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "createSessionBlock",
    "memberof": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable#createSessionBlock",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "createHeader",
    "memberof": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable#createHeader",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "ID",
        "types": [
          "*"
        ]
      },
      {
        "name": "sessionData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "createMainTable",
    "memberof": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable#createMainTable",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "createDetailsTable",
    "memberof": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable#createDetailsTable",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "createToggleButton",
    "memberof": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable#createToggleButton",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [
      {
        "name": "detailsTable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "createModalButton",
    "memberof": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ActiveSessionTable.js~ActiveSessionTable#createModalButton",
    "access": "public",
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "params": [
      {
        "name": "detailsTable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "file",
    "name": "ka/components/tables/ActiveSessionTable/control.js",
    "content": "import Toggle from \"../../../ui/toggle/toggle.js\";\r\n\r\nexport default class Control {\r\n    /**\r\n     * Конструктор класса.\r\n     */\r\n    constructor() {\r\n        this.onRefreshCallback = () => { };\r\n        this.elements = []\r\n        this.toggles = []\r\n        // Сохраняем интервал, для того чтобы затем его удалить.\r\n        this.refreshInterval = null;\r\n        this.refreshDelay = 1000;\r\n    }\r\n\r\n    createElement() {\r\n        const element = document.createElement('div');\r\n        // Создаем элемент, который будет являться элементом управления.\r\n        const panelElement = element.appendChild(document.createElement('div'));\r\n        // Добавляем класс, определяющий стиль элемента управления.\r\n        panelElement.classList.add('channel-plan-control-panel');\r\n\r\n        // Кнопка обновления\r\n        const refreshButton = panelElement.appendChild(document.createElement('button'));\r\n        // Устанавливаем текст и заголовок кнопки.\r\n        refreshButton.textContent = '↻ Обновить';\r\n        refreshButton.title = \"Обновить данные\";\r\n        // Добавляем класс, определяющий стиль кнопки.\r\n        refreshButton.classList.add('channel-plan-control-panel__button');\r\n        // Обработчик события нажатия кнопки обновления\r\n        refreshButton.onclick = () => {\r\n           this.refresh()\r\n        };\r\n\r\n        // Создаем toggle переключатель режима\r\n        const toggle = new Toggle('Автообновление');\r\n        // Добавляем что мы \r\n        panelElement.appendChild(toggle.element);\r\n        // Обработчик события нажатия toggle переключателя\r\n        toggle.onChange((event) => {\r\n            this.setAutorefresh(event.target.checked);\r\n        })\r\n        this.elements.push(element);\r\n        this.toggles.push(toggle);\r\n\r\n        return element;\r\n    }\r\n\r\n    // Обновляем все Toggle переключатели\r\n    setToggles(checked) {\r\n        this.toggles.forEach((toggle) => {\r\n            toggle.getInput().checked = checked;\r\n        })\r\n    }\r\n\r\n    setAutorefresh(isAutorefresh) {\r\n        if (isAutorefresh) {\r\n            this.setToggles(true);\r\n            if (this.refreshInterval !== null) return;\r\n            this.refreshInterval = setInterval(() => {\r\n                this.refresh();\r\n            }, this.refreshDelay);\r\n        } else {\r\n            this.setToggles(false);\r\n            if (this.refreshInterval === null) return\r\n            clearInterval(this.refreshInterval);\r\n            this.refreshInterval = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Устанавливаем обработчик события нажатия кнопки обновления.\r\n     * @param {Function} callback - Функция, вызываемая при нажатии кнопки обновления.\r\n     */\r\n    onRefresh(callback) {\r\n        this.onRefreshCallback = callback;\r\n    }\r\n\r\n    refresh() {\r\n        this.onRefreshCallback();\r\n    }\r\n}",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/ActiveSessionTable/control.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "class",
    "name": "Control",
    "memberof": "ka/components/tables/ActiveSessionTable/control.js",
    "static": true,
    "longname": "ka/components/tables/ActiveSessionTable/control.js~Control",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/ActiveSessionTable/control.js",
    "importStyle": "Control",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 320,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/tables/ActiveSessionTable/control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/control.js~Control#constructor",
    "access": "public",
    "description": "Конструктор класса.",
    "lineNumber": 7
  },
  {
    "__docId__": 321,
    "kind": "member",
    "name": "onRefreshCallback",
    "memberof": "ka/components/tables/ActiveSessionTable/control.js~Control",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/control.js~Control#onRefreshCallback",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "member",
    "name": "elements",
    "memberof": "ka/components/tables/ActiveSessionTable/control.js~Control",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/control.js~Control#elements",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "member",
    "name": "toggles",
    "memberof": "ka/components/tables/ActiveSessionTable/control.js~Control",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/control.js~Control#toggles",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "refreshInterval",
    "memberof": "ka/components/tables/ActiveSessionTable/control.js~Control",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/control.js~Control#refreshInterval",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "refreshDelay",
    "memberof": "ka/components/tables/ActiveSessionTable/control.js~Control",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/control.js~Control#refreshDelay",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "createElement",
    "memberof": "ka/components/tables/ActiveSessionTable/control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/control.js~Control#createElement",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "setToggles",
    "memberof": "ka/components/tables/ActiveSessionTable/control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/control.js~Control#setToggles",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "checked",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "setAutorefresh",
    "memberof": "ka/components/tables/ActiveSessionTable/control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/control.js~Control#setAutorefresh",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "isAutorefresh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "onRefresh",
    "memberof": "ka/components/tables/ActiveSessionTable/control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/control.js~Control#onRefresh",
    "access": "public",
    "description": "Устанавливаем обработчик события нажатия кнопки обновления.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, вызываемая при нажатии кнопки обновления."
      }
    ],
    "return": null
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "refresh",
    "memberof": "ka/components/tables/ActiveSessionTable/control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/control.js~Control#refresh",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 334,
    "kind": "file",
    "name": "ka/components/tables/ActiveSessionTable/index.js",
    "content": "import ActiveSessionTable from \"./ActiveSessionTable.js\"\r\nimport Control from \"./control.js\"\r\n\r\nconst activeSessionTable = {\r\n    table: ActiveSessionTable,\r\n    panel: Control\r\n}\r\n\r\nexport default activeSessionTable;\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/ActiveSessionTable/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 335,
    "kind": "variable",
    "name": "activeSessionTable",
    "memberof": "ka/components/tables/ActiveSessionTable/index.js",
    "static": true,
    "longname": "ka/components/tables/ActiveSessionTable/index.js~activeSessionTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/ActiveSessionTable/index.js",
    "importStyle": "activeSessionTable",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"table\": *, \"panel\": *}"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "file",
    "name": "ka/components/tables/ActiveSessionTable/ModalInfo.js",
    "content": "/**\r\n * Класс для создания модального окна с таблицей Частотного-поляризационного плана.\r\n * \r\n * @class\r\n */\r\nexport class ModalInfo {\r\n    /**\r\n     * Создает новый экземпляр класса ModalChannelPlan.\r\n     * \r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        // Создание элемента модального окна\r\n        this.modal = document.createElement('div');\r\n        this.modal.classList.add('modal-channel-plan');\r\n\r\n        // Установка содержимого модального окна\r\n        this.modal.innerHTML = `\r\n            <div class=\"modal-channel-plan__content\">\r\n                <span class=\"modal-channel-plan__close\">&times;</span>\r\n                <div class=\"modal-channel-plan__info\"></div>\r\n            </div>\r\n        `;\r\n\r\n        // Добавление обработчиков событий для закрытия модального окна\r\n        this.modal.querySelector('.modal-channel-plan__close').addEventListener('click', () => {\r\n            this.hide();\r\n        });\r\n\r\n        this.modal.addEventListener('click', (event) => {\r\n            if (event.target === this.modal) {\r\n                this.hide();\r\n            }\r\n        });\r\n\r\n        // Получение элемента для отображения информации в модальном окне\r\n        this.modalInfo = this.modal.querySelector('.modal-channel-plan__info');\r\n    }\r\n\r\n    /**\r\n     * Возвращает элемент модального окна.\r\n     * \r\n     * @returns {HTMLElement} Элемент модального окна.\r\n     */\r\n    getElement() {\r\n        return this.modal;\r\n    }\r\n\r\n    /**\r\n     * Отображает модальное окно с указанным содержимым.\r\n     * \r\n     * @param {string} content - Содержимое модального окна.\r\n     */\r\n    show(content) {\r\n        this.modalInfo.innerHTML = content;\r\n        this.modal.style.display = 'block';\r\n    }\r\n\r\n    showByElement(element) {\r\n        this.modalInfo.innerHTML = '';\r\n        this.modalInfo.appendChild(element);\r\n        this.modal.style.display = 'block';\r\n    }\r\n\r\n    /**\r\n     * Скрывает модальное окно.\r\n     */\r\n    hide() {\r\n        this.modal.style.display = 'none';\r\n    }\r\n}\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/ActiveSessionTable/ModalInfo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 337,
    "kind": "class",
    "name": "ModalInfo",
    "memberof": "ka/components/tables/ActiveSessionTable/ModalInfo.js",
    "static": true,
    "longname": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/ActiveSessionTable/ModalInfo.js",
    "importStyle": "{ModalInfo}",
    "description": "Класс для создания модального окна с таблицей Частотного-поляризационного плана.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 338,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo#constructor",
    "access": "public",
    "description": "Создает новый экземпляр класса ModalChannelPlan.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 339,
    "kind": "member",
    "name": "modal",
    "memberof": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo#modal",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "member",
    "name": "modalInfo",
    "memberof": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo#modalInfo",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "getElement",
    "memberof": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo#getElement",
    "access": "public",
    "description": "Возвращает элемент модального окна.",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLElement} Элемент модального окна."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "Элемент модального окна."
    },
    "params": []
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "show",
    "memberof": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo#show",
    "access": "public",
    "description": "Отображает модальное окно с указанным содержимым.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "Содержимое модального окна."
      }
    ],
    "return": null
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "showByElement",
    "memberof": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo#showByElement",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "hide",
    "memberof": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/ModalInfo.js~ModalInfo#hide",
    "access": "public",
    "description": "Скрывает модальное окно.",
    "lineNumber": 68,
    "params": [],
    "return": null
  },
  {
    "__docId__": 345,
    "kind": "file",
    "name": "ka/components/tables/ActiveSessionTable/Table.js",
    "content": "// Общий интерфейс табличек \r\n\r\n\r\nexport default class Table {\r\n    constructor() {\r\n        this.table = document.createElement('table');\r\n        this.tbody = this.table.createTBody();\r\n        this.tableStyles = {};\r\n        this.tdNameStyles = {};\r\n        this.tdValueStyles = {};\r\n    }\r\n\r\n    getElement() {\r\n        return this.table;\r\n    }\r\n    \r\n    setStyle(elemtnt, styles) {\r\n        elemtnt.style = {}\r\n        Object.assign(elemtnt.style, styles);\r\n    }  \r\n\r\n    setData(data) {\r\n        this.tbody.innerHTML = '';\r\n        this.setStyle(this.table, this.tableStyles);\r\n        data.forEach(row => {\r\n            const tr = this.tbody.insertRow();\r\n            const tdName = tr.insertCell();\r\n            tdName.innerHTML = row.name;\r\n            this.setStyle(tdName, this.tdNameStyles);\r\n\r\n            const tdValue = tr.insertCell();\r\n            tdValue.innerHTML = row.value;\r\n            this.setStyle(tdValue, this.tdValueStyles);\r\n        });\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/ActiveSessionTable/Table.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 346,
    "kind": "class",
    "name": "Table",
    "memberof": "ka/components/tables/ActiveSessionTable/Table.js",
    "static": true,
    "longname": "ka/components/tables/ActiveSessionTable/Table.js~Table",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/ActiveSessionTable/Table.js",
    "importStyle": "Table",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 347,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/tables/ActiveSessionTable/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/Table.js~Table#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "table",
    "memberof": "ka/components/tables/ActiveSessionTable/Table.js~Table",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/Table.js~Table#table",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "tbody",
    "memberof": "ka/components/tables/ActiveSessionTable/Table.js~Table",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/Table.js~Table#tbody",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "member",
    "name": "tableStyles",
    "memberof": "ka/components/tables/ActiveSessionTable/Table.js~Table",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/Table.js~Table#tableStyles",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "member",
    "name": "tdNameStyles",
    "memberof": "ka/components/tables/ActiveSessionTable/Table.js~Table",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/Table.js~Table#tdNameStyles",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "member",
    "name": "tdValueStyles",
    "memberof": "ka/components/tables/ActiveSessionTable/Table.js~Table",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/Table.js~Table#tdValueStyles",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "getElement",
    "memberof": "ka/components/tables/ActiveSessionTable/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/Table.js~Table#getElement",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "setStyle",
    "memberof": "ka/components/tables/ActiveSessionTable/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/Table.js~Table#setStyle",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "elemtnt",
        "types": [
          "*"
        ]
      },
      {
        "name": "styles",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "setData",
    "memberof": "ka/components/tables/ActiveSessionTable/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/Table.js~Table#setData",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 356,
    "kind": "file",
    "name": "ka/components/tables/ActiveSessionTable/_control.js",
    "content": "import Toggle from \"../../../ui/toggle/toggle.js\";\r\n\r\nexport default class Control {\r\n    /**\r\n     * Конструктор класса.\r\n     * @param {string} selector - Селектор элемента, в который будет вставлен элемент управления.я.\r\n     */\r\n    constructor(selector) {\r\n        // Получаем элемент, в который будет вставлен элемент управления.\r\n        this.element = document.querySelector(selector);\r\n        // Создаем элемент, который будет являться элементом управления.\r\n        this.panelElement = this.element.appendChild(document.createElement('div'));\r\n        // Добавляем класс, определяющий стиль элемента управления.\r\n        this.panelElement.classList.add('channel-plan-control-panel');\r\n\r\n        // Кнопка обновления\r\n        this.refreshButton = this.panelElement.appendChild(document.createElement('button'));\r\n        // Устанавливаем текст и заголовок кнопки.\r\n        this.refreshButton.textContent = '↻ Обновить';\r\n        this.refreshButton.title = \"Обновить данные\";\r\n        // Добавляем класс, определяющий стиль кнопки.\r\n        this.refreshButton.classList.add('channel-plan-control-panel__button');\r\n\r\n        // Создаем toggle переключатель режима\r\n        this.toggle = new Toggle('Автообновление');\r\n        // Добавляем что мы \r\n        this.panelElement.appendChild(this.toggle.element);\r\n        this.toggle.onChange((event) => {\r\n            const isChecked = event.target.checked;\r\n            this.setAutorefresh(isChecked);\r\n        })\r\n\r\n\r\n        this.elements = []\r\n        this.toggles = []\r\n        // Сохраняем интервал, для того чтобы затем его удалить.\r\n        this.refreshInterval  =  null ;\r\n        this.refreshDelay = 1000;\r\n    }\r\n\r\n    createElement() {\r\n\r\n    }\r\n\r\n    // Обновляем все Toggle переключатели\r\n    setToggles(checked) {\r\n        this.toggles.forEach((toggle) => {\r\n            this.toggle.getInput().checked = checked;\r\n        })\r\n    }\r\n\r\n    setAutorefresh(isAutorefresh) {\r\n        if (isAutorefresh) {\r\n            this.toggle.getInput().checked = true;\r\n            if (this.refreshInterval !== null ) return;\r\n            this.refreshInterval = setInterval(() => {\r\n                this.refresh();\r\n            }, this.refreshDelay);\r\n        } else {\r\n            this.toggle.getInput().checked = false;\r\n            if (this.refreshInterval === null ) return\r\n            clearInterval(this.refreshInterval);\r\n            this.refreshInterval = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Устанавливаем обработчик события нажатия кнопки обновления.\r\n     * @param {Function} callback - Функция, вызываемая при нажатии кнопки обновления.\r\n     */\r\n    onRefresh(callback) {\r\n        this.refreshButton.onclick = () => {\r\n            callback();\r\n        };\r\n    }\r\n\r\n    refresh() {\r\n        this.refreshButton.click();\r\n    }\r\n}",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/ActiveSessionTable/_control.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 357,
    "kind": "class",
    "name": "Control",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js",
    "static": true,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/ActiveSessionTable/_control.js",
    "importStyle": "Control",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 358,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control#constructor",
    "access": "public",
    "description": "Конструктор класса.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "Селектор элемента, в который будет вставлен элемент управления.я."
      }
    ]
  },
  {
    "__docId__": 359,
    "kind": "member",
    "name": "element",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control#element",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "panelElement",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control#panelElement",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "refreshButton",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control#refreshButton",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "toggle",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control#toggle",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "member",
    "name": "elements",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control#elements",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "member",
    "name": "toggles",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control#toggles",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "member",
    "name": "refreshInterval",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control#refreshInterval",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "member",
    "name": "refreshDelay",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control#refreshDelay",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "createElement",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control#createElement",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "setToggles",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control#setToggles",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "checked",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "setAutorefresh",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control#setAutorefresh",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "isAutorefresh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "onRefresh",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control#onRefresh",
    "access": "public",
    "description": "Устанавливаем обработчик события нажатия кнопки обновления.",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, вызываемая при нажатии кнопки обновления."
      }
    ],
    "return": null
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "refresh",
    "memberof": "ka/components/tables/ActiveSessionTable/_control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ActiveSessionTable/_control.js~Control#refresh",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 374,
    "kind": "file",
    "name": "ka/components/tables/CallersIntervalsTable.js",
    "content": "import dateUtils from \"../../utils/dateUtils.js\";\r\n// TODO: Объеденить в общую папку с RSSIntervalTable\r\n\r\n\r\nexport default class CallersIntervalsTable {\r\n\r\n    /**\r\n     * Представляет таблицу, отображающую интервалы обмена данными между абонентами и спутниками.\r\n     *\r\n     * @class\r\n     * @param {string} selector - CSS-селектор элемента, в котором будет отображаться таблица.\r\n     */\r\n    constructor(selector) {\r\n        /**\r\n         * DOM-элемент, в котором будет отображаться таблица.\r\n         * @type {HTMLDivElement}\r\n         */\r\n        this.element = document.querySelector(selector);\r\n\r\n        /**\r\n         * Данные, хранящиеся в таблице.\r\n         *  Массив, каждый элемент которого представляет вызывающий объект.\r\n         *  Каждый вызывающий объект представляет объект с тремя полями:\r\n         *   - `name` (string) - имя вызывающего объекта\r\n         *   - `ka` (string) - имя спутника\r\n         *   - `interval` (number) - длительность обмена данными в секундах\r\n         *   - `start` (Date) - дата и время начала обмена данными\r\n         *   - `end` (Date) - дата и время конца обмена данными\r\n         * @type {Array<Object>}\r\n         */\r\n        this.data = [];\r\n\r\n\r\n        this.columnNames = {\r\n            // Имя вызывающего объекта.\r\n            name: 'Абонент',\r\n            // Имя спутника.\r\n            ka: 'Наименование КА',\r\n            // Дата и время начала обмена данными.\r\n            start: 'Вход в зону',\r\n            // Дата и время конца обмена данными.\r\n            end: 'Выход из зоны',\r\n            // Длительность обмена данными в секундах.\r\n            interval: 'Доступность КА (сек.)'\r\n        };\r\n\r\n        this.namePrefix = this.columnNames.name;\r\n        this.nameKAColumn = this.columnNames.ka\r\n        this.startColumn = this.columnNames.start\r\n        this.endColumn = this.columnNames.end\r\n        this.intervalColumn = this.columnNames.interval\r\n\r\n\r\n\r\n        /**\r\n         * Очищает таблицу, удаляя из нее все содержимое.\r\n         */\r\n        this.clear();\r\n\r\n    }\r\n\r\n    /**\r\n     * Устанавливает данные в таблицу.\r\n     *\r\n     * @param {Array} data - Массив данных для таблицы. Каждый элемент массива представляет вызывающий объект.\r\n     * Каждый вызывающий объект представляет объект с двумя полями:\r\n     *  - `name: {string}` - имя вызывающего объекта\r\n     *  - `satellites_data: {Array}` - массив данных обмена данными с спутниками.\r\n     *    Каждый элемент данного массива представляет данные обмена данными с одним спутником и имеет два поля:\r\n     *     - `satellite_name: {string}` - имя спутника\r\n     *     - `communication_interval: {Object}` - данные обмена данными\r\n     *       - `start_datetime_iso: {string}` - дата и время начала обмена в формате ISO\r\n     *       - `end_datetime_iso: {string}` - дата и время конца обмена в формате ISO\r\n     *       - `duration_in_sec: {number}` - длительность обмена в секундах\r\n     */\r\n    setData(data) {\r\n        // Очищаем таблицу\r\n        this.clear();\r\n\r\n        // Проходим по каждому вызывающему объекту\r\n        for (const caller of data) {\r\n            // Извлекаем имя и данные спутников\r\n            const { name, satellites_data } = caller;\r\n\r\n            // Добавляем заголовок с названием вызывающего объекта\r\n            this.addHead(name);\r\n\r\n            // Проходим по каждому интервалу обмена данными с спутниками\r\n            for (const intervalData of satellites_data) {\r\n                // Извлекаем имя спутника и данные обмена данными\r\n                const { satellite_name, communication_interval } = intervalData;\r\n\r\n                for (const interval of communication_interval) {\r\n                    this.addRow(\r\n                        satellite_name, // Имя спутника\r\n                        new Date(interval.start_datetime_iso), // Начало обмена\r\n                        new Date(interval.end_datetime_iso), // Конец обмена\r\n                        interval.duration_in_sec // Длительность обмена\r\n                    );\r\n                    this.addData(\r\n                        name, satellite_name,\r\n                        interval.start_datetime_iso,\r\n                        interval.end_datetime_iso,\r\n                        interval.duration_in_sec\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Добавляет данные в таблицу.\r\n     *\r\n     * @param {string} nameCaller - Имя вызывающего объекта.\r\n     * @param {string} ka_name - Имя спутника.\r\n     * @param {string} startIso - Дата и время начала обмена данными в формате ISO.\r\n     * @param {string} endIso - Дата и время конца обмена данными в формате ISO.\r\n     * @param {number} duration - Длительность обмена данными в секундах.\r\n     */\r\n    addData(nameCaller, ka_name, startIso, endIso, duration) {\r\n        // Добавляет данные в таблицу.\r\n        this.data.push({\r\n            // Имя вызывающего объекта.\r\n            name: nameCaller,\r\n\r\n            // Имя спутника.\r\n            ka: ka_name,\r\n\r\n            // Дата и время начала обмена данными.\r\n            start: new Date(startIso),\r\n\r\n            // Дата и время конца обмена данными.\r\n            end: new Date(endIso),\r\n\r\n            // Длительность обмена данными в секундах.\r\n            interval: duration\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Очищает данные таблицы.\r\n     */\r\n    clearData() {\r\n        // Очищает данные таблицы.\r\n        this.data = [];\r\n    }\r\n\r\n\r\n    /**\r\n     * Возвращает данные, хранящиеся в таблице.\r\n     *\r\n     * @return {Array} Данные, хранящиеся в таблице.\r\n     *  Массив, каждый элемент которого представляет вызывающий объект.\r\n     *  Каждый вызывающий объект представляет объект с тремя полями:\r\n     *   - `name` (string) - имя вызывающего объекта\r\n     *   - `ka` (string) - имя спутника\r\n     *   - `interval` (number) - длительность обмена данными в секундах\r\n     *   - `start` (Date) - дата и время начала обмена данными\r\n     *   - `end` (Date) - дата и время конца обмена данными\r\n     */\r\n    getData() {\r\n        // Возвращает данные, хранящиеся в таблице.\r\n        return this.data;\r\n    }\r\n\r\n    /**\r\n     * Добавляет заголовок таблицы с именем вызывающего объекта.\r\n     *\r\n     * @param {string} name - Имя вызывающего объекта.\r\n     */\r\n    addHead(name) {\r\n        // Создаем элемент div для заголовка\r\n        const nameDiv = document.createElement('div');\r\n\r\n        // Добавляем CSS-классы к элементу div\r\n        nameDiv.classList.add('abonents-show-block__title');\r\n        nameDiv.classList.add('abonents-show-block__title--abonent');\r\n\r\n        // Устанавливаем содержимое элемента div в значение имени вызывающего объекта\r\n        nameDiv.innerHTML = this.namePrefix + name;\r\n\r\n        // Добавляем элемент div в элемент таблицы\r\n        this.element.append(nameDiv);\r\n    }\r\n\r\n    /**\r\n     * Добавляет строку в таблицу с данными обмена данными с спутником.\r\n     *\r\n     * @param {string} name - Имя спутника.\r\n     * @param {Date} start - Дата и время начала обмена данными.\r\n     * @param {Date} end - Дата и время окончания обмена данными.\r\n     * @param {number} interval - Длительность обмена данными в секундах.\r\n     */\r\n    addRow(name, start, end, interval) {\r\n        // Добавляем заголовок с названием вызывающего объекта\r\n        this.addHeadCell(this.nameKAColumn, name);\r\n\r\n        // Добавляем строку в таблицу с данными обмена данными\r\n        // Дата и время начала обмена данными\r\n        this.addCell(this.startColumn, dateUtils.formatDisplayDateTime(start));\r\n\r\n        // Дата и время окончания обмена данными\r\n        this.addCell(this.endColumn, dateUtils.formatDisplayDateTime(end));\r\n\r\n        // Длительность обмена данными в секундах\r\n        this.addCell(this.intervalColumn, interval);\r\n    }\r\n\r\n\r\n    /**\r\n     * Добавляет ячейку заголовка в таблицу.\r\n     *\r\n     * @param {string} name - Название ячейки заголовка.\r\n     * @param {string} value - Значение ячейки заголовка.\r\n     */\r\n    addHeadCell(name, value) {\r\n        // Создаем элемент div для названия ячейки заголовка\r\n        const nameDiv = document.createElement('div');\r\n\r\n        // Добавляем CSS-классы к элементу div\r\n        nameDiv.classList.add('abonents-show-block__title');\r\n        nameDiv.classList.add('abonents-show-block__title--ka');\r\n\r\n        // Устанавливаем содержимое элемента div в значение названия ячейки заголовка\r\n        nameDiv.innerHTML = name;\r\n\r\n        // Создаем элемент div для значения ячейки заголовка\r\n        const valueDiv = document.createElement('div');\r\n\r\n        // Добавляем CSS-классы к элементу div\r\n        valueDiv.classList.add('abonents-show-block__title');\r\n        valueDiv.classList.add('abonents-show-block__title--ka');\r\n\r\n        // Устанавливаем содержимое элемента div в значение значения ячейки заголовка\r\n        valueDiv.innerHTML = value;\r\n\r\n        // Добавляем элементы div в таблицу\r\n        this.element.append(nameDiv, valueDiv);\r\n    }\r\n\r\n    /**\r\n     * Добавляет ячейку с названием и значением в таблицу.\r\n     *\r\n     * @param {string} name - Название ячейки.\r\n     * @param {string} value - Значение ячейки.\r\n     */\r\n    addCell(name, value) {\r\n        // Создаем элемент div для названия ячейки\r\n        const nameDiv = document.createElement('div');\r\n\r\n        // Добавляем CSS-классы к элементу div для названия ячейки\r\n        nameDiv.classList.add('abonents-show-block__title');\r\n\r\n        // Устанавливаем содержимое элемента div для названия ячейки\r\n        nameDiv.innerHTML = name;\r\n\r\n        // Создаем элемент div для значения ячейки\r\n        const valueDiv = document.createElement('div');\r\n\r\n        // Добавляем CSS-классы к элементу div для значения ячейки\r\n        valueDiv.classList.add('abonents-show-block__cell--time');\r\n\r\n        // Устанавливаем содержимое элемента div для значения ячейки\r\n        valueDiv.innerHTML = value;\r\n\r\n        // Добавляем элементы div в таблицу\r\n        this.element.append(nameDiv, valueDiv);\r\n    }\r\n\r\n    /**\r\n     * Очищает таблицу, удаляя все ее содержимое.\r\n     *\r\n     * Эта функция удаляет все элементы внутри элемента таблицы, устанавливая innerHTML элемента таблицы в пустую строку.\r\n     */\r\n    clear() {\r\n        // Очищаем таблицу, устанавливая innerHTML элемента таблицы в пустую строку.\r\n        // Это эффективно удаляет все элементы внутри таблицы.\r\n        this.element.innerHTML = '';\r\n        this.clearData();\r\n    }\r\n\r\n}",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/CallersIntervalsTable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 375,
    "kind": "class",
    "name": "CallersIntervalsTable",
    "memberof": "ka/components/tables/CallersIntervalsTable.js",
    "static": true,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/CallersIntervalsTable.js",
    "importStyle": "CallersIntervalsTable",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 376,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#constructor",
    "access": "public",
    "description": "Представляет таблицу, отображающую интервалы обмена данными между абонентами и спутниками.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "CSS-селектор элемента, в котором будет отображаться таблица."
      }
    ]
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "element",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#element",
    "access": "public",
    "description": "DOM-элемент, в котором будет отображаться таблица.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "HTMLDivElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 378,
    "kind": "member",
    "name": "data",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#data",
    "access": "public",
    "description": "Данные, хранящиеся в таблице.\n Массив, каждый элемент которого представляет вызывающий объект.\n Каждый вызывающий объект представляет объект с тремя полями:\n  - `name` (string) - имя вызывающего объекта\n  - `ka` (string) - имя спутника\n  - `interval` (number) - длительность обмена данными в секундах\n  - `start` (Date) - дата и время начала обмена данными\n  - `end` (Date) - дата и время конца обмена данными",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 379,
    "kind": "member",
    "name": "columnNames",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#columnNames",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "{\"name\": string, \"ka\": string, \"start\": string, \"end\": string, \"interval\": string}"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "member",
    "name": "namePrefix",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#namePrefix",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "nameKAColumn",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#nameKAColumn",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "member",
    "name": "startColumn",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#startColumn",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "endColumn",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#endColumn",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "intervalColumn",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#intervalColumn",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "setData",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#setData",
    "access": "public",
    "description": "Устанавливает данные в таблицу.",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Массив данных для таблицы. Каждый элемент массива представляет вызывающий объект.\nКаждый вызывающий объект представляет объект с двумя полями:\n - `name: {string}` - имя вызывающего объекта\n - `satellites_data: {Array}` - массив данных обмена данными с спутниками.\n   Каждый элемент данного массива представляет данные обмена данными с одним спутником и имеет два поля:\n    - `satellite_name: {string}` - имя спутника\n    - `communication_interval: {Object}` - данные обмена данными\n      - `start_datetime_iso: {string}` - дата и время начала обмена в формате ISO\n      - `end_datetime_iso: {string}` - дата и время конца обмена в формате ISO\n      - `duration_in_sec: {number}` - длительность обмена в секундах"
      }
    ],
    "return": null
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "addData",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#addData",
    "access": "public",
    "description": "Добавляет данные в таблицу.",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nameCaller",
        "description": "Имя вызывающего объекта."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ka_name",
        "description": "Имя спутника."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "startIso",
        "description": "Дата и время начала обмена данными в формате ISO."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "endIso",
        "description": "Дата и время конца обмена данными в формате ISO."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "Длительность обмена данными в секундах."
      }
    ],
    "return": null
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "clearData",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#clearData",
    "access": "public",
    "description": "Очищает данные таблицы.",
    "lineNumber": 143,
    "params": [],
    "return": null
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "getData",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#getData",
    "access": "public",
    "description": "Возвращает данные, хранящиеся в таблице.",
    "lineNumber": 161,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Данные, хранящиеся в таблице.\n Массив, каждый элемент которого представляет вызывающий объект.\n Каждый вызывающий объект представляет объект с тремя полями:\n  - `name` (string) - имя вызывающего объекта\n  - `ka` (string) - имя спутника\n  - `interval` (number) - длительность обмена данными в секундах\n  - `start` (Date) - дата и время начала обмена данными\n  - `end` (Date) - дата и время конца обмена данными"
    },
    "params": []
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "addHead",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#addHead",
    "access": "public",
    "description": "Добавляет заголовок таблицы с именем вызывающего объекта.",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Имя вызывающего объекта."
      }
    ],
    "return": null
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "addRow",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#addRow",
    "access": "public",
    "description": "Добавляет строку в таблицу с данными обмена данными с спутником.",
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Имя спутника."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Дата и время начала обмена данными."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Дата и время окончания обмена данными."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "Длительность обмена данными в секундах."
      }
    ],
    "return": null
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "addHeadCell",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#addHeadCell",
    "access": "public",
    "description": "Добавляет ячейку заголовка в таблицу.",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Название ячейки заголовка."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Значение ячейки заголовка."
      }
    ],
    "return": null
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "addCell",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#addCell",
    "access": "public",
    "description": "Добавляет ячейку с названием и значением в таблицу.",
    "lineNumber": 247,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Название ячейки."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Значение ячейки."
      }
    ],
    "return": null
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "clear",
    "memberof": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable#clear",
    "access": "public",
    "description": "Очищает таблицу, удаляя все ее содержимое.\n\nЭта функция удаляет все элементы внутри элемента таблицы, устанавливая innerHTML элемента таблицы в пустую строку.",
    "lineNumber": 275,
    "params": [],
    "return": null
  },
  {
    "__docId__": 395,
    "kind": "file",
    "name": "ka/components/tables/channelPlanTable/controlPanel.js",
    "content": "import Dropdown from \"../../../ui/dropdown/Dropdown.js\";\r\nimport Toggle from \"../../../ui/toggle/toggle.js\";\r\n\r\n\r\n/**\r\n * Класс, представляющий элемент управления таблицей планирования канала.\r\n */\r\nexport default class ControlPanel {\r\n\r\n    /**\r\n     * Конструктор класса.\r\n     * @param {string} selector - Селектор элемента, в который будет вставлен элемент управления.\r\n     * @param {ChannelPlanTable} table - Таблица, с которой будет связан элемент управления.\r\n     */\r\n    constructor(selector, table) {\r\n        // Получаем элемент, в который будет вставлен элемент управления.\r\n        this.element = document.querySelector(selector);\r\n        // Создаем элемент, который будет являться элементом управления.\r\n        this.panelElement = this.element.appendChild(document.createElement('div'));\r\n        // Добавляем класс, определяющий стиль элемента управления.\r\n        this.panelElement.classList.add('channel-plan-control-panel');\r\n\r\n        // Кнопка обновления\r\n        this.refreshButton = this.panelElement.appendChild(document.createElement('button'));\r\n        // Устанавливаем текст и заголовок кнопки.\r\n        this.refreshButton.textContent = '↻ Обновить';\r\n        this.refreshButton.title = \"Обновить данные\";\r\n        // Добавляем класс, определяющий стиль кнопки.\r\n        this.refreshButton.classList.add('channel-plan-control-panel__button');\r\n        // Создаем элемент для выпадающего списка выбора КА.\r\n        const selectKAElement = this.panelElement.appendChild(document.createElement('div'));\r\n\r\n        // Выпадающий список выбора КА.\r\n        this.dropdownKA = new Dropdown(selectKAElement, 'Выберите КА');\r\n\r\n        // Связываем выпадающий список с таблицей и выбираем при изменении\r\n        // то есть перестраиваем таблицу.\r\n        this.dropdownKA.onDropdownChange((event) => {\r\n            table.setSelectKa(event.detail);\r\n        });\r\n\r\n        // Создаем toggle переключатель режима\r\n        this.toggle = new Toggle('Автообновление');\r\n        // Сохраняем интервал, для того чтобы затем его удалить.\r\n        this.refreshInterval  =  null ;\r\n        this.refreshDelay = 1000;\r\n        // Добавляем что мы \r\n        this.panelElement.appendChild(this.toggle.element);\r\n        this.toggle.onChange((event) => {\r\n            const isChecked = event.target.checked;\r\n            this.setAutorefresh(isChecked);\r\n        })\r\n\r\n        // Устанавливаем таблицу, с которой будет связан элемент управления.\r\n        this.table = table;\r\n    }\r\n\r\n    setAutorefresh(isAutorefresh) {\r\n        if (isAutorefresh) {\r\n            this.toggle.getInput().checked = true;\r\n            if (this.refreshInterval !== null ) return\r\n            this.refreshInterval = setInterval(() => {\r\n                this.refresh();\r\n            }, this.refreshDelay);\r\n        } else {\r\n            this.toggle.getInput().checked = false;\r\n            if (this.refreshInterval === null ) return\r\n            clearInterval(this.refreshInterval);\r\n            this.refreshInterval = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Добавляем пункты в выпадающий список выбора КА.\r\n     * @param {Array} kaNames - Массив названий КА.\r\n     */\r\n    seKatNames(kaNames) {\r\n        const newDict = {};\r\n        // Создаем словарь, где ключ - название КА, а значение - название КА.\r\n        kaNames.forEach((kaName) => {\r\n            newDict[kaName] = kaName;\r\n        });\r\n        // Устанавливаем словарь в выпадающий список выбора КА.\r\n        this.dropdownKA.setFromDict(newDict);\r\n        // Выбираем все элементы в выпадающем списке.\r\n        this.dropdownKA.selectAll();\r\n    }\r\n\r\n    /**\r\n     * Устанавливаем обработчик события нажатия кнопки обновления.\r\n     * @param {Function} callback - Функция, вызываемая при нажатии кнопки обновления.\r\n     */\r\n    onRefresh(callback) {\r\n        this.refreshButton.onclick = () => {\r\n            callback();\r\n        };\r\n    }\r\n\r\n    refresh() {\r\n        this.refreshButton.click();\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/channelPlanTable/controlPanel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 396,
    "kind": "class",
    "name": "ControlPanel",
    "memberof": "ka/components/tables/channelPlanTable/controlPanel.js",
    "static": true,
    "longname": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/channelPlanTable/controlPanel.js",
    "importStyle": "ControlPanel",
    "description": "Класс, представляющий элемент управления таблицей планирования канала.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 397,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel#constructor",
    "access": "public",
    "description": "Конструктор класса.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "Селектор элемента, в который будет вставлен элемент управления."
      },
      {
        "nullable": null,
        "types": [
          "ChannelPlanTable"
        ],
        "spread": false,
        "optional": false,
        "name": "table",
        "description": "Таблица, с которой будет связан элемент управления."
      }
    ]
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "element",
    "memberof": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel#element",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "member",
    "name": "panelElement",
    "memberof": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel#panelElement",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "refreshButton",
    "memberof": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel#refreshButton",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "dropdownKA",
    "memberof": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel#dropdownKA",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "member",
    "name": "toggle",
    "memberof": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel#toggle",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "member",
    "name": "refreshInterval",
    "memberof": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel#refreshInterval",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "member",
    "name": "refreshDelay",
    "memberof": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel#refreshDelay",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "table",
    "memberof": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel#table",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "setAutorefresh",
    "memberof": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel#setAutorefresh",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "isAutorefresh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "seKatNames",
    "memberof": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel#seKatNames",
    "access": "public",
    "description": "Добавляем пункты в выпадающий список выбора КА.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "kaNames",
        "description": "Массив названий КА."
      }
    ],
    "return": null
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "onRefresh",
    "memberof": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel#onRefresh",
    "access": "public",
    "description": "Устанавливаем обработчик события нажатия кнопки обновления.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, вызываемая при нажатии кнопки обновления."
      }
    ],
    "return": null
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "refresh",
    "memberof": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/controlPanel.js~ControlPanel#refresh",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 412,
    "kind": "file",
    "name": "ka/components/tables/channelPlanTable/ModalChannelPlan.js",
    "content": "/**\r\n * Класс для создания модального окна с таблицей Частотного-поляризационного плана.\r\n * \r\n * @class\r\n */\r\nexport class ModalChannelPlan {\r\n    /**\r\n     * Создает новый экземпляр класса ModalChannelPlan.\r\n     * \r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        // Создание элемента модального окна\r\n        this.modal = document.createElement('div');\r\n        this.modal.classList.add('modal-channel-plan');\r\n\r\n        // Установка содержимого модального окна\r\n        this.modal.innerHTML = `\r\n            <div class=\"modal-channel-plan__content\">\r\n                <span class=\"modal-channel-plan__close\">&times;</span>\r\n                <p id=\"modal-channel-plan__info\"></p>\r\n            </div>\r\n        `;\r\n\r\n        // Добавление обработчиков событий для закрытия модального окна\r\n        this.modal.querySelector('.modal-channel-plan__close').addEventListener('click', () => {\r\n            this.hide();\r\n        });\r\n\r\n        this.modal.addEventListener('click', (event) => {\r\n            if (event.target === this.modal) {\r\n                this.hide();\r\n            }\r\n        });\r\n\r\n        // Получение элемента для отображения информации в модальном окне\r\n        this.modalInfo = this.modal.querySelector('#modal-channel-plan__info');\r\n    }\r\n\r\n    /**\r\n     * Возвращает элемент модального окна.\r\n     * \r\n     * @returns {HTMLElement} Элемент модального окна.\r\n     */\r\n    getElement() {\r\n        return this.modal;\r\n    }\r\n\r\n    /**\r\n     * Отображает модальное окно с указанным содержимым.\r\n     * \r\n     * @param {string} content - Содержимое модального окна.\r\n     */\r\n    show(content) {\r\n        this.modalInfo.innerHTML = content;\r\n        this.modal.style.display = 'block';\r\n    }\r\n\r\n    /**\r\n     * Скрывает модальное окно.\r\n     */\r\n    hide() {\r\n        this.modal.style.display = 'none';\r\n    }\r\n}\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/channelPlanTable/ModalChannelPlan.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 413,
    "kind": "class",
    "name": "ModalChannelPlan",
    "memberof": "ka/components/tables/channelPlanTable/ModalChannelPlan.js",
    "static": true,
    "longname": "ka/components/tables/channelPlanTable/ModalChannelPlan.js~ModalChannelPlan",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/channelPlanTable/ModalChannelPlan.js",
    "importStyle": "{ModalChannelPlan}",
    "description": "Класс для создания модального окна с таблицей Частотного-поляризационного плана.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 414,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/tables/channelPlanTable/ModalChannelPlan.js~ModalChannelPlan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/ModalChannelPlan.js~ModalChannelPlan#constructor",
    "access": "public",
    "description": "Создает новый экземпляр класса ModalChannelPlan.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "modal",
    "memberof": "ka/components/tables/channelPlanTable/ModalChannelPlan.js~ModalChannelPlan",
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/ModalChannelPlan.js~ModalChannelPlan#modal",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "member",
    "name": "modalInfo",
    "memberof": "ka/components/tables/channelPlanTable/ModalChannelPlan.js~ModalChannelPlan",
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/ModalChannelPlan.js~ModalChannelPlan#modalInfo",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "getElement",
    "memberof": "ka/components/tables/channelPlanTable/ModalChannelPlan.js~ModalChannelPlan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/ModalChannelPlan.js~ModalChannelPlan#getElement",
    "access": "public",
    "description": "Возвращает элемент модального окна.",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLElement} Элемент модального окна."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "Элемент модального окна."
    },
    "params": []
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "show",
    "memberof": "ka/components/tables/channelPlanTable/ModalChannelPlan.js~ModalChannelPlan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/ModalChannelPlan.js~ModalChannelPlan#show",
    "access": "public",
    "description": "Отображает модальное окно с указанным содержимым.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "Содержимое модального окна."
      }
    ],
    "return": null
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "hide",
    "memberof": "ka/components/tables/channelPlanTable/ModalChannelPlan.js~ModalChannelPlan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/channelPlanTable/ModalChannelPlan.js~ModalChannelPlan#hide",
    "access": "public",
    "description": "Скрывает модальное окно.",
    "lineNumber": 62,
    "params": [],
    "return": null
  },
  {
    "__docId__": 420,
    "kind": "file",
    "name": "ka/components/tables/hppTable/controlPanel.js",
    "content": "import Dropdown from \"../../../ui/dropdown/Dropdown.js\";\r\nimport Toggle from \"../../../ui/toggle/toggle.js\";\r\n\r\n\r\n/**\r\n * Класс, представляющий элемент управления таблицей планирования канала.\r\n */\r\nexport default class ControlPanel {\r\n\r\n    /**\r\n     * Конструктор класса.\r\n     * @param {string} selector - Селектор элемента, в который будет вставлен элемент управления.\r\n     * @param {ChannelPlanTable} table - Таблица, с которой будет связан элемент управления.\r\n     */\r\n    constructor(selector, table) {\r\n        // Получаем элемент, в который будет вставлен элемент управления.\r\n        this.element = document.querySelector(selector);\r\n        // Создаем элемент, который будет являться элементом управления.\r\n        this.panelElement = this.element.appendChild(document.createElement('div'));\r\n        // Добавляем класс, определяющий стиль элемента управления.\r\n        this.panelElement.classList.add('channel-plan-control-panel');\r\n\r\n        // Кнопка обновления\r\n        this.refreshButton = this.panelElement.appendChild(document.createElement('button'));\r\n        // Устанавливаем текст и заголовок кнопки.\r\n        this.refreshButton.textContent = '↻ Обновить';\r\n        this.refreshButton.title = \"Обновить данные\";\r\n        // Добавляем класс, определяющий стиль кнопки.\r\n        this.refreshButton.classList.add('channel-plan-control-panel__button');\r\n        // Создаем элемент для выпадающего списка выбора КА.\r\n        const selectKAElement = this.panelElement.appendChild(document.createElement('div'));\r\n\r\n        // Выпадающий список выбора КА.\r\n        this.dropdownKA = new Dropdown(selectKAElement, 'Выберите КА');\r\n\r\n        // Связываем выпадающий список с таблицей и выбираем при изменении\r\n        // то есть перестраиваем таблицу.\r\n        this.dropdownKA.onDropdownChange((event) => {\r\n            table.setSelectKa(event.detail);\r\n        });\r\n\r\n        // Создаем toggle переключатель режима\r\n        this.toggle = new Toggle('Автообновление');\r\n        // Сохраняем интервал, для того чтобы затем его удалить.\r\n        this.refreshInterval  =  null ;\r\n        this.refreshDelay = 1000;\r\n        // Добавляем что мы \r\n        this.panelElement.appendChild(this.toggle.element);\r\n        this.toggle.onChange((event) => {\r\n            const isChecked = event.target.checked;\r\n            this.setAutorefresh(isChecked);\r\n        })\r\n\r\n        // Устанавливаем таблицу, с которой будет связан элемент управления.\r\n        this.table = table;\r\n    }\r\n\r\n    setAutorefresh(isAutorefresh) {\r\n        if (isAutorefresh) {\r\n            this.toggle.getInput().checked = true;\r\n            if (this.refreshInterval !== null ) return\r\n            this.refreshInterval = setInterval(() => {\r\n                this.refresh();\r\n            }, this.refreshDelay);\r\n        } else {\r\n            this.toggle.getInput().checked = false;\r\n            if (this.refreshInterval === null ) return\r\n            clearInterval(this.refreshInterval);\r\n            this.refreshInterval = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Добавляем пункты в выпадающий список выбора КА.\r\n     * @param {Array} kaNames - Массив названий КА.\r\n     */\r\n    seKatNames(kaNames) {\r\n        const newDict = {};\r\n        // Создаем словарь, где ключ - название КА, а значение - название КА.\r\n        kaNames.forEach((kaName) => {\r\n            newDict[kaName] = kaName;\r\n        });\r\n        // Устанавливаем словарь в выпадающий список выбора КА.\r\n        this.dropdownKA.setFromDict(newDict);\r\n        // Выбираем все элементы в выпадающем списке.\r\n        this.dropdownKA.selectAll();\r\n    }\r\n\r\n    /**\r\n     * Устанавливаем обработчик события нажатия кнопки обновления.\r\n     * @param {Function} callback - Функция, вызываемая при нажатии кнопки обновления.\r\n     */\r\n    onRefresh(callback) {\r\n        this.refreshButton.onclick = () => {\r\n            callback();\r\n        };\r\n    }\r\n\r\n    refresh() {\r\n        this.refreshButton.click();\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/hppTable/controlPanel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 421,
    "kind": "class",
    "name": "ControlPanel",
    "memberof": "ka/components/tables/hppTable/controlPanel.js",
    "static": true,
    "longname": "ka/components/tables/hppTable/controlPanel.js~ControlPanel",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/hppTable/controlPanel.js",
    "importStyle": "ControlPanel",
    "description": "Класс, представляющий элемент управления таблицей планирования канала.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 422,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/tables/hppTable/controlPanel.js~ControlPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/hppTable/controlPanel.js~ControlPanel#constructor",
    "access": "public",
    "description": "Конструктор класса.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "Селектор элемента, в который будет вставлен элемент управления."
      },
      {
        "nullable": null,
        "types": [
          "ChannelPlanTable"
        ],
        "spread": false,
        "optional": false,
        "name": "table",
        "description": "Таблица, с которой будет связан элемент управления."
      }
    ]
  },
  {
    "__docId__": 423,
    "kind": "member",
    "name": "element",
    "memberof": "ka/components/tables/hppTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/hppTable/controlPanel.js~ControlPanel#element",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "member",
    "name": "panelElement",
    "memberof": "ka/components/tables/hppTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/hppTable/controlPanel.js~ControlPanel#panelElement",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "member",
    "name": "refreshButton",
    "memberof": "ka/components/tables/hppTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/hppTable/controlPanel.js~ControlPanel#refreshButton",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "member",
    "name": "dropdownKA",
    "memberof": "ka/components/tables/hppTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/hppTable/controlPanel.js~ControlPanel#dropdownKA",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 427,
    "kind": "member",
    "name": "toggle",
    "memberof": "ka/components/tables/hppTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/hppTable/controlPanel.js~ControlPanel#toggle",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "refreshInterval",
    "memberof": "ka/components/tables/hppTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/hppTable/controlPanel.js~ControlPanel#refreshInterval",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "member",
    "name": "refreshDelay",
    "memberof": "ka/components/tables/hppTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/hppTable/controlPanel.js~ControlPanel#refreshDelay",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "member",
    "name": "table",
    "memberof": "ka/components/tables/hppTable/controlPanel.js~ControlPanel",
    "static": false,
    "longname": "ka/components/tables/hppTable/controlPanel.js~ControlPanel#table",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "setAutorefresh",
    "memberof": "ka/components/tables/hppTable/controlPanel.js~ControlPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/hppTable/controlPanel.js~ControlPanel#setAutorefresh",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "isAutorefresh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "seKatNames",
    "memberof": "ka/components/tables/hppTable/controlPanel.js~ControlPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/hppTable/controlPanel.js~ControlPanel#seKatNames",
    "access": "public",
    "description": "Добавляем пункты в выпадающий список выбора КА.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "kaNames",
        "description": "Массив названий КА."
      }
    ],
    "return": null
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "onRefresh",
    "memberof": "ka/components/tables/hppTable/controlPanel.js~ControlPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/hppTable/controlPanel.js~ControlPanel#onRefresh",
    "access": "public",
    "description": "Устанавливаем обработчик события нажатия кнопки обновления.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, вызываемая при нажатии кнопки обновления."
      }
    ],
    "return": null
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "refresh",
    "memberof": "ka/components/tables/hppTable/controlPanel.js~ControlPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/hppTable/controlPanel.js~ControlPanel#refresh",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 437,
    "kind": "file",
    "name": "ka/components/tables/hppTable/index.js",
    "content": "import { ChannelPlanTable } from \"./ChannelPlanTable.js\"\r\nimport ControlPanel from \"./controlPanel.js\"\r\nimport LabelChannelTable from \"./LabelChannelTable.js\"\r\n\r\nconst hppTableModule = {\r\n    ChannelPlanTable,\r\n    LabelChannelTable,\r\n    ControlPanel\r\n}\r\n\r\nexport default hppTableModule",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/hppTable/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 438,
    "kind": "variable",
    "name": "hppTableModule",
    "memberof": "ka/components/tables/hppTable/index.js",
    "static": true,
    "longname": "ka/components/tables/hppTable/index.js~hppTableModule",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/hppTable/index.js",
    "importStyle": "hppTableModule",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"ChannelPlanTable\": *, \"LabelChannelTable\": *, \"ControlPanel\": *}"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "file",
    "name": "ka/components/tables/hppTable/ModalChannelPlan.js",
    "content": "/**\r\n * Класс для создания модального окна с таблицей Частотного-поляризационного плана.\r\n * \r\n * @class\r\n */\r\nexport class ModalChannelPlan {\r\n    /**\r\n     * Создает новый экземпляр класса ModalChannelPlan.\r\n     * \r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        // Создание элемента модального окна\r\n        this.modal = document.createElement('div');\r\n        this.modal.classList.add('modal-channel-plan');\r\n\r\n        // Установка содержимого модального окна\r\n        this.modal.innerHTML = `\r\n            <div class=\"modal-channel-plan__content\">\r\n                <span class=\"modal-channel-plan__close\">&times;</span>\r\n                <p id=\"modal-channel-plan__info\"></p>\r\n            </div>\r\n        `;\r\n\r\n        // Добавление обработчиков событий для закрытия модального окна\r\n        this.modal.querySelector('.modal-channel-plan__close').addEventListener('click', () => {\r\n            this.hide();\r\n        });\r\n\r\n        this.modal.addEventListener('click', (event) => {\r\n            if (event.target === this.modal) {\r\n                this.hide();\r\n            }\r\n        });\r\n\r\n        // Получение элемента для отображения информации в модальном окне\r\n        this.modalInfo = this.modal.querySelector('#modal-channel-plan__info');\r\n    }\r\n\r\n    /**\r\n     * Возвращает элемент модального окна.\r\n     * \r\n     * @returns {HTMLElement} Элемент модального окна.\r\n     */\r\n    getElement() {\r\n        return this.modal;\r\n    }\r\n\r\n    /**\r\n     * Отображает модальное окно с указанным содержимым.\r\n     * \r\n     * @param {string} content - Содержимое модального окна.\r\n     */\r\n    show(content) {\r\n        this.modalInfo.innerHTML = content;\r\n        this.modal.style.display = 'block';\r\n    }\r\n\r\n    /**\r\n     * Скрывает модальное окно.\r\n     */\r\n    hide() {\r\n        this.modal.style.display = 'none';\r\n    }\r\n}\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/hppTable/ModalChannelPlan.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 440,
    "kind": "class",
    "name": "ModalChannelPlan",
    "memberof": "ka/components/tables/hppTable/ModalChannelPlan.js",
    "static": true,
    "longname": "ka/components/tables/hppTable/ModalChannelPlan.js~ModalChannelPlan",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/hppTable/ModalChannelPlan.js",
    "importStyle": "{ModalChannelPlan}",
    "description": "Класс для создания модального окна с таблицей Частотного-поляризационного плана.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 441,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/tables/hppTable/ModalChannelPlan.js~ModalChannelPlan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/hppTable/ModalChannelPlan.js~ModalChannelPlan#constructor",
    "access": "public",
    "description": "Создает новый экземпляр класса ModalChannelPlan.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 442,
    "kind": "member",
    "name": "modal",
    "memberof": "ka/components/tables/hppTable/ModalChannelPlan.js~ModalChannelPlan",
    "static": false,
    "longname": "ka/components/tables/hppTable/ModalChannelPlan.js~ModalChannelPlan#modal",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "member",
    "name": "modalInfo",
    "memberof": "ka/components/tables/hppTable/ModalChannelPlan.js~ModalChannelPlan",
    "static": false,
    "longname": "ka/components/tables/hppTable/ModalChannelPlan.js~ModalChannelPlan#modalInfo",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "getElement",
    "memberof": "ka/components/tables/hppTable/ModalChannelPlan.js~ModalChannelPlan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/hppTable/ModalChannelPlan.js~ModalChannelPlan#getElement",
    "access": "public",
    "description": "Возвращает элемент модального окна.",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLElement} Элемент модального окна."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "Элемент модального окна."
    },
    "params": []
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "show",
    "memberof": "ka/components/tables/hppTable/ModalChannelPlan.js~ModalChannelPlan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/hppTable/ModalChannelPlan.js~ModalChannelPlan#show",
    "access": "public",
    "description": "Отображает модальное окно с указанным содержимым.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "Содержимое модального окна."
      }
    ],
    "return": null
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "hide",
    "memberof": "ka/components/tables/hppTable/ModalChannelPlan.js~ModalChannelPlan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/hppTable/ModalChannelPlan.js~ModalChannelPlan#hide",
    "access": "public",
    "description": "Скрывает модальное окно.",
    "lineNumber": 62,
    "params": [],
    "return": null
  },
  {
    "__docId__": 447,
    "kind": "file",
    "name": "ka/components/tables/RssIntervalsTable.js",
    "content": "import dateUtils from \"../../utils/dateUtils.js\";\r\nimport CallersIntervalsTable from \"./CallersIntervalsTable.js\";\r\n\r\n/**\r\n * Класс таблицы данных РСС.\r\n * Наследуется от CallersIntervalsTable.\r\n */\r\nexport default class RssIntervalsTable extends CallersIntervalsTable {\r\n\r\n    /**\r\n     * Конструктор класса.\r\n     * @param {string} selector - Селектор элемента, в котором будет размещена таблица.\r\n     */\r\n    constructor(selector) {\r\n        super(selector);\r\n\r\n        // Устанавливаем заголовки столбцов\r\n        this.columnNames.name = 'РСС: ';\r\n        this.columnNames.lat = 'Широта';\r\n        this.columnNames.lon = 'Долгота';\r\n        this.columnNames.height = 'Высота над ур.м.';\r\n        this.columnNames.azimuth = 'Направление, азимут';\r\n        this.columnNames.angle = 'Угол места';\r\n\r\n        // Устанавливаем префикс для названия РСС\r\n        this.namePrefix = this.columnNames.name;\r\n    }\r\n\r\n    /**\r\n     * Устанавливает данные в таблицу.\r\n     * @param {Array} data - Массив данных для таблицы. Каждый элемент массива представляет вызывающий объект.\r\n     * Каждый вызывающий объект представляет объект с двумя полями:\r\n     *  - `name: {string}` - имя вызывающего объекта\r\n     *  - `satellites_data: {Array}` - массив данных обмена данными с спутниками.\r\n     *    Каждый элемент данного массива представляет данные обмена данными с одним спутником и имеет два поля:\r\n     *     - `name: {string}` - имя спутника\r\n     *     - `datetime_period: {Array}` - массив данных обмена данными. Каждый элемент массива представляет данные обмена\r\n     *       данными и имеет следующие поля:\r\n     *        - `start_datetime_iso: {string}` - дата и время начала обмена в формате ISO\r\n     *        - `end_datetime_iso: {string}` - дата и время конца обмена в формате ISO\r\n     *        - `duration_in_sec: {number}` - длительность обмена в секундах\r\n     *        - `lat: {number}` - широта КА\r\n     *        - `lon: {number}` - долгота КА\r\n     *        - `height: {number}` - высота КА над ур.м.\r\n     *        - `angle: {number}` - угол места\r\n     *        - `azimuth: {number}` - азимут\r\n     */\r\n    setData(data) {\r\n        // Очищаем таблицу\r\n        this.clear();\r\n        // Проходим по каждому вызывающему объекту\r\n        for (const caller of data) {\r\n            // Извлекаем имя и данные спутников\r\n            const { name, satellites_data } = caller;\r\n\r\n            // Добавляем заголовок с названием вызывающего объекта\r\n            this.addHead(name);\r\n            // Проходим по каждому интервалу обмена данными с спутниками\r\n            for (const intervalData of satellites_data) {\r\n                // Извлекаем имя спутника и данные обмена данными\r\n                const { name: satellite_name, datetime_period } = intervalData;\r\n\r\n                for (const interval of datetime_period) {\r\n                    this.addRow(\r\n                        satellite_name, // Имя спутника\r\n                        new Date(interval.start_datetime_iso), // Начало обмена\r\n                        new Date(interval.end_datetime_iso), // Конец обмена\r\n                        interval.duration_in_sec, // Длительность обмена\r\n                        interval.lat,\r\n                        interval.lon,\r\n                        interval.height,\r\n                        interval.angle,\r\n                        interval.azimuth,\r\n                        interval\r\n                    );\r\n                    \r\n                    this.addData(\r\n                        name,\r\n                        satellite_name,\r\n                        interval.start_datetime_iso,\r\n                        interval.end_datetime_iso,\r\n                        interval.duration_in_sec,\r\n                        interval.lat,\r\n                        interval.lon,\r\n                        interval.height,\r\n                        interval.angle,\r\n                        interval.azimuth\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Добавляет строку в таблицу.\r\n     * @param {string} name - Имя РСС.\r\n     * @param {string} start - Время начала обмена данными.\r\n     * @param {string} end - Время окончания обмена данными.\r\n     * @param {number} interval - Продолжительность обмена данными в секундах.\r\n     * @param {number} lat - Широта КА.\r\n     * @param {number} lon - Долгота КА.\r\n     * @param {number} height - Высота КА над ур.м.\r\n     * @param {number} angle - Угол места.\r\n     * @param {number} azimuth - Азимут.\r\n     * @param {Object} data - Данные обмена данными.\r\n     */\r\n    addRow(name, start, end, interval, lat, lon, height, angle, azimuth, data) {\r\n\r\n        this.addHeadCell(this.nameKAColumn, name);\r\n        this.addCell('Наведение РСС:', '');\r\n        this.addCell('-Время', dateUtils.formatDisplayDateTime(start));\r\n        this.addCell('-Азимут, градус', azimuth.toFixed(3));\r\n        // this.addCell('-Азимут, градус', isNaN(azimuth) ? '0' : azimuth.toFixed(3));\r\n        // this.addCell('-Угол места, градус', isNaN(angle) ? '0' : angle.toFixed(3));\r\n        this.addCell('-Угол места, градус', angle.toFixed(3));\r\n        this.addCell('Вход в зону:', '');\r\n        this.addCell('-Время', dateUtils.formatDisplayDateTime(start));\r\n        this.addCell('-Широта КА, градус', lat.toFixed(6));\r\n        this.addCell('-Долгота КА, градус', lon.toFixed(6));\r\n        this.addCell('-Высота КА над ур.м., км', height.toFixed(3));\r\n        this.addCell('Выход из зоны:', dateUtils.formatDisplayDateTime(end));\r\n        this.addCell('Продолжительность:', dateUtils.secondsToHMS(interval));\r\n    }\r\n\r\n    /**\r\n     * Добавляет данные в таблицу.\r\n     * @param {string} name - Имя РСС.\r\n     * @param {string} satellite_name - Имя спутника.\r\n     * @param {string} start - Время начала обмена данными в формате ISO.\r\n     * @param {string} end - Время окончания обмена данными в формате ISO.\r\n     * @param {number} interval - Продолжительность обмена данными в секундах.\r\n     * @param {number} lat - Широта КА.\r\n     * @param {number} lon - Долгота КА.\r\n     * @param {number} height - Высота КА над ур.м.\r\n     * @param {number} angle - Угол места.\r\n     * @param {number} azimuth - Азимут.\r\n     */\r\n    addData(name, satellite_name, start, end, interval, lat, lon, height, angle, azimuth) {\r\n        super.addData(name, satellite_name, start, end, interval);\r\n        const lastData = this.data[this.data.length - 1];\r\n        lastData.lat = lat;\r\n        lastData.lon = lon;\r\n        lastData.height = height;\r\n        lastData.angle = angle;\r\n        lastData.azimuth = azimuth;\r\n    }\r\n\r\n\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/RssIntervalsTable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 448,
    "kind": "class",
    "name": "RssIntervalsTable",
    "memberof": "ka/components/tables/RssIntervalsTable.js",
    "static": true,
    "longname": "ka/components/tables/RssIntervalsTable.js~RssIntervalsTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/RssIntervalsTable.js",
    "importStyle": "RssIntervalsTable",
    "description": "Класс таблицы данных РСС.\nНаследуется от CallersIntervalsTable.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable"
    ]
  },
  {
    "__docId__": 449,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/tables/RssIntervalsTable.js~RssIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/RssIntervalsTable.js~RssIntervalsTable#constructor",
    "access": "public",
    "description": "Конструктор класса.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "Селектор элемента, в котором будет размещена таблица."
      }
    ]
  },
  {
    "__docId__": 450,
    "kind": "member",
    "name": "namePrefix",
    "memberof": "ka/components/tables/RssIntervalsTable.js~RssIntervalsTable",
    "static": false,
    "longname": "ka/components/tables/RssIntervalsTable.js~RssIntervalsTable#namePrefix",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "setData",
    "memberof": "ka/components/tables/RssIntervalsTable.js~RssIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/RssIntervalsTable.js~RssIntervalsTable#setData",
    "access": "public",
    "description": "Устанавливает данные в таблицу.",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Массив данных для таблицы. Каждый элемент массива представляет вызывающий объект.\nКаждый вызывающий объект представляет объект с двумя полями:\n - `name: {string}` - имя вызывающего объекта\n - `satellites_data: {Array}` - массив данных обмена данными с спутниками.\n   Каждый элемент данного массива представляет данные обмена данными с одним спутником и имеет два поля:\n    - `name: {string}` - имя спутника\n    - `datetime_period: {Array}` - массив данных обмена данными. Каждый элемент массива представляет данные обмена\n      данными и имеет следующие поля:\n       - `start_datetime_iso: {string}` - дата и время начала обмена в формате ISO\n       - `end_datetime_iso: {string}` - дата и время конца обмена в формате ISO\n       - `duration_in_sec: {number}` - длительность обмена в секундах\n       - `lat: {number}` - широта КА\n       - `lon: {number}` - долгота КА\n       - `height: {number}` - высота КА над ур.м.\n       - `angle: {number}` - угол места\n       - `azimuth: {number}` - азимут"
      }
    ],
    "return": null
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "addRow",
    "memberof": "ka/components/tables/RssIntervalsTable.js~RssIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/RssIntervalsTable.js~RssIntervalsTable#addRow",
    "access": "public",
    "description": "Добавляет строку в таблицу.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Имя РСС."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Время начала обмена данными."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Время окончания обмена данными."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "Продолжительность обмена данными в секундах."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lat",
        "description": "Широта КА."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lon",
        "description": "Долгота КА."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Высота КА над ур.м."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Угол места."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "azimuth",
        "description": "Азимут."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Данные обмена данными."
      }
    ],
    "return": null
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "addData",
    "memberof": "ka/components/tables/RssIntervalsTable.js~RssIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/RssIntervalsTable.js~RssIntervalsTable#addData",
    "access": "public",
    "description": "Добавляет данные в таблицу.",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Имя РСС."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "satellite_name",
        "description": "Имя спутника."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Время начала обмена данными в формате ISO."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Время окончания обмена данными в формате ISO."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "Продолжительность обмена данными в секундах."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lat",
        "description": "Широта КА."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lon",
        "description": "Долгота КА."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Высота КА над ур.м."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Угол места."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "azimuth",
        "description": "Азимут."
      }
    ],
    "return": null
  },
  {
    "__docId__": 454,
    "kind": "file",
    "name": "ka/components/tables/RssKallisionTable.js",
    "content": "import dateUtils from \"../../utils/dateUtils.js\";\r\nimport CallersIntervalsTable from \"./CallersIntervalsTable.js\";\r\n\r\n/**\r\n * Класс таблицы данных РСС.\r\n * Наследуется от CallersIntervalsTable.\r\n */\r\nexport default class RssKallisionTable extends CallersIntervalsTable {\r\n\r\n    /**\r\n     * Конструктор класса.\r\n     * @param {string} selector - Селектор элемента, в котором будет размещена таблица.\r\n     */\r\n    constructor(selector) {\r\n        \r\n        super(selector);\r\n        // Устанавливаем заголовки столбцов\r\n        this.columnNames.name = 'РСС: ';\r\n        this.columnNames.lat = 'Широта';\r\n        this.columnNames.lon = 'Долгота';\r\n        this.columnNames.height = 'Высота над ур.м.';\r\n        this.columnNames.azimuth = 'Направление, азимут';\r\n        this.columnNames.angle = 'Угол места';\r\n        this.columnNames.ka = 'Наименование КА';\r\n\r\n        // Устанавливаем префикс для названия РСС\r\n        this.namePrefix = this.columnNames.name;\r\n        this.nameKAColumn = this.columnNames.ka\r\n    }\r\n\r\n    setData(data) {\r\n        // Очищаем таблицу\r\n        this.clear();\r\n        const groupData = [];\r\n        data.forEach(seansRSS => {\r\n            const rssName = seansRSS.RSS_NAME; // Получаем KA_NAME\r\n            groupData[rssName] = groupData[rssName] || []; // Инициализируем массив, если его нет\r\n            groupData[rssName].push(seansRSS); // Добавляем seansRSS в соответствующую группу\r\n        });\r\n        \r\n        Object.entries(groupData).forEach(([rssName, seansList]) => {\r\n            this.addHead(rssName);\r\n            seansList.forEach(seansRSS => {\r\n                // Используем seansRSS для получения необходимых данных\r\n                this.addRow(\r\n                    seansRSS.KA_NAME, // Имя спутника\r\n                    new Date(seansRSS.Data_Time_In1), // Начало обмена\r\n                    new Date(seansRSS.Data_Time_Out), // Конец обмена\r\n                    (new Date(seansRSS.Data_Time_Out) - new Date(seansRSS.Data_Time_In1)) / 1000, // Длительность обмена в секундах\r\n                    seansRSS.Shirota_KA1, // Широта\r\n                    seansRSS.Dolgota_KA1, // Долгота\r\n                    seansRSS.H_KA1, // Высота\r\n                    seansRSS.UM1 , // Угол\r\n                    seansRSS.Azimut1, // Азимут\r\n                );\r\n            \r\n                // this.addData(\r\n                //     kaName, // Имя KA\r\n                //     seansRSS.KA_NAME, // Имя спутника\r\n                //     seansRSS.Data_Time_In1, // Начало обмена\r\n                //     seansRSS.Data_Time_Out, // Конец обмена\r\n                //     (new Date(seansRSS.Data_Time_Out) - new Date(seansRSS.Data_Time_In1)) / 1000, // Длительность обмена в секундах\r\n                //     seansRSS.Shirota_KA1, // Широта\r\n                //     seansRSS.Dolgota_KA1, // Долгота\r\n                //     seansRSS.H_KA1, // Высота\r\n                //     seansRSS.UM1, // Угол\r\n                //     seansRSS.Azimut1  // Азимут\r\n                // );\r\n            });\r\n            \r\n        })\r\n    }\r\n\r\n    /**\r\n     * Добавляет строку в таблицу.\r\n     * @param {string} name - Имя РСС.\r\n     * @param {string} start - Время начала обмена данными.\r\n     * @param {string} end - Время окончания обмена данными.\r\n     * @param {number} interval - Продолжительность обмена данными в секундах.\r\n     * @param {number} lat - Широта КА.\r\n     * @param {number} lon - Долгота КА.\r\n     * @param {number} height - Высота КА над ур.м.\r\n     * @param {number} angle - Угол места.\r\n     * @param {number} azimuth - Азимут.\r\n     * @param {Object} data - Данные обмена данными.\r\n     */\r\n    addRow(name, start, end, interval, lat, lon, height, angle, azimuth) {\r\n\r\n        this.addHeadCell(this.nameKAColumn, name);\r\n        this.addCell('Наведение РСС:', '');\r\n        this.addCell('-Время', dateUtils.formatDisplayDateTime(start));\r\n        this.addCell('-Азимут, градус', azimuth.toFixed(3));\r\n        // this.addCell('-Азимут, градус', isNaN(azimuth) ? '0' : azimuth.toFixed(3));\r\n        // this.addCell('-Угол места, градус', isNaN(angle) ? '0' : angle.toFixed(3));\r\n        this.addCell('-Угол места, градус', angle.toFixed(3));\r\n        this.addCell('Вход в зону:', '');\r\n        this.addCell('-Время', dateUtils.formatDisplayDateTime(start));\r\n        this.addCell('-Широта КА, градус', lat.toFixed(6));\r\n        this.addCell('-Долгота КА, градус', lon.toFixed(6));\r\n        this.addCell('-Высота КА над ур.м., км', height.toFixed(3));\r\n        this.addCell('Выход из зоны:', dateUtils.formatDisplayDateTime(end));\r\n        this.addCell('Продолжительность:', dateUtils.secondsToHMS(interval));\r\n    }\r\n\r\n    /**\r\n     * Добавляет данные в таблицу.\r\n     * @param {string} name - Имя РСС.\r\n     * @param {string} satellite_name - Имя спутника.\r\n     * @param {string} start - Время начала обмена данными в формате ISO.\r\n     * @param {string} end - Время окончания обмена данными в формате ISO.\r\n     * @param {number} interval - Продолжительность обмена данными в секундах.\r\n     * @param {number} lat - Широта КА.\r\n     * @param {number} lon - Долгота КА.\r\n     * @param {number} height - Высота КА над ур.м.\r\n     * @param {number} angle - Угол места.\r\n     * @param {number} azimuth - Азимут.\r\n     */\r\n    addData(name, satellite_name, start, end, interval, lat, lon, height, angle, azimuth) {\r\n        super.addData(name, satellite_name, start, end, interval);\r\n        const lastData = this.data[this.data.length - 1];\r\n        lastData.lat = lat;\r\n        lastData.lon = lon;\r\n        lastData.height = height;\r\n        lastData.angle = angle;\r\n        lastData.azimuth = azimuth;\r\n    }\r\n\r\n\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/RssKallisionTable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 455,
    "kind": "class",
    "name": "RssKallisionTable",
    "memberof": "ka/components/tables/RssKallisionTable.js",
    "static": true,
    "longname": "ka/components/tables/RssKallisionTable.js~RssKallisionTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/RssKallisionTable.js",
    "importStyle": "RssKallisionTable",
    "description": "Класс таблицы данных РСС.\nНаследуется от CallersIntervalsTable.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable"
    ]
  },
  {
    "__docId__": 456,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/tables/RssKallisionTable.js~RssKallisionTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/RssKallisionTable.js~RssKallisionTable#constructor",
    "access": "public",
    "description": "Конструктор класса.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "Селектор элемента, в котором будет размещена таблица."
      }
    ]
  },
  {
    "__docId__": 457,
    "kind": "member",
    "name": "namePrefix",
    "memberof": "ka/components/tables/RssKallisionTable.js~RssKallisionTable",
    "static": false,
    "longname": "ka/components/tables/RssKallisionTable.js~RssKallisionTable#namePrefix",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "member",
    "name": "nameKAColumn",
    "memberof": "ka/components/tables/RssKallisionTable.js~RssKallisionTable",
    "static": false,
    "longname": "ka/components/tables/RssKallisionTable.js~RssKallisionTable#nameKAColumn",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "setData",
    "memberof": "ka/components/tables/RssKallisionTable.js~RssKallisionTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/RssKallisionTable.js~RssKallisionTable#setData",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "addRow",
    "memberof": "ka/components/tables/RssKallisionTable.js~RssKallisionTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/RssKallisionTable.js~RssKallisionTable#addRow",
    "access": "public",
    "description": "Добавляет строку в таблицу.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Имя РСС."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Время начала обмена данными."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Время окончания обмена данными."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "Продолжительность обмена данными в секундах."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lat",
        "description": "Широта КА."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lon",
        "description": "Долгота КА."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Высота КА над ур.м."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Угол места."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "azimuth",
        "description": "Азимут."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Данные обмена данными."
      }
    ],
    "return": null
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "addData",
    "memberof": "ka/components/tables/RssKallisionTable.js~RssKallisionTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/RssKallisionTable.js~RssKallisionTable#addData",
    "access": "public",
    "description": "Добавляет данные в таблицу.",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Имя РСС."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "satellite_name",
        "description": "Имя спутника."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Время начала обмена данными в формате ISO."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Время окончания обмена данными в формате ISO."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "Продолжительность обмена данными в секундах."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lat",
        "description": "Широта КА."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lon",
        "description": "Долгота КА."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Высота КА над ур.м."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Угол места."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "azimuth",
        "description": "Азимут."
      }
    ],
    "return": null
  },
  {
    "__docId__": 462,
    "kind": "file",
    "name": "ka/components/tables/RssNewIntervalsTable.js",
    "content": "import dateUtils from \"../../utils/dateUtils.js\";\r\nimport CallersIntervalsTable from \"./CallersIntervalsTable.js\";\r\n\r\n/**\r\n * Класс таблицы данных РСС.\r\n * Наследуется от CallersIntervalsTable.\r\n */\r\nexport default class RssNewIntervalsTable extends CallersIntervalsTable {\r\n\r\n    /**\r\n     * Конструктор класса.\r\n     * @param {string} selector - Селектор элемента, в котором будет размещена таблица.\r\n     */\r\n    constructor(selector) {\r\n        \r\n        super(selector);\r\n        // Устанавливаем заголовки столбцов\r\n        this.columnNames.name = 'КА: ';\r\n        this.columnNames.lat = 'Широта';\r\n        this.columnNames.lon = 'Долгота';\r\n        this.columnNames.height = 'Высота над ур.м.';\r\n        this.columnNames.azimuth = 'Направление, азимут';\r\n        this.columnNames.angle = 'Угол места';\r\n        this.columnNames.ka = 'Наименование РСС';\r\n\r\n        // Устанавливаем префикс для названия РСС\r\n        this.namePrefix = this.columnNames.name;\r\n        this.nameKAColumn = this.columnNames.ka\r\n    }\r\n    \r\n    setData(data) {\r\n        // Очищаем таблицу\r\n        this.clear();\r\n        const groupData = [];\r\n        data.forEach(seansRSS => {\r\n            const kaName = seansRSS.KA_NAME; // Получаем KA_NAME\r\n            groupData[kaName] = groupData[kaName] || []; // Инициализируем массив, если его нет\r\n            groupData[kaName].push(seansRSS); // Добавляем seansRSS в соответствующую группу\r\n        });\r\n        \r\n        Object.entries(groupData).forEach(([kaName, seansList]) => {\r\n            this.addHead(kaName);\r\n            seansList.forEach(seansRSS => {\r\n                // Используем seansRSS для получения необходимых данных\r\n                this.addRow(\r\n                    seansRSS.RSS_NAME, // Имя спутника\r\n                    new Date(seansRSS.Data_Time_In1), // Начало обмена\r\n                    new Date(seansRSS.Data_Time_Out), // Конец обмена\r\n                    (new Date(seansRSS.Data_Time_Out) - new Date(seansRSS.Data_Time_In1)) / 1000, // Длительность обмена в секундах\r\n                    seansRSS.Shirota_KA1, // Широта\r\n                    seansRSS.Dolgota_KA1, // Долгота\r\n                    seansRSS.H_KA1, // Высота\r\n                    seansRSS.UM1 , // Угол\r\n                    seansRSS.Azimut1, // Азимут\r\n                );\r\n            \r\n                this.addData(\r\n                    kaName, // Имя KA\r\n                    seansRSS.RSS_NAME, // Имя спутника\r\n                    seansRSS.Data_Time_In1, // Начало обмена\r\n                    seansRSS.Data_Time_Out, // Конец обмена\r\n                    (new Date(seansRSS.Data_Time_Out) - new Date(seansRSS.Data_Time_In1)) / 1000, // Длительность обмена в секундах\r\n                    seansRSS.Shirota_KA1, // Широта\r\n                    seansRSS.Dolgota_KA1, // Долгота\r\n                    seansRSS.H_KA1, // Высота\r\n                    seansRSS.UM1, // Угол\r\n                    seansRSS.Azimut1  // Азимут\r\n                );\r\n            });\r\n            \r\n        })\r\n    }\r\n\r\n    /**\r\n     * Добавляет строку в таблицу.\r\n     * @param {string} name - Имя РСС.\r\n     * @param {string} start - Время начала обмена данными.\r\n     * @param {string} end - Время окончания обмена данными.\r\n     * @param {number} interval - Продолжительность обмена данными в секундах.\r\n     * @param {number} lat - Широта КА.\r\n     * @param {number} lon - Долгота КА.\r\n     * @param {number} height - Высота КА над ур.м.\r\n     * @param {number} angle - Угол места.\r\n     * @param {number} azimuth - Азимут.\r\n     * @param {Object} data - Данные обмена данными.\r\n     */\r\n    addRow(name, start, end, interval, lat, lon, height, angle, azimuth) {\r\n\r\n        this.addHeadCell(this.nameKAColumn, name);\r\n        this.addCell('Наведение РСС:', '');\r\n        this.addCell('-Время', dateUtils.formatDisplayDateTime(start));\r\n        this.addCell('-Азимут, градус', azimuth.toFixed(3));\r\n        // this.addCell('-Азимут, градус', isNaN(azimuth) ? '0' : azimuth.toFixed(3));\r\n        // this.addCell('-Угол места, градус', isNaN(angle) ? '0' : angle.toFixed(3));\r\n        this.addCell('-Угол места, градус', angle.toFixed(3));\r\n        this.addCell('Вход в зону:', '');\r\n        this.addCell('-Время', dateUtils.formatDisplayDateTime(start));\r\n        this.addCell('-Широта КА, градус', lat.toFixed(6));\r\n        this.addCell('-Долгота КА, градус', lon.toFixed(6));\r\n        this.addCell('-Высота КА над ур.м., км', height.toFixed(3));\r\n        this.addCell('Выход из зоны:', dateUtils.formatDisplayDateTime(end));\r\n        this.addCell('Продолжительность:', dateUtils.secondsToHMS(interval));\r\n    }\r\n\r\n    /**\r\n     * Добавляет данные в таблицу.\r\n     * @param {string} name - Имя РСС.\r\n     * @param {string} satellite_name - Имя спутника.\r\n     * @param {string} start - Время начала обмена данными в формате ISO.\r\n     * @param {string} end - Время окончания обмена данными в формате ISO.\r\n     * @param {number} interval - Продолжительность обмена данными в секундах.\r\n     * @param {number} lat - Широта КА.\r\n     * @param {number} lon - Долгота КА.\r\n     * @param {number} height - Высота КА над ур.м.\r\n     * @param {number} angle - Угол места.\r\n     * @param {number} azimuth - Азимут.\r\n     */\r\n    addData(name, satellite_name, start, end, interval, lat, lon, height, angle, azimuth) {\r\n        super.addData(name, satellite_name, start, end, interval);\r\n        const lastData = this.data[this.data.length - 1];\r\n        lastData.lat = lat;\r\n        lastData.lon = lon;\r\n        lastData.height = height;\r\n        lastData.angle = angle;\r\n        lastData.azimuth = azimuth;\r\n    }\r\n\r\n\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/RssNewIntervalsTable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 463,
    "kind": "class",
    "name": "RssNewIntervalsTable",
    "memberof": "ka/components/tables/RssNewIntervalsTable.js",
    "static": true,
    "longname": "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/RssNewIntervalsTable.js",
    "importStyle": "RssNewIntervalsTable",
    "description": "Класс таблицы данных РСС.\nНаследуется от CallersIntervalsTable.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable"
    ]
  },
  {
    "__docId__": 464,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable#constructor",
    "access": "public",
    "description": "Конструктор класса.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "Селектор элемента, в котором будет размещена таблица."
      }
    ]
  },
  {
    "__docId__": 465,
    "kind": "member",
    "name": "namePrefix",
    "memberof": "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable",
    "static": false,
    "longname": "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable#namePrefix",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "member",
    "name": "nameKAColumn",
    "memberof": "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable",
    "static": false,
    "longname": "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable#nameKAColumn",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "setData",
    "memberof": "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable#setData",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "addRow",
    "memberof": "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable#addRow",
    "access": "public",
    "description": "Добавляет строку в таблицу.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Имя РСС."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Время начала обмена данными."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Время окончания обмена данными."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "Продолжительность обмена данными в секундах."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lat",
        "description": "Широта КА."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lon",
        "description": "Долгота КА."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Высота КА над ур.м."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Угол места."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "azimuth",
        "description": "Азимут."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Данные обмена данными."
      }
    ],
    "return": null
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "addData",
    "memberof": "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable#addData",
    "access": "public",
    "description": "Добавляет данные в таблицу.",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Имя РСС."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "satellite_name",
        "description": "Имя спутника."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Время начала обмена данными в формате ISO."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Время окончания обмена данными в формате ISO."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "Продолжительность обмена данными в секундах."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lat",
        "description": "Широта КА."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lon",
        "description": "Долгота КА."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Высота КА над ур.м."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Угол места."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "azimuth",
        "description": "Азимут."
      }
    ],
    "return": null
  },
  {
    "__docId__": 470,
    "kind": "file",
    "name": "ka/components/tables/ZanRssTable/ControlZanRssTable.js",
    "content": "import dateUtils from \"../../../utils/dateUtils.js\";\r\n\r\nexport default class ControlZanRssTable {\r\n    constructor(selector, table) {\r\n        this.element = document.querySelector(selector);\r\n        this.table = table;\r\n        \r\n        const html = `\r\n            <div class=\"control-zan-rss-table\">\r\n                <!-- Блок диапазона времени -->\r\n                <div class=\"control-zan-rss-table__range\">\r\n                    <span class=\"control-zan-rss-table__time-label\">От:</span>\r\n                    <span class=\"control-zan-rss-table__time-min\">00.00.0000 00:00:00</span>\r\n                    <span class=\"control-zan-rss-table__time-label\">До:</span>\r\n                    <span class=\"control-zan-rss-table__time-max\">00.00.0000 00:00:00</span>\r\n                </div>\r\n                \r\n                <!-- Блок текущего времени -->\r\n                <div class=\"control-zan-rss-table__current\">\r\n                    <span class=\"control-zan-rss-table__time-label\">Текущее время:</span>\r\n                    <span class=\"control-zan-rss-table__time-current\"> 00.00.0000 00:00:00</span>\r\n                </div>\r\n\r\n                <!-- Ползунок -->\r\n                <div class=\"control-zan-rss-table__slider-container\">\r\n                    <input class=\"control-zan-rss-table__time-slider\" type=\"range\" min=\"0\" max=\"100\" step=\"1000\" />\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        this.element.innerHTML = html;\r\n\r\n        this.slider = this.element.querySelector('.control-zan-rss-table__time-slider');\r\n        this.timeMin = this.element.querySelector('.control-zan-rss-table__time-min');\r\n        this.timeMax = this.element.querySelector('.control-zan-rss-table__time-max');\r\n        this.timeCurrent = this.element.querySelector('.control-zan-rss-table__time-current');\r\n\r\n        this.isCreated = false;\r\n    }\r\n\r\n    create(start, end, func) {\r\n        this.slider.min = start;\r\n        this.slider.max = end;\r\n\r\n        this.slider.value = start;\r\n        this.setTime(start, end);\r\n        func(start);\r\n\r\n        this.slider.onchange = () => {\r\n            const currentDate = new Date(parseInt(this.slider.value));\r\n            func(currentDate);\r\n            this.setTimeCurrent(currentDate);\r\n        }\r\n\r\n        this.isCreated = true;\r\n    }  \r\n\r\n    setTime(start, end) {\r\n        this.timeMin.innerHTML = dateUtils.formatDisplayDateTime(start);\r\n        this.timeMax.innerHTML = dateUtils.formatDisplayDateTime(end);\r\n\r\n        this.slider.min = start.getTime();\r\n        this.slider.max = end.getTime();\r\n    }\r\n\r\n    setTimeCurrent(time) {\r\n        this.timeCurrent.innerHTML = dateUtils.formatDisplayDateTime(time);\r\n    }\r\n\r\n    clear() {\r\n        this.slider.value = 0;\r\n        this.timeMin.innerHTML = '00.00.0000 00:00:00';\r\n        this.timeMax.innerHTML = '00.00.0000 00:00:00';\r\n        this.timeCurrent.innerHTML = 'Текущее время: 00.00.0000 00:00:00';\r\n        this.slider.onchange = null;\r\n\r\n        this.isCreated = false;\r\n    }\r\n\r\n}",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/tables/ZanRssTable/ControlZanRssTable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 471,
    "kind": "class",
    "name": "ControlZanRssTable",
    "memberof": "ka/components/tables/ZanRssTable/ControlZanRssTable.js",
    "static": true,
    "longname": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/tables/ZanRssTable/ControlZanRssTable.js",
    "importStyle": "ControlZanRssTable",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 472,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 473,
    "kind": "member",
    "name": "element",
    "memberof": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable",
    "static": false,
    "longname": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable#element",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "member",
    "name": "table",
    "memberof": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable",
    "static": false,
    "longname": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable#table",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "member",
    "name": "slider",
    "memberof": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable",
    "static": false,
    "longname": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable#slider",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 476,
    "kind": "member",
    "name": "timeMin",
    "memberof": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable",
    "static": false,
    "longname": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable#timeMin",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "member",
    "name": "timeMax",
    "memberof": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable",
    "static": false,
    "longname": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable#timeMax",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 478,
    "kind": "member",
    "name": "timeCurrent",
    "memberof": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable",
    "static": false,
    "longname": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable#timeCurrent",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "member",
    "name": "isCreated",
    "memberof": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable",
    "static": false,
    "longname": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable#isCreated",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "create",
    "memberof": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable#create",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      },
      {
        "name": "func",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "setTime",
    "memberof": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable#setTime",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "setTimeCurrent",
    "memberof": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable#setTimeCurrent",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "time",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "clear",
    "memberof": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable#clear",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 486,
    "kind": "file",
    "name": "ka/components/timer/Timer.js",
    "content": "import dateUtils from \"../../utils/dateUtils.js\";\r\n\r\n/**\r\n * Класс Timer для отображения текущего времени на странице\r\n */\r\nexport default class Timer {\r\n    /**\r\n     * Конструктор класса Timer\r\n     * @param {string} selector - селектор элемента, на котором будет отображаться время\r\n     */\r\n    constructor(selector) {\r\n        // Получаем ссылку на элемент, на котором будет отображаться время\r\n        this.element = document.querySelector(selector);\r\n        // Устанавливаем начальное время\r\n        this.currentDate = new Date();\r\n        // Устанавливаем период обновления времени в мс\r\n        this.delay = 1000;\r\n        // Создаем интервал обновления времени\r\n        this.intervalId = setInterval(() => this.updateTimer(), this.delay);\r\n    }\r\n\r\n    /**\r\n     * Обновление времени на странице\r\n     */\r\n    updateTimer() {\r\n        // Обновляем текущее время\r\n        this.currentDate = new Date();\r\n        // Форматируем текущее время в строку для отображения на странице\r\n        const formattedDate = dateUtils.formatDisplayDateTime(this.currentDate);\r\n        // Устанавливаем текст элемента с отображением времени\r\n        this.element.textContent = formattedDate;\r\n    }\r\n}\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/timer/Timer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 487,
    "kind": "class",
    "name": "Timer",
    "memberof": "ka/components/timer/Timer.js",
    "static": true,
    "longname": "ka/components/timer/Timer.js~Timer",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/timer/Timer.js",
    "importStyle": "Timer",
    "description": "Класс Timer для отображения текущего времени на странице",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 488,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/timer/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/timer/Timer.js~Timer#constructor",
    "access": "public",
    "description": "Конструктор класса Timer",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "селектор элемента, на котором будет отображаться время"
      }
    ]
  },
  {
    "__docId__": 489,
    "kind": "member",
    "name": "element",
    "memberof": "ka/components/timer/Timer.js~Timer",
    "static": false,
    "longname": "ka/components/timer/Timer.js~Timer#element",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 490,
    "kind": "member",
    "name": "currentDate",
    "memberof": "ka/components/timer/Timer.js~Timer",
    "static": false,
    "longname": "ka/components/timer/Timer.js~Timer#currentDate",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 491,
    "kind": "member",
    "name": "delay",
    "memberof": "ka/components/timer/Timer.js~Timer",
    "static": false,
    "longname": "ka/components/timer/Timer.js~Timer#delay",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 492,
    "kind": "member",
    "name": "intervalId",
    "memberof": "ka/components/timer/Timer.js~Timer",
    "static": false,
    "longname": "ka/components/timer/Timer.js~Timer#intervalId",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "updateTimer",
    "memberof": "ka/components/timer/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/timer/Timer.js~Timer#updateTimer",
    "access": "public",
    "description": "Обновление времени на странице",
    "lineNumber": 25,
    "params": [],
    "return": null
  },
  {
    "__docId__": 495,
    "kind": "file",
    "name": "ka/components/timer/TimerManagment.js",
    "content": "import dateUtils from \"../../utils/dateUtils.js\";\r\n\r\nexport default class ThemerManagment {\r\n  constructor() {\r\n    this.timerElements = [];\r\n    // Устанавливаем начальное время\r\n    this.currentDate = new Date();\r\n    // Устанавливаем период обновления времени в мс\r\n    this.delay = 1000;\r\n    // Создаем интервал обновления времени\r\n    this.intervalId = setInterval(() => this.updateTimer(), this.delay);\r\n  }\r\n\r\n  /**\r\n   * Добавляет элемент таймера в массив элементов таймера\r\n   *\r\n   * @param {HTMLDivElement|string} element - Элемент таймера, который нужно добавить.\r\n   * @param {HTMLDivElement|string} element - Элемент таймера, который нужно добавить.\r\n   * Это может быть либо HTMLDivElement, либо строка, представляющая селектор.\r\n   * @throws {Error} - Выбрасывает ошибку, если элемент не найден.\r\n   * @return {number} - Возвращает длину массива timerElements после добавления.\r\n   */\r\n  addTimerElement(element) {\r\n    const timerElement =\r\n      typeof element === \"string\" ? document.querySelector(element) : element;\r\n    if (!timerElement) throw new Error(`Элемент не найден ${element}`);\r\n    return this.timerElements.push(timerElement);\r\n  }\r\n\r\n  /**\r\n   * Обновляет время на всех элементах таймера\r\n   */\r\n  updateTimer() {\r\n    // Обновляем текущее время\r\n    this.currentDate = new Date();\r\n    // Обновляем время на каждом элементе таймера\r\n    this.timerElements.forEach((elem) => {\r\n        const formattedDate = dateUtils.formatDisplayDateTime(this.currentDate);\r\n        elem.textContent = formattedDate;\r\n      });\r\n  }\r\n\r\n  \r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/components/timer/TimerManagment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 496,
    "kind": "class",
    "name": "ThemerManagment",
    "memberof": "ka/components/timer/TimerManagment.js",
    "static": true,
    "longname": "ka/components/timer/TimerManagment.js~ThemerManagment",
    "access": "public",
    "export": true,
    "importPath": "./ka/components/timer/TimerManagment.js",
    "importStyle": "ThemerManagment",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 497,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/components/timer/TimerManagment.js~ThemerManagment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/timer/TimerManagment.js~ThemerManagment#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 498,
    "kind": "member",
    "name": "timerElements",
    "memberof": "ka/components/timer/TimerManagment.js~ThemerManagment",
    "static": false,
    "longname": "ka/components/timer/TimerManagment.js~ThemerManagment#timerElements",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 499,
    "kind": "member",
    "name": "currentDate",
    "memberof": "ka/components/timer/TimerManagment.js~ThemerManagment",
    "static": false,
    "longname": "ka/components/timer/TimerManagment.js~ThemerManagment#currentDate",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "member",
    "name": "delay",
    "memberof": "ka/components/timer/TimerManagment.js~ThemerManagment",
    "static": false,
    "longname": "ka/components/timer/TimerManagment.js~ThemerManagment#delay",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 501,
    "kind": "member",
    "name": "intervalId",
    "memberof": "ka/components/timer/TimerManagment.js~ThemerManagment",
    "static": false,
    "longname": "ka/components/timer/TimerManagment.js~ThemerManagment#intervalId",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "addTimerElement",
    "memberof": "ka/components/timer/TimerManagment.js~ThemerManagment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/timer/TimerManagment.js~ThemerManagment#addTimerElement",
    "access": "public",
    "description": "Добавляет элемент таймера в массив элементов таймера",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLDivElement",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "Элемент таймера, который нужно добавить."
      },
      {
        "nullable": null,
        "types": [
          "HTMLDivElement",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "Элемент таймера, который нужно добавить.\nЭто может быть либо HTMLDivElement, либо строка, представляющая селектор."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Возвращает длину массива timerElements после добавления."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Выбрасывает ошибку, если элемент не найден."
      }
    ]
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "updateTimer",
    "memberof": "ka/components/timer/TimerManagment.js~ThemerManagment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/components/timer/TimerManagment.js~ThemerManagment#updateTimer",
    "access": "public",
    "description": "Обновляет время на всех элементах таймера",
    "lineNumber": 33,
    "params": [],
    "return": null
  },
  {
    "__docId__": 505,
    "kind": "file",
    "name": "ka/index.js",
    "content": "// import API from \"../../api_v2/index.js\";\r\nimport { kaTable, callerGeoTable, callersIntervalsTable, archiveTablePanel } from \"./modules/tables/tables.js\";\r\n// import { KaApi } from \"./api/kaApi.js\";\r\nimport { pages } from \"./modules/pages/pages.js\";\r\nimport { GLOBAL_PERIOD, KA_SELECTS, RSS_SELECTS, SEANCE, MAP } from \"./modules/state/state.js\";\r\n// import Timer from \"./components/timer/Timer.js\";\r\nimport SideElement from \"./components/side/SideElement.js\";\r\nimport ThemerManagment from \"./components/timer/TimerManagment.js\";\r\nimport \"./modules/map/mapHandler.js\";\r\nimport './modules/state/handlerState.js';\r\nimport './modules/reports/reports.js';\r\nimport './modules/user/user.js';\r\nimport { animate } from \"./modules/animations/animations.js\";\r\nimport { callersDiagramGant, sessionsDiagramGant, callersDiagramGant2, generalDiagramGant } from \"./modules/diagrams/diagrams.js\";\r\nimport { trajInfoBlock } from \"./modules/infoBlocks/infoBlocks.js\";\r\nimport { modalKA, modalSession, modalSettings, modalAllSession, modalNotification, modalPopNotifs } from \"./modules/modals/modals.js\";\r\nimport { showTrajectory, showAnimation, showLoadSession, showRss, clearAll, showRssLoadSession, showRssZan, showRssPlanAnten, showKolision } from \"./modules/action/action.js\";\r\n\r\nimport { interval } from \"./modules/monitoring/monitoring.js\";\r\nimport { downloadElement } from \"./modules/saveScreen/saveScreen.js\";\r\nimport { AuthApi } from \"./api/authApi.js\";\r\n\r\n// Загрузка сессии\r\n// Загрузка происходит после загрузки всех компонентов\r\npages.loadSession()\r\n\r\nconst timerManagment = new ThemerManagment();\r\ntimerManagment.addTimerElement('#time');\r\ntimerManagment.addTimerElement('#modalShowRSS .timer');\r\ntimerManagment.addTimerElement('#modalShowCellers .timer');\r\ntimerManagment.addTimerElement('#modalShowFreeKaTable .timer');\r\ntimerManagment.addTimerElement('#modalWindowGraphKaRssGroup .timer');\r\ntimerManagment.addTimerElement('#modalWindowGraphSecond .timer');\r\ntimerManagment.addTimerElement('#modalCHP_OCHR .timer');\r\ntimerManagment.addTimerElement('#modal-show-active-seans .timer');\r\ntimerManagment.addTimerElement('#modal-show-archive-seans .timer');\r\ntimerManagment.addTimerElement('#modal-show-KSYS .timer');\r\ntimerManagment.addTimerElement('#modal-show-rss-plan-anten .timer');\r\n\r\n// modalShowCellers\r\n// modalShowFreeKaTable\r\n// modalWindowGraphKaRssGroup\r\n// modalWindowGraphSecond\r\n// modalCHP_OCHR\r\n\r\n// Работа боковой панели - закрытие / открытие\r\nconst leftPanel = new SideElement('.left-panels');\r\nconst rightPanel = new SideElement('.right-panels');\r\n\r\n// Привязываем обработчик события клика к кнопке \"Отображение траектории\"\r\n// При клике на кнопку проверяется, выбраны ли объекты на карте\r\n// Если объекты выбраны, то вызывается функция showTrajectory для отображения траектории\r\n// Если объекты не выбраны, то выход из функции\r\nconst btnShowTrajectory = document.querySelector('#btn-parameters-2');\r\nbtnShowTrajectory.addEventListener('click', () => {\r\n    if (!KA_SELECTS.isSelect) return; // Если объекты не выбраны, то выходим из функции\r\n    showTrajectory(KA_SELECTS.ids, GLOBAL_PERIOD.start, GLOBAL_PERIOD.end, MAP.stepTrajectory); // Вызываем функцию для отображения траектории\r\n});\r\n\r\n// Отображение анимации\r\n// При клике на кнопку проверяется, выбраны ли объекты на карте\r\n// Если объекты выбраны, то кликаем по кнопке \"Отображение траектории\", после чего вызывается функция showAnimation для отображения анимации\r\nconst btnShowAnimation = document.getElementById('btn-parameters-1');\r\nbtnShowAnimation.addEventListener('click', async () => {\r\n    if (!KA_SELECTS.isSelect) return; // Если объекты не выбраны, то выходим из функции\r\n    // btnShowTrajectory.click(); // Кликаем по кнопке \"Отображение траектории\"\r\n    await showTrajectory(KA_SELECTS.ids, GLOBAL_PERIOD.start, GLOBAL_PERIOD.end, MAP.stepTrajectory);\r\n    await showAnimation(KA_SELECTS.ids, GLOBAL_PERIOD.start, GLOBAL_PERIOD.end); // Вызываем функцию для отображения анимации\r\n});\r\n\r\n// Отображение сеанса загрузки\r\n// При клике на кнопку вызывается функция showLoadSession для отображения сеанса загрузки\r\nconst btnShowLoadSession = document.getElementById('btn-param-3-display');\r\nbtnShowLoadSession.addEventListener('click', () => {\r\n    showLoadSession(KA_SELECTS.ids, GLOBAL_PERIOD.start, GLOBAL_PERIOD.end, SEANCE.step, parseInt((GLOBAL_PERIOD.end.getTime() - GLOBAL_PERIOD.start.getTime()) / 60 / 1000)); // Вызываем функцию для отображения сеанса загрузки\r\n});\r\n\r\n// Отображение РСС\r\n// При клике на кнопку проверяется, выбраны ли РСС на карте\r\n// Если РСС выбраны, то вызывается функция showRss для отображения РСС\r\nconst btnShowRss = document.getElementById('btn-param-6-display');\r\nbtnShowRss.addEventListener('click', () => {\r\n    if (!RSS_SELECTS.isSelect) return; // Если РСС не выбраны, то выходим из функции\r\n    showRss(RSS_SELECTS.ids); // Вызываем функцию для отображения РСС\r\n});\r\n\r\n// Очистка карты\r\n// При клике на кнопку вызывается функция clearAll для очистки карты\r\nconst btnClearAll = document.getElementById('clearMapButton');\r\nbtnClearAll.addEventListener('click', () => {\r\n    clearAll(); // Вызываем функцию для очистки карты\r\n});\r\n\r\n// Отображение РСС и сеанса загрузки\r\n// При клике на кнопку вызывается функция showRssLoadSession для отображения РСС и сеанса загрузки\r\nconst btnShowRssLoadSession = document.getElementById('btn-param-8-display');\r\nbtnShowRssLoadSession.addEventListener('click', () => {\r\n    showRssLoadSession(KA_SELECTS.ids, RSS_SELECTS.ids, GLOBAL_PERIOD.start, GLOBAL_PERIOD.end, SEANCE.step, parseInt((GLOBAL_PERIOD.end.getTime() - GLOBAL_PERIOD.start.getTime()) / 60 / 1000)); // Вызываем функцию для отображения РСС и сеанса загрузки\r\n});\r\n\r\n// Отображение активных сеансов\r\n// При клике на кнопку вызывается функция showActiveSeans для отображения активных сеансов\r\nconst btnShowActiveSeans = document.getElementById('btn-param-100-display');\r\nbtnShowActiveSeans.addEventListener('click', () => {\r\n    showRssPlanAnten(KA_SELECTS.ids, RSS_SELECTS.ids, GLOBAL_PERIOD.start, GLOBAL_PERIOD.end, SEANCE.step, parseInt((GLOBAL_PERIOD.end.getTime() - GLOBAL_PERIOD.start.getTime()) / 60 / 1000)); // Вызываем функцию для отображения РСС и сеанса загрузки\r\n});\r\n\r\n\r\nconst btnShowZanAntenRss = document.getElementById('btn-param-19-display');\r\nbtnShowZanAntenRss.addEventListener('click', () => {\r\n    showRssZan(\r\n        KA_SELECTS.ids, RSS_SELECTS.ids,\r\n        GLOBAL_PERIOD.start, GLOBAL_PERIOD.end, SEANCE.step,\r\n        parseInt((GLOBAL_PERIOD.end.getTime() - GLOBAL_PERIOD.start.getTime()) / 60 / 1000),\r\n    );\r\n});\r\n\r\nconst btnShowKolision = document.querySelector('#panel-parameters-20 .calculate')\r\nbtnShowKolision.addEventListener('click', () => {\r\n    showKolision(KA_SELECTS.ids, RSS_SELECTS.ids, GLOBAL_PERIOD.start, GLOBAL_PERIOD.end, SEANCE.step, parseInt((GLOBAL_PERIOD.end.getTime() - GLOBAL_PERIOD.start.getTime()) / 60 / 1000)); // Вызываем функцию для отображения РСС и сеанса загрузки\r\n});",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 506,
    "kind": "variable",
    "name": "timerManagment",
    "memberof": "ka/index.js",
    "static": true,
    "longname": "ka/index.js~timerManagment",
    "access": "public",
    "export": false,
    "importPath": "./ka/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/timer/TimerManagment.js~ThemerManagment"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 507,
    "kind": "variable",
    "name": "leftPanel",
    "memberof": "ka/index.js",
    "static": true,
    "longname": "ka/index.js~leftPanel",
    "access": "public",
    "export": false,
    "importPath": "./ka/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 508,
    "kind": "variable",
    "name": "rightPanel",
    "memberof": "ka/index.js",
    "static": true,
    "longname": "ka/index.js~rightPanel",
    "access": "public",
    "export": false,
    "importPath": "./ka/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 509,
    "kind": "variable",
    "name": "btnShowTrajectory",
    "memberof": "ka/index.js",
    "static": true,
    "longname": "ka/index.js~btnShowTrajectory",
    "access": "public",
    "export": false,
    "importPath": "./ka/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 510,
    "kind": "variable",
    "name": "btnShowAnimation",
    "memberof": "ka/index.js",
    "static": true,
    "longname": "ka/index.js~btnShowAnimation",
    "access": "public",
    "export": false,
    "importPath": "./ka/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 511,
    "kind": "variable",
    "name": "btnShowLoadSession",
    "memberof": "ka/index.js",
    "static": true,
    "longname": "ka/index.js~btnShowLoadSession",
    "access": "public",
    "export": false,
    "importPath": "./ka/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 512,
    "kind": "variable",
    "name": "btnShowRss",
    "memberof": "ka/index.js",
    "static": true,
    "longname": "ka/index.js~btnShowRss",
    "access": "public",
    "export": false,
    "importPath": "./ka/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 513,
    "kind": "variable",
    "name": "btnClearAll",
    "memberof": "ka/index.js",
    "static": true,
    "longname": "ka/index.js~btnClearAll",
    "access": "public",
    "export": false,
    "importPath": "./ka/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 514,
    "kind": "variable",
    "name": "btnShowRssLoadSession",
    "memberof": "ka/index.js",
    "static": true,
    "longname": "ka/index.js~btnShowRssLoadSession",
    "access": "public",
    "export": false,
    "importPath": "./ka/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 515,
    "kind": "variable",
    "name": "btnShowActiveSeans",
    "memberof": "ka/index.js",
    "static": true,
    "longname": "ka/index.js~btnShowActiveSeans",
    "access": "public",
    "export": false,
    "importPath": "./ka/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 516,
    "kind": "variable",
    "name": "btnShowZanAntenRss",
    "memberof": "ka/index.js",
    "static": true,
    "longname": "ka/index.js~btnShowZanAntenRss",
    "access": "public",
    "export": false,
    "importPath": "./ka/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 517,
    "kind": "variable",
    "name": "btnShowKolision",
    "memberof": "ka/index.js",
    "static": true,
    "longname": "ka/index.js~btnShowKolision",
    "access": "public",
    "export": false,
    "importPath": "./ka/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 518,
    "kind": "file",
    "name": "ka/modules/animations/animations.js",
    "content": "import { GLOBAL_PERIOD } from \"../state/state.js\";\r\nimport { Animation } from \"../../utils/animateUtils.js\";\r\nimport dateUtils from \"../../utils/dateUtils.js\";\r\n\r\n/**\r\n * Элементы интерфейса\r\n */\r\nconst speedLabel = document.querySelector('#panel-1-speed'); // Получаем ссылку на label скорости\r\nconst speedRange = document.querySelector('#panel-1-speed-range'); // Получаем ссылку на диапазон скорости\r\n// Получаем ссылку на таймлайн и label текущей даты\r\nconst timeline = document.querySelector('#panel-1-timeline');\r\ntimeline.disabled = true; // Отключаем таймлайн\r\nconst currentDateLabel = document.querySelector('#panel-1-date-current'); // Получаем ссылку на label текущей даты\r\nconst btnStartAnimation = document.querySelector('#startAnimation'); // Получаем ссылку на кнопку анимации\r\nbtnStartAnimation.disabled = true; // Отключаем кнопку анимации\r\n\r\n/**\r\n * Инициализации анимации\r\n */\r\n// Создаем класс для работы с анимацией спутников\r\nexport const animate = new Animation(30, 1000); // Создаем новый объект класса Animation с параметрами шаг анимации и период анимации\r\n\r\n/** \r\n * Обработчики (связь с анимацией)\r\n*/\r\n// Добавляем обработчик изменения значения скорости\r\nspeedRange.addEventListener('input', () => {\r\n    speedLabel.textContent = speedRange.value; // Устанавливаем значение label скорости\r\n    animate.setSpeed(speedRange.value); // Устанавливаем скорость анимации\r\n});\r\n\r\n// Добавляем обработчик изменения значения таймлайна\r\ntimeline.addEventListener('change', () => {\r\n    const date = new Date(parseInt(timeline.value)); // Создаем объект Date с значением таймлайна\r\n    animate.setCurrentDate(date); // Устанавливаем текущую дату анимации\r\n});\r\n\r\n// Добавляем обработчик нажатия на кнопку анимации\r\nbtnStartAnimation.addEventListener('click', () => {\r\n    if (animate.isAnimating()) { // Проверяем, есть ли анимация\r\n        animate.stop(); // Останавливаем анимацию\r\n    } else {\r\n        animate.start(); // Запускаем анимацию\r\n    }\r\n});\r\n\r\n// Обработчик при создании анимации\r\nanimate.onInit(() => {\r\n    btnStartAnimation.disabled = false; // Включаем кнопку анимации\r\n    timeline.disabled = false; // Включаем таймлайн\r\n    // Задаем таймлайн\r\n    timeline.max = GLOBAL_PERIOD.end.getTime(); // Устанавливаем максимальное значение таймлайна\r\n    timeline.min = GLOBAL_PERIOD.start.getTime(); // Устанавливаем минимальное значение таймлайна\r\n});\r\n\r\n// Обработчик при удалении анимации\r\nanimate.onDelete(() => {\r\n    btnStartAnimation.textContent = 'Возобновить'; // Устанавливаем текст кнопки \"Возобновить\"\r\n    currentDateLabel.textContent = '00.00.0000 00:00:00'; // Устанавливаем текст label текущей даты\r\n    btnStartAnimation.disabled = true; // Отключаем кнопку анимации\r\n    timeline.disabled = true; // Отключаем таймлайн\r\n});\r\n\r\n// Обработчик изменения состояния анимации\r\nanimate.onChange((isAnimating) => {\r\n    if (isAnimating) { // Проверяем, есть ли анимация\r\n        btnStartAnimation.textContent = 'Пауза'; // Устанавливаем текст кнопки \"Пауза\"\r\n    } else {\r\n        btnStartAnimation.textContent = 'Возобновить'; // Устанавливаем текст кнопки \"Возобновить\"\r\n    }\r\n});\r\n\r\n// Работает при каждой итерации анимации\r\nanimate.addCallback((currentDate) => {\r\n    // Задаем текущую дату анимации\r\n    timeline.value = currentDate.getTime(); // Устанавливаем значение таймлайна\r\n    currentDateLabel.textContent = dateUtils.formatDisplayDateTime(currentDate); // Устанавливаем текст label текущей даты\r\n})\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/modules/animations/animations.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 519,
    "kind": "variable",
    "name": "speedLabel",
    "memberof": "ka/modules/animations/animations.js",
    "static": true,
    "longname": "ka/modules/animations/animations.js~speedLabel",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/animations/animations.js",
    "importStyle": null,
    "description": "Элементы интерфейса",
    "lineNumber": 8,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 520,
    "kind": "variable",
    "name": "speedRange",
    "memberof": "ka/modules/animations/animations.js",
    "static": true,
    "longname": "ka/modules/animations/animations.js~speedRange",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/animations/animations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 521,
    "kind": "variable",
    "name": "timeline",
    "memberof": "ka/modules/animations/animations.js",
    "static": true,
    "longname": "ka/modules/animations/animations.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/animations/animations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 522,
    "kind": "variable",
    "name": "currentDateLabel",
    "memberof": "ka/modules/animations/animations.js",
    "static": true,
    "longname": "ka/modules/animations/animations.js~currentDateLabel",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/animations/animations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 523,
    "kind": "variable",
    "name": "btnStartAnimation",
    "memberof": "ka/modules/animations/animations.js",
    "static": true,
    "longname": "ka/modules/animations/animations.js~btnStartAnimation",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/animations/animations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 524,
    "kind": "variable",
    "name": "animate",
    "memberof": "ka/modules/animations/animations.js",
    "static": true,
    "longname": "ka/modules/animations/animations.js~animate",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/animations/animations.js",
    "importStyle": "{animate}",
    "description": "Инициализации анимации",
    "lineNumber": 21,
    "type": {
      "types": [
        "ka/utils/animateUtils.js~Animation"
      ]
    }
  },
  {
    "__docId__": 525,
    "kind": "file",
    "name": "ka/modules/checkboxManager/checkboxManager.js",
    "content": "import CheckboxManager from \"../../components/checkbox-manager/CheckboxManager.js\";\r\nimport { KA_SELECTS, RSS_SELECTS } from \"../state/state.js\";\r\n\r\n\r\n/**\r\n * Менеджер чекбоксов\r\n * Управляет выбором и отбором элементов из списка.\r\n * Использует класс CheckboxManager, экземпляр которого создаётся с помощью конструктора.\r\n * \r\n * @module checkboxManager\r\n */\r\n\r\nexport const RSS_CHECKBOX = new CheckboxManager('#list-rss', RSS_SELECTS);\r\nexport const KA_CHECKBOX = new CheckboxManager('#list-ka', KA_SELECTS);\r\n// export const ABONENT_CHECKBOX = new CheckboxManager('#list-abonent', ABONENT_SELECTS);\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/modules/checkboxManager/checkboxManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 526,
    "kind": "variable",
    "name": "RSS_CHECKBOX",
    "memberof": "ka/modules/checkboxManager/checkboxManager.js",
    "static": true,
    "longname": "ka/modules/checkboxManager/checkboxManager.js~RSS_CHECKBOX",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/checkboxManager/checkboxManager.js",
    "importStyle": "{RSS_CHECKBOX}",
    "description": "Менеджер чекбоксов\nУправляет выбором и отбором элементов из списка.\nИспользует класс CheckboxManager, экземпляр которого создаётся с помощью конструктора.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "checkboxManager"
      }
    ],
    "type": {
      "types": [
        "ka/components/checkbox-manager/CheckboxManager.js~CheckboxManager"
      ]
    }
  },
  {
    "__docId__": 527,
    "kind": "variable",
    "name": "KA_CHECKBOX",
    "memberof": "ka/modules/checkboxManager/checkboxManager.js",
    "static": true,
    "longname": "ka/modules/checkboxManager/checkboxManager.js~KA_CHECKBOX",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/checkboxManager/checkboxManager.js",
    "importStyle": "{KA_CHECKBOX}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/checkbox-manager/CheckboxManager.js~CheckboxManager"
      ]
    }
  },
  {
    "__docId__": 528,
    "kind": "file",
    "name": "ka/modules/diagrams/diagrams.js",
    "content": "import { SessionsDiagramGant, GeneralDiagramGant, CallersOverlayGant } from \"../../components/diagram-gant/diagramGant.js\";\r\nimport DiagramGantBase from \"../../components/diagram-gant/DiagramGantBase.js\";\r\nimport { CallersDiagramGantNEW } from \"../../components/diagram-gant/diagramGantConcretical/CallersDiagramGant.js\";\r\nimport { CallersKaRssDiagramGantNEW } from \"../../components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js\";\r\nimport { CallersOverlayGantNEW } from \"../../components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js\";\r\nimport { blocksToCaptionExt } from \"../../components/diagram-gant/diagramGantConcretical/metaDiagramGant.js\";\r\nimport { RssDiagramGantNEW } from \"../../components/diagram-gant/diagramGantConcretical/RssDiagramGant.js\";\r\nimport SwitchDiagramRss from \"../../components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js\";\r\nimport { TimelineGant } from \"../../components/diagram-gant/TimelineGant.js\";\r\nimport dateUtils from \"../../utils/dateUtils.js\";\r\n\r\n// Планируемые ==> Доступность связи для абонентов (кнопка)\r\nexport const callersAndRssGroupDiagramGant = new CallersKaRssDiagramGantNEW('#modalWindowGraphKaRssGroup .diagram-gant', 'Доступность связи для абонентов');\r\n// Планируемые ==> Варианты сеансов связи (кнопка) ==> Доступность связи для абонентов (1)\r\nexport const callersDiagramGant = new CallersOverlayGant('#modalWindowGraph .graph-3', 'Доступность связи для абонентов');\r\n// Планируемые ==> Варианты сеансов связи (кнопка) ==> Варианты сеансов связи (2)\r\nexport const sessionsDiagramGant = new SessionsDiagramGant('#modalWindowGraph .diagram-gant-sessions', 'Варианты сеансов связи');\r\n// Планируемые ==> Общая доступность связи (кнопка) ==> Доступность связи для абонентов (2)\r\nexport const callersDiagramGant2 = new CallersOverlayGantNEW('#modalWindowGraphSecond .diagram-gant-2', 'Доступность связи для абонентов');\r\n// Планируемые ==> Общая доступность связи (кнопка) ==> Общая доступность связи (3)\r\nexport const generalDiagramGant = new GeneralDiagramGant('#modalWindowGraphSecond .diagram-line-all', 'Общая доступность связи');\r\n// Планируемые ==> Общая доступность связи (кнопка) ==> Таймлайн (1)\r\nexport const timelineGant = new TimelineGant('#modalWindowGraphSecond .digram-gant--height-timeline .timeline');\r\n// Доступность КА для абонентов ==> График (кнопка) ==> Доступность КА для абонентов (1)\r\nexport const callersDiagramGant3 = new CallersDiagramGantNEW('#modalShowCellers .diagram-gant', 'Доступность КА для абонентов');\r\n// Доступность КА для РСС ==> График (кнопка) ==> РСС. Расписание доступности КА для РСС (1)\r\nexport const rssDiagramGant = new RssDiagramGantNEW('#modalShowRSS .diagram-gant', 'РСС. Расписание доступности КА для РСС')\r\n\r\nconst activeDiogramSeans = new DiagramGantBase('#modal-show-active-seans .diogram-active', 'Активные сеансы связи в текущий момент времени');\r\nactiveDiogramSeans.setFormatNoneData('Нет активных сеансов');\r\nconst archiveDiogramSeans = new DiagramGantBase('#modal-show-archive-seans .diogram-archive', 'Архивные сеансы связи');\r\n// РССС\r\nexport const rssPlanAntenDiagram = new DiagramGantBase('#modal-show-rss-plan-anten .diogram-dostup', 'План работы антенн РСС');\r\nexport const rssPlanKolisionDiagram = new DiagramGantBase('#modal_show_planRSSKolision .rss-kolision-diogram', 'Коллии назначения РСС на КА');\r\n\r\n\r\nexport function showActiveDiogramsSeans(start, tekDate, data) {\r\n    const dataDiograms = []\r\n    // Ищем минимальную дату\r\n    let minDate = null;\r\n    data.forEach(seans => {\r\n        const { session_data } = seans;\r\n        const date = new Date(session_data.Data_Vyz)\r\n        if ((date <= minDate && !isNaN(date)) || minDate === null) {\r\n            minDate = date;\r\n        }\r\n    })\r\n    if (minDate === null) {\r\n        return activeDiogramSeans.setFormatData(tekDate, tekDate, dataDiograms);\r\n    };\r\n    data.forEach(seans => {\r\n        const { ID: id_seans, session_data } = seans;\r\n        const row = {\r\n            name: `\r\n            <div style='\r\n                width: 100%; \r\n                display: flex; \r\n                flex-direction: column; \r\n                justify-content: center; \r\n                align-items: center; \r\n                text-align: left;\r\n                font-weight: normal;\r\n                font-size: 18px;\r\n            '>\r\n                <table>\r\n                    <tr>\r\n                        <td>Вызывающий абонент:</td>\r\n                        <td>Аб. ${session_data.ID_Abonent_T1}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Вызываемый абонент:</td>\r\n                        <td>Аб. ${session_data.ID_Abonent_T2}</td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n            `,\r\n            // <div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: left;\">\r\n            // Вызывающий абонент: Аб. ${session_data.ID_Abonent_T1}<br>\r\n            // Вызываемый абонент&nbsp: Аб. ${session_data.ID_Abonent_T2}\r\n            // </div>\r\n            \r\n            styles: {\r\n                'gridTemplateColumns': '500px 0px 1fr',\r\n\r\n            },\r\n            classes: [],\r\n            lines: [\r\n                {\r\n                    nameElement: {\r\n                        name: '',\r\n                        styles: {\r\n\r\n                        },\r\n                        classes: [],\r\n                    },\r\n                    captionElement: {\r\n                        caption: `\r\n                        Вызов: ${dateUtils.formatDisplayDateTime(new Date(session_data.Data_Vyz))}&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\r\n                        Начало сеанса: ${dateUtils.formatDisplayDateTime(new Date(session_data.Data_Beg))}&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\r\n                        Начало разговора/передачи: ${dateUtils.formatDisplayDateTime(new Date(session_data.Data_Beg_Razg))}&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\r\n                        `,\r\n                        styles: {},\r\n                        classes: [],\r\n                    },\r\n                    emptySetting: {\r\n                        name: '',\r\n                        styles: {},\r\n                        classes: [],\r\n                    },\r\n                    blocksSetting: {\r\n                        styles: {},\r\n                        classes: [],\r\n                    },\r\n                    allBlocksSetting: {\r\n                        styles: {},\r\n                        classes: [],\r\n                    },\r\n                    blocks: [\r\n                        // Дата и время вызова\r\n                        {\r\n                            start: new Date(session_data.Data_Vyz),\r\n                            end: new Date(session_data.Data_Otv),\r\n                            caption: dateUtils.secondsToHMS((new Date(session_data.Data_Otv) - new Date(session_data.Data_Vyz)) / 1000),\r\n                            selected: true,\r\n                            styles: {\r\n                                'background-color': '#76c8d3',\r\n                            },\r\n                            classes: [],\r\n                        },\r\n                        // Дата и время решения\r\n                        {\r\n                            start: new Date(session_data.Data_Otv),\r\n                            end: new Date(session_data.Data_Beg),\r\n                            caption: dateUtils.secondsToHMS((new Date(session_data.Data_Beg) - new Date(session_data.Data_Otv)) / 1000),\r\n                            styles: {\r\n                                'background-color': '#a4e7c1',\r\n                            },\r\n                            classes: [],\r\n                        },\r\n                        // Дата и время начала сеанса\r\n                        {\r\n                            start: new Date(session_data.Data_Beg),\r\n                            end: new Date(session_data.Data_Beg_Razg),\r\n                            caption: dateUtils.secondsToHMS((new Date(session_data.Data_Beg_Razg) - new Date(session_data.Data_Beg)) / 1000),\r\n                            styles: {\r\n                                'background-color': '#3357FF',\r\n                            },\r\n                            classes: [],\r\n                        },\r\n                        // Дата и время начала разговора/передачи\r\n                        {\r\n                            start: new Date(session_data.Data_Beg_Razg),\r\n                            end: tekDate,\r\n                            caption: dateUtils.secondsToHMS((tekDate - new Date(session_data.Data_Beg_Razg)) / 1000),\r\n                            styles: {\r\n                                'background-color': '#a17dc4',\r\n                            },\r\n                            classes: [],\r\n                        },\r\n\r\n                    ],\r\n                },\r\n            ],\r\n        }\r\n\r\n        dataDiograms.push(row)\r\n    })\r\n\r\n    activeDiogramSeans.setCaptionFormatter((formattedStart, formattedEnd, formattedInterval) => {\r\n        return `${formattedEnd}`\r\n    })\r\n    activeDiogramSeans.setFormatData(minDate, tekDate, dataDiograms);\r\n}\r\n\r\nexport function showArchiveDiogramsSeans(start, end, data) {\r\n    const dataDiograms = []\r\n    // Ищем минимальную дату\r\n    let minDate = null;\r\n    let maxDate = null;\r\n    data.forEach(seans => {\r\n        const { session_data } = seans;\r\n        const date = new Date(session_data.Data_Vyz)\r\n        if ((date <= minDate && !isNaN(date)) || minDate === null) {\r\n            minDate = date;\r\n        }\r\n        if ((date >= maxDate && !isNaN(date)) || maxDate === null) {\r\n            maxDate = date;\r\n        }\r\n    })\r\n\r\n    data.forEach(seans => {\r\n        const { ID: id_seans, session_data } = seans;\r\n\r\n        const row = {\r\n            name: `\r\n            <div style='\r\n                width: 100%; \r\n                display: flex; \r\n                flex-direction: column; \r\n                justify-content: center; \r\n                align-items: center; \r\n                text-align: left;\r\n                font-weight: normal;\r\n                font-size: 18px;\r\n            '>\r\n                <table>\r\n                    <tr>\r\n                        <td>Вызывающий абонент:</td>\r\n                        <td>Аб. ${session_data.ID_Abonent_T1}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Вызываемый абонент:</td>\r\n                        <td>Аб. ${session_data.ID_Abonent_T2}</td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n            `,\r\n            styles: {\r\n                'gridTemplateColumns': '500px 0px 1fr',\r\n            },\r\n            classes: [],\r\n            lines: [\r\n                {\r\n                    nameElement: {\r\n                        name: '',\r\n                        styles: {\r\n\r\n                        },\r\n                        classes: [],\r\n                    },\r\n                    captionElement: {\r\n                        caption: `\r\n                        Вызов: ${dateUtils.formatDisplayDateTime(new Date(session_data.Data_Vyz))}&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\r\n                        Начало сеанса: ${dateUtils.formatDisplayDateTime(new Date(session_data.Data_Beg))}&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\r\n                        Начало разговора/передачи: ${dateUtils.formatDisplayDateTime(new Date(session_data.Data_Beg_Razg))}&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\r\n                        Завершение: ${dateUtils.formatDisplayDateTime(new Date(session_data.Data_End))}&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\r\n                        `,\r\n                        styles: {},\r\n                        classes: [],\r\n                    },\r\n                    emptySetting: {\r\n                        name: '',\r\n                        styles: {},\r\n                        classes: [],\r\n                    },\r\n                    blocksSetting: {\r\n                        styles: {},\r\n                        classes: [],\r\n                    },\r\n                    allBlocksSetting: {\r\n                        styles: {},\r\n                        classes: [],\r\n                    },\r\n                    blocks: [\r\n                        // Дата и время вызова\r\n                        {\r\n                            start: new Date(session_data.Data_Vyz),\r\n                            end: new Date(session_data.Data_Otv),\r\n                            caption: dateUtils.secondsToHMS((new Date(session_data.Data_Otv) - new Date(session_data.Data_Vyz)) / 1000),\r\n                            selected: true,\r\n                            styles: {\r\n                                'background-color': '#76c8d3',\r\n                            },\r\n                            classes: [],\r\n                        },\r\n                        // Дата и время решения\r\n                        {\r\n                            start: new Date(session_data.Data_Otv),\r\n                            end: new Date(session_data.Data_Beg),\r\n                            caption: dateUtils.secondsToHMS((new Date(session_data.Data_Beg) - new Date(session_data.Data_Otv)) / 1000),\r\n                            styles: {\r\n                                'background-color': '#a4e7c1',\r\n                            },\r\n                            classes: [],\r\n                        },\r\n                        // Дата и время начала сеанса\r\n                        {\r\n                            start: new Date(session_data.Data_Beg),\r\n                            end: new Date(session_data.Data_Beg_Razg),\r\n                            caption: dateUtils.secondsToHMS((new Date(session_data.Data_Beg_Razg) - new Date(session_data.Data_Beg)) / 1000),\r\n                            styles: {\r\n                                'background-color': '#3357FF',\r\n                            },\r\n                            classes: [],\r\n                        },\r\n                        // Дата и время начала разговора/передачи\r\n                        {\r\n                            start: new Date(session_data.Data_Beg_Razg),\r\n                            end: session_data.Data_End,\r\n                            caption: dateUtils.secondsToHMS((new Date(session_data.Data_End) - new Date(session_data.Data_Beg_Razg)) / 1000),\r\n                            styles: {\r\n                                'background-color': '#a17dc4',\r\n                            },\r\n                            classes: [],\r\n                        },\r\n\r\n                    ],\r\n                },\r\n            ],\r\n        }\r\n\r\n        dataDiograms.push(row)\r\n    })\r\n    archiveDiogramSeans.setCaptionFormatter((start, end, interval) => {\r\n        return `За период с ${start} по ${end}.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Продолжительность периода: ${interval}`\r\n    })\r\n    archiveDiogramSeans.setFormatData(start, maxDate, dataDiograms);\r\n}\r\n\r\nexport function showRssPlanAntenDiagram(start, end, data) {\r\n    const dataDiograms = []\r\n    // ID_KA-ID_RSS\r\n    const cashBlocks = {}\r\n    // ID_KA\r\n    const cashLines = {}\r\n    data.forEach(rssSeans => {\r\n        const {\r\n            ID,\r\n            ID_KA,\r\n            Data_Time_In1,\r\n            Shirota_KA1,\r\n            Dolgota_KA1,\r\n            H_KA1,\r\n            Data_Time_In2,\r\n            Shirota_KA2,\r\n            Dolgota_KA2,\r\n            H_KA2,\r\n            Data_Time_Out,\r\n            ID_RSS,\r\n            ID_RSS_Ant,\r\n            Shirota_RSS,\r\n            Dolgota_RSS,\r\n            H_RSS,\r\n            Azimut1,\r\n            UM1,\r\n            Azimut2,\r\n            UM2,\r\n            ID_Err,\r\n\r\n            KA_NAME,\r\n            RSS_NAME\r\n        } = rssSeans;\r\n\r\n\r\n        const id_seans = `${ID_KA}-${ID_RSS}`\r\n        // Создаем группу если нету КА\r\n        if (!(ID_KA in cashLines)) {\r\n            const lines = []\r\n            const group = {\r\n                name: `<span style=\"font-size: 16px\">${KA_NAME}</span>`,\r\n                styles: {},\r\n                classes: [],\r\n                lines: lines\r\n            }\r\n            dataDiograms.push(group)\r\n            cashLines[ID_KA] = lines;\r\n        }\r\n        const lines = cashLines[ID_KA]\r\n        // Если нету блока создаем линию\r\n        if (!(id_seans in cashBlocks)) {\r\n            const blocks = []\r\n            const line = {\r\n                nameElement: {\r\n                    name:  `РСС ${RSS_NAME} <br><span>   Широта: ${Shirota_RSS} <br>Долгота: ${Dolgota_RSS} <br> Антенна: ${ID_RSS_Ant} </span>`,\r\n                    styles: {\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                    },\r\n                    classes: [],\r\n                },\r\n                captionElement: {\r\n                    caption: '...',\r\n                    styles: {},\r\n                    classes: [],\r\n                },\r\n                emptySetting: {\r\n                    name: 'Нет связи',\r\n                    styles: {},\r\n                    classes: [],\r\n                },\r\n                blocksSetting: {\r\n                    styles: {},\r\n                    classes: [],\r\n                    allStyles: {},\r\n                    allClasses: [],\r\n                },\r\n                blocks: blocks\r\n            }\r\n            lines.push(line)\r\n            cashBlocks[id_seans] = blocks\r\n        }\r\n\r\n        \r\n        const blocks = cashBlocks[id_seans]\r\n        // azimuth\r\n        // angle\r\n        const block = {\r\n            start: new Date(Data_Time_In1),\r\n            end: new Date(Data_Time_Out),\r\n            angle: UM1,\r\n            azimuth: Azimut1,\r\n            caption: dateUtils.secondsToHMS((new Date(Data_Time_Out).getTime() - new Date(Data_Time_In1).getTime()) / 1000),\r\n            styles: {\r\n                'background-color': '#22B14C',\r\n            },\r\n            classes: [],\r\n        }\r\n        blocks.push(block)\r\n        \r\n    })\r\n\r\n    for (const [ID_KA, lines] of Object.entries(cashLines)) {\r\n        lines.forEach(line => {\r\n            line.captionElement.caption = blocksToCaptionExt(line.blocks)\r\n        })       \r\n    }\r\n\r\n    rssPlanAntenDiagram.setCaptionFormatter((start, end, interval) => {\r\n        return `На период с ${start} по ${end}.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Продолжительность периода: ${interval}`\r\n    })\r\n    rssPlanAntenDiagram.setFormatData(start, end, dataDiograms);\r\n}\r\n\r\nexport function showRssPlanAntenKolision(start, end, data) {\r\n    const dataDiograms = []\r\n    // ID_KA-ID_RSS\r\n    const cashBlocks = {}\r\n    // ID_KA\r\n    const cashLines = {}\r\n    data.forEach(rssSeans => {\r\n        const {\r\n            ID,\r\n            ID_KA,\r\n            Data_Time_In1,\r\n            Shirota_KA1,\r\n            Dolgota_KA1,\r\n            H_KA1,\r\n            Data_Time_In2,\r\n            Shirota_KA2,\r\n            Dolgota_KA2,\r\n            H_KA2,\r\n            Data_Time_Out,\r\n            ID_RSS,\r\n            ID_RSS_Ant,\r\n            Shirota_RSS,\r\n            Dolgota_RSS,\r\n            H_RSS,\r\n            Azimut1,\r\n            UM1,\r\n            Azimut2,\r\n            UM2,\r\n            ID_Err,\r\n\r\n            KA_NAME,\r\n            RSS_NAME,\r\n            ENABLED\r\n        } = rssSeans;\r\n\r\n\r\n        const id_seans = `${ID_KA}-${ID_RSS}`\r\n        // Создаем группу если нету КА\r\n        if (!(ID_KA in cashLines)) {\r\n            const lines = []\r\n            const group = {\r\n                name: `<span style=\"font-size: 16px\">${KA_NAME}</span>`,\r\n                styles: {},\r\n                classes: [],\r\n                lines: lines\r\n            }\r\n            dataDiograms.push(group)\r\n            cashLines[ID_KA] = lines;\r\n        }\r\n        const lines = cashLines[ID_KA]\r\n        // Если нету блока создаем линию\r\n        if (!(id_seans in cashBlocks)) {\r\n            const blocks = []\r\n            const line = {\r\n                nameElement: {\r\n                    name:  `РСС <br> ${RSS_NAME} <br><span> Широта: ${Shirota_RSS} <br>Долгота: ${Dolgota_RSS}</span>`,\r\n                    styles: {\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                    },\r\n                    classes: [],\r\n                },\r\n                captionElement: {\r\n                    caption: '...',\r\n                    styles: {},\r\n                    classes: [],\r\n                },\r\n                emptySetting: {\r\n                    name: 'Нет связи',\r\n                    styles: {},\r\n                    classes: [],\r\n                },\r\n                blocksSetting: {\r\n                    styles: {},\r\n                    classes: [],\r\n                    allStyles: {},\r\n                    allClasses: [],\r\n                },\r\n                blocks: blocks\r\n            }\r\n            lines.push(line)\r\n            cashBlocks[id_seans] = blocks\r\n        }\r\n\r\n        \r\n        const blocks = cashBlocks[id_seans]\r\n        // azimuth\r\n        // angle\r\n        const block = {\r\n            start: new Date(Data_Time_In1),\r\n            end: new Date(Data_Time_Out),\r\n            angle: UM1,\r\n            azimuth: Azimut1,\r\n            caption: dateUtils.secondsToHMS((new Date(Data_Time_Out).getTime() - new Date(Data_Time_In1).getTime()) / 1000),\r\n            classes: [],\r\n            styles: {}\r\n        }\r\n        if (ENABLED) {\r\n            block.styles = {\r\n                'background-color': '#22B14C',\r\n            }\r\n        }\r\n        blocks.push(block)\r\n        \r\n    })\r\n\r\n    for (const [ID_KA, lines] of Object.entries(cashLines)) {\r\n        lines.forEach(line => {\r\n            line.captionElement.caption = blocksToCaptionExt(line.blocks)\r\n        })       \r\n    }\r\n\r\n    rssPlanKolisionDiagram.setCaptionFormatter((start, end, interval) => {\r\n        return `На период с ${start} по ${end}.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Продолжительность периода: ${interval}`\r\n    })\r\n    rssPlanKolisionDiagram.setFormatData(start, end, dataDiograms);\r\n}\r\n\r\n\r\n\r\nexport const rssSwitchDiagramGant = new SwitchDiagramRss('#modalShowRSS .switch-rss')\r\n\r\n\r\nfunction groupBySatellite(data) {\r\n    const result = {};\r\n\r\n    // Проходим по каждой станции (РСС)\r\n    data.forEach(station => {\r\n        const stationName = station.name;  // Название РСС с HTML\r\n\r\n        // Проходим по каждому спутнику (КА)\r\n        station.lines.forEach(line => {\r\n            const satelliteName = line.nameElement.name;  // Название спутника (КА)\r\n\r\n            // Если такой КА еще нет в результатах, создаем его\r\n            if (!result[satelliteName]) {\r\n                result[satelliteName] = {\r\n                    name: `<span style=\"font-size: 16px\">${satelliteName}</span>`,\r\n                    lines: []\r\n                };\r\n            }\r\n\r\n            // Добавляем РСС к этому КА\r\n            result[satelliteName].lines.push({\r\n                nameElement: { name: stationName, styles: line.nameElement.styles },  // Название РСС\r\n                emptySetting: line.emptySetting,\r\n                captionElement: line.captionElement,\r\n                blocks: line.blocks\r\n            });\r\n        });\r\n    });\r\n\r\n    // Преобразуем объект в массив\r\n    const resultArray = Object.values(result);\r\n\r\n    // Сортируем массив по названиям спутников\r\n    resultArray.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n    // Возвращаем отсортированный массив\r\n    return resultArray;\r\n}\r\n\r\nrssSwitchDiagramGant.kaData = null;\r\n\r\n\r\n\r\nrssSwitchDiagramGant.addCallback((type) => {\r\n    if (type !== 'ka') return;\r\n    rssSwitchDiagramGant.kaData = rssDiagramGant.saveData\r\n    const data = groupBySatellite(rssDiagramGant.saveData);\r\n    rssDiagramGant.setFormatData(rssDiagramGant.start, rssDiagramGant.end, data);\r\n    \r\n})\r\n\r\nrssSwitchDiagramGant.addCallback((type) => {\r\n    if (type !== 'rss') return;\r\n    if (!rssSwitchDiagramGant.kaData) return;\r\n    rssDiagramGant.setFormatData(rssDiagramGant.start, rssDiagramGant.end, rssSwitchDiagramGant.kaData)\r\n})",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/modules/diagrams/diagrams.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 529,
    "kind": "variable",
    "name": "callersAndRssGroupDiagramGant",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~callersAndRssGroupDiagramGant",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{callersAndRssGroupDiagramGant}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/diagram-gant/diagramGantConcretical/CallersKaRssDiagramGant.js~CallersKaRssDiagramGantNEW"
      ]
    }
  },
  {
    "__docId__": 530,
    "kind": "variable",
    "name": "callersDiagramGant",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~callersDiagramGant",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{callersDiagramGant}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/diagram-gant/diagramGant.js~CallersOverlayGant"
      ]
    }
  },
  {
    "__docId__": 531,
    "kind": "variable",
    "name": "sessionsDiagramGant",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~sessionsDiagramGant",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{sessionsDiagramGant}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/diagram-gant/diagramGant.js~SessionsDiagramGant"
      ]
    }
  },
  {
    "__docId__": 532,
    "kind": "variable",
    "name": "callersDiagramGant2",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~callersDiagramGant2",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{callersDiagramGant2}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/diagram-gant/diagramGantConcretical/CallersOverlayGant.js~CallersOverlayGantNEW"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "variable",
    "name": "generalDiagramGant",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~generalDiagramGant",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{generalDiagramGant}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/diagram-gant/diagramGant.js~GeneralDiagramGant"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "variable",
    "name": "timelineGant",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~timelineGant",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{timelineGant}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/diagram-gant/TimelineGant.js~TimelineGant"
      ]
    }
  },
  {
    "__docId__": 535,
    "kind": "variable",
    "name": "callersDiagramGant3",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~callersDiagramGant3",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{callersDiagramGant3}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/diagram-gant/diagramGantConcretical/CallersDiagramGant.js~CallersDiagramGantNEW"
      ]
    }
  },
  {
    "__docId__": 536,
    "kind": "variable",
    "name": "rssDiagramGant",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~rssDiagramGant",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{rssDiagramGant}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/diagram-gant/diagramGantConcretical/RssDiagramGant.js~RssDiagramGantNEW"
      ]
    }
  },
  {
    "__docId__": 537,
    "kind": "variable",
    "name": "activeDiogramSeans",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~activeDiogramSeans",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 538,
    "kind": "variable",
    "name": "archiveDiogramSeans",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~archiveDiogramSeans",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 539,
    "kind": "variable",
    "name": "rssPlanAntenDiagram",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~rssPlanAntenDiagram",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{rssPlanAntenDiagram}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 540,
    "kind": "variable",
    "name": "rssPlanKolisionDiagram",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~rssPlanKolisionDiagram",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{rssPlanKolisionDiagram}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 541,
    "kind": "function",
    "name": "showActiveDiogramsSeans",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~showActiveDiogramsSeans",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{showActiveDiogramsSeans}",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "tekDate",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 542,
    "kind": "function",
    "name": "showArchiveDiogramsSeans",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~showArchiveDiogramsSeans",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{showArchiveDiogramsSeans}",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 543,
    "kind": "function",
    "name": "showRssPlanAntenDiagram",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~showRssPlanAntenDiagram",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{showRssPlanAntenDiagram}",
    "description": null,
    "lineNumber": 310,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 544,
    "kind": "function",
    "name": "showRssPlanAntenKolision",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~showRssPlanAntenKolision",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{showRssPlanAntenKolision}",
    "description": null,
    "lineNumber": 424,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 545,
    "kind": "variable",
    "name": "rssSwitchDiagramGant",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~rssSwitchDiagramGant",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": "{rssSwitchDiagramGant}",
    "description": null,
    "lineNumber": 544,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/diagram-gant/switch-diagram-rss/SwitchDiagramRss.js~SwitchDiagramRss"
      ]
    }
  },
  {
    "__docId__": 546,
    "kind": "function",
    "name": "groupBySatellite",
    "memberof": "ka/modules/diagrams/diagrams.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/diagrams/diagrams.js~groupBySatellite",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/diagrams/diagrams.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 547,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 547,
    "kind": "file",
    "name": "ka/modules/infoBlocks/infoBlocks.js",
    "content": "import InfoBlock from \"../../components/info-block/InfoBlock.js\";\r\n\r\n/**\r\n * Информационные блоки\r\n */\r\n// Создаем объект, который будет управлять информационными блоками.\r\nexport const trajInfoBlock = new InfoBlock([\r\n    // Создаем список элементов информационных блоков.\r\n    // Каждый элемент представляет собой объект с информацией о связанном элементе\r\n    // интерфейса, значении по умолчанию, ключе данных, и стиле отображения.\r\n    { elementSelector: '#panel-parameters-2 .satellites-select-count', defaultValue: '0', dataKey: 'satellites_count', style: InfoBlock.styles.NUMBER },\r\n    { elementSelector: '#panel-parameters-2 .satellite-speed-in-dot', defaultValue: '0', dataKey: 'speed', style: InfoBlock.styles.NUMBER },\r\n    { elementSelector: '#panel-parameters-2 .satellite-area-solo', defaultValue: '0', dataKey: 'square', style: InfoBlock.styles.NUMBER },\r\n    { elementSelector: '#panel-parameters-2 .satellite-area-total', defaultValue: '0', dataKey: 'all_square', style: InfoBlock.styles.NUMBER },\r\n]);\r\n\r\nexport const animateInfoBlock = new InfoBlock([\r\n    { elementSelector: '#panel-1-select-sputnik', defaultValue: '0', dataKey: 'satellites_count', style: InfoBlock.styles.NUMBER },\r\n]);\r\n\r\nexport const zanAntenRssInfoBlock = new InfoBlock([\r\n    { elementSelector: '#panel-parameters-19 .date-from', defaultValue: \"-\", dataKey: 'start', style: InfoBlock.styles.DATETIME },\r\n    { elementSelector: '#panel-parameters-19 .date-to', defaultValue: \"-\", dataKey: 'end', style: InfoBlock.styles.DATETIME },\r\n]);\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/modules/infoBlocks/infoBlocks.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 548,
    "kind": "variable",
    "name": "trajInfoBlock",
    "memberof": "ka/modules/infoBlocks/infoBlocks.js",
    "static": true,
    "longname": "ka/modules/infoBlocks/infoBlocks.js~trajInfoBlock",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/infoBlocks/infoBlocks.js",
    "importStyle": "{trajInfoBlock}",
    "description": "Информационные блоки",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 549,
    "kind": "variable",
    "name": "animateInfoBlock",
    "memberof": "ka/modules/infoBlocks/infoBlocks.js",
    "static": true,
    "longname": "ka/modules/infoBlocks/infoBlocks.js~animateInfoBlock",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/infoBlocks/infoBlocks.js",
    "importStyle": "{animateInfoBlock}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 550,
    "kind": "variable",
    "name": "zanAntenRssInfoBlock",
    "memberof": "ka/modules/infoBlocks/infoBlocks.js",
    "static": true,
    "longname": "ka/modules/infoBlocks/infoBlocks.js~zanAntenRssInfoBlock",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/infoBlocks/infoBlocks.js",
    "importStyle": "{zanAntenRssInfoBlock}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "file",
    "name": "ka/modules/map/map.js",
    "content": "import mapUtils from '../../utils/mapUtils.js';\r\nimport dateUtils from '../../utils/dateUtils.js';\r\n\r\n// Создание карты с использованием библиотеки OpenLayers\r\nexport const map = new ol.Map({\r\n    // Задание источника данных для карты\r\n    layers: [\r\n        new ol.layer.Tile({\r\n            source: new ol.source.XYZ({\r\n                url: 'http://185.192.247.60:8666/tiles_disk/{z}/{x}/{y}.png',\r\n                crossOrigin: 'anonymous',\r\n            }),\r\n        }),\r\n    ],\r\n    // Задание целевого элемента для отображения карты\r\n    target: 'map',\r\n    // Задание начальных координат и масштаба карты\r\n    view: new ol.View({\r\n        center: ol.proj.fromLonLat([80, 0], 'EPSG:4326'),\r\n        zoom: 1,\r\n        smoothExtentConstraint: false,\r\n        smoothResolutionConstraint: false,\r\n        projection: 'EPSG:4326', // Указываем базовую проекцию\r\n        maxZoom: 9\r\n    }),\r\n});\r\n\r\n// Задаем слои для отображения объектов на карте\r\nexport const kaLayers = {\r\n    // Точки\r\n    pointLayer: new ol.layer.Vector({\r\n        _typeLayer: 'kaPoint', // Назначение типа слоя\r\n        _isOverlay: true, // Флаг слоя над основным слоем\r\n        source: new ol.source.Vector({ features: new ol.Collection() }), // Источник данных для точек\r\n        visible: false // Флаг видимости слоя\r\n    }),\r\n    // Линии\r\n    lineLayer: new ol.layer.Vector({\r\n        _typeLayer: 'kaLine',\r\n        source: new ol.source.Vector({ features: new ol.Collection([]) }),\r\n        visible: true\r\n    }),\r\n    // Области\r\n    areaLayer: new ol.layer.Vector({\r\n        _typeLayer: 'kaArea',\r\n        source: new ol.source.Vector({ features: new ol.Collection([]) }),\r\n        visible: false\r\n    }),\r\n    // Иконка спутника\r\n    iconLayer: new ol.layer.Vector({\r\n        _typeLayer: 'kaIcon',\r\n        _isOverlay: true,\r\n        source: new ol.source.Vector({ features: new ol.Collection([]) }),\r\n        visible: true\r\n    }),\r\n};\r\n\r\n// Задаем стили для слоев\r\nkaLayers.pointLayer.setStyle(mapUtils.PointUtils.createStyle('black', '#0c82a8', 3));\r\nkaLayers.lineLayer.setStyle(mapUtils.LineUtils.createStyle('black', 1));\r\nkaLayers.areaLayer.setStyle(mapUtils.PolygonUtils.createStyle('black', '#6d4abb40'));\r\nkaLayers.iconLayer.setStyle(mapUtils.IconUtils.createStyle('/static/ka/assets/img/icon/sputnik/sputnik.svg', '#7b6ac4', 25));\r\n\r\n\r\n// Задаем стили для слоев с объектами Абонента\r\nexport const callersLayers = {\r\n    // Иконки\r\n    iconLayer: new ol.layer.Vector({\r\n        _typeLayer: 'callers',\r\n        _isOverlay: true,\r\n        source: new ol.source.Vector({ features: new ol.Collection([]) }),\r\n        visible: true\r\n    }),\r\n    // Области\r\n    areaLayer: new ol.layer.Vector({\r\n        _typeLayer: 'callersArea',\r\n        source: new ol.source.Vector({ features: new ol.Collection([]) }),\r\n        visible: true\r\n    }),\r\n};\r\n\r\n// Задаем стили для слоев с объектами Абонента, иконки и области\r\ncallersLayers.iconLayer.setStyle(mapUtils.IconUtils.IconTextStyle.createStyle(\r\n    callersLayers.iconLayer,\r\n    '/static/ka/assets/img/icon/abonents/abonent.svg', '#F4A900', 20,\r\n    'name', 'black', '10px serif'\r\n));\r\ncallersLayers.areaLayer.setStyle(mapUtils.PolygonUtils.createStyle('rgba(202, 156, 46, 0.8) ', 'rgba(202, 156, 46, 0.2)'));\r\n\r\nexport const rssLayers = {\r\n    // Иконки\r\n    iconLayer: new ol.layer.Vector({\r\n        _typeLayer: 'rss',\r\n        _isOverlay: true,\r\n        source: new ol.source.Vector({ features: new ol.Collection([]) }),\r\n        visible: true\r\n    }),\r\n    // Области\r\n    areaLayer: new ol.layer.Vector({\r\n        _typeLayer: 'rssArea',\r\n        source: new ol.source.Vector({ features: new ol.Collection([]) }),\r\n        visible: true\r\n    }),\r\n};\r\n\r\n\r\n// Задаем стили для RSS \r\nrssLayers.iconLayer.setStyle(mapUtils.IconUtils.IconTextStyle.createStyle(\r\n    rssLayers.iconLayer,\r\n    '/static/ka/assets/img/icon/rss/rss.svg',\r\n    'blue', 28,\r\n    'name', 'black', '10px serif'\r\n));\r\n\r\n// .setImage(rssLayers.iconLayer, '/static/ka/assets/img/icon/rss/rss_1.svg')\r\n// mapUtils.IconUtils.IconTextStyle.setImage(rssLayers.iconLayer, '/static/ka/assets/img/icon/rss/rss_1.svg');\r\nrssLayers.areaLayer.setStyle(mapUtils.PolygonUtils.createStyle('blue', '#42f5ce40'));\r\n\r\n\r\n// gridLayer - слой с сеткой координат на карте\r\nconst gridLayer = new ol.layer.Graticule({\r\n    // стиль для линий сетки\r\n    strokeStyle: new ol.style.Stroke({\r\n        color: 'rgba(255,120,0,0.6)', // Цвет #FF7800, прозрачность 60%\r\n        width: 2, // ширина линии\r\n        lineDash: [0.5, 4], // тип линии, через 0.5px рисуется, 4px - пропуск\r\n    }),\r\n    // Форматирование подписей долготы\r\n    lonLabelFormatter: (lon) => {\r\n        const degrees = Math.floor(lon); // целая часть градуса\r\n        const minutes = Math.abs(lon - degrees) * 60; // дробная часть градуса\r\n        const formattedMinutes = minutes === 0 ? '' : minutes.toFixed(2); // форматирование минут\r\n\r\n        const hemisphere = lon >= 0 ? 'В' : 'З'; // полушарие\r\n\r\n        // Замена E сторону света на русский вариант\r\n        return `${Math.abs(degrees)}° ${formattedMinutes} ${hemisphere}`;\r\n    },\r\n    // Форматирование подписей широты\r\n    latLabelFormatter: (lat) => {\r\n        const degrees = Math.floor(lat); // целая часть градуса\r\n        const minutes = Math.abs(lat - degrees) * 60; // дробная часть градуса\r\n        const formattedMinutes = minutes === 0 ? '' : minutes.toFixed(2); // форматирование минут\r\n\r\n        const hemisphere = lat >= 0 ? 'С' : 'Ю'; // полушарие\r\n\r\n        // Замена N сторону света на русский вариант\r\n        return `${Math.abs(degrees)}° ${formattedMinutes}′ ${hemisphere}`;\r\n    },\r\n    showLabels: true, // показывать подписи\r\n});\r\n\r\n// drawCallers - режим рисования точек на карте\r\n// Для абонентов\r\nexport const drawCallers = mapUtils.DrawUtils.createPointDraw(\r\n    callersLayers.iconLayer, // слой точек\r\n    mapUtils.IconUtils.createStyle('static/ka/assets/img/icon/menu/cross.svg', 'blue', 30), // стиль для точек\r\n    2  // Максимальное значение\r\n);\r\ndrawCallers.setActive(false); // режим отключен\r\n\r\nconst popupElement = document.getElementById(\"popup\");\r\npopupElement.style.display = \"block\";\r\n// Создаем всплывающую подсказку\r\nexport const overlay = new ol.Overlay({\r\n    element: popupElement,\r\n});\r\n\r\n// Добавить слои на карту\r\n// Слои сетки\r\nmap.addLayer(gridLayer);\r\n\r\n// области (зона)\r\nmap.addLayer(kaLayers.areaLayer);\r\nmap.addLayer(callersLayers.areaLayer);\r\nmap.addLayer(rssLayers.areaLayer);\r\n// линии\r\nmap.addLayer(kaLayers.lineLayer);\r\n// точки\r\nmap.addLayer(kaLayers.pointLayer);\r\n// иконки\r\nmap.addLayer(kaLayers.iconLayer);\r\nmap.addLayer(callersLayers.iconLayer);\r\nmap.addLayer(rssLayers.iconLayer);\r\n\r\n// Добавить режим рисования\r\nmap.addInteraction(drawCallers);\r\n// Добавить всплывающую подсказку\r\nmap.addOverlay(overlay);\r\n\r\nkaLayers.iconLayer.changed();\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/modules/map/map.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 552,
    "kind": "variable",
    "name": "map",
    "memberof": "ka/modules/map/map.js",
    "static": true,
    "longname": "ka/modules/map/map.js~map",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/map/map.js",
    "importStyle": "{map}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 553,
    "kind": "variable",
    "name": "kaLayers",
    "memberof": "ka/modules/map/map.js",
    "static": true,
    "longname": "ka/modules/map/map.js~kaLayers",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/map/map.js",
    "importStyle": "{kaLayers}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "{\"pointLayer\": *, \"lineLayer\": *, \"areaLayer\": *, \"iconLayer\": *}"
      ]
    }
  },
  {
    "__docId__": 554,
    "kind": "variable",
    "name": "callersLayers",
    "memberof": "ka/modules/map/map.js",
    "static": true,
    "longname": "ka/modules/map/map.js~callersLayers",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/map/map.js",
    "importStyle": "{callersLayers}",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "{\"iconLayer\": *, \"areaLayer\": *}"
      ]
    }
  },
  {
    "__docId__": 555,
    "kind": "variable",
    "name": "rssLayers",
    "memberof": "ka/modules/map/map.js",
    "static": true,
    "longname": "ka/modules/map/map.js~rssLayers",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/map/map.js",
    "importStyle": "{rssLayers}",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "{\"iconLayer\": *, \"areaLayer\": *}"
      ]
    }
  },
  {
    "__docId__": 556,
    "kind": "variable",
    "name": "gridLayer",
    "memberof": "ka/modules/map/map.js",
    "static": true,
    "longname": "ka/modules/map/map.js~gridLayer",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/map/map.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 557,
    "kind": "variable",
    "name": "drawCallers",
    "memberof": "ka/modules/map/map.js",
    "static": true,
    "longname": "ka/modules/map/map.js~drawCallers",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/map/map.js",
    "importStyle": "{drawCallers}",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 558,
    "kind": "variable",
    "name": "popupElement",
    "memberof": "ka/modules/map/map.js",
    "static": true,
    "longname": "ka/modules/map/map.js~popupElement",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/map/map.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 559,
    "kind": "variable",
    "name": "overlay",
    "memberof": "ka/modules/map/map.js",
    "static": true,
    "longname": "ka/modules/map/map.js~overlay",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/map/map.js",
    "importStyle": "{overlay}",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 560,
    "kind": "file",
    "name": "ka/modules/modals/modals.js",
    "content": "import { KaApi } from \"../../api/kaApi.js\";\r\nimport Modal from \"../../components/modal/Modal.js\";\r\nimport ModalNotification from \"../../components/modal/ModalNotification.js\";\r\nimport ModalPopNotifs from \"../../components/modal/ModalPopNotifs.js\";\r\nimport { callersDiagramGant, sessionsDiagramGant, callersDiagramGant2, generalDiagramGant, callersDiagramGant3, rssDiagramGant, callersAndRssGroupDiagramGant, rssPlanAntenDiagram, rssPlanKolisionDiagram } from \"../diagrams/diagrams.js\";\r\nimport { pages } from \"../pages/pages.js\";\r\nimport { chChPlanTable, chChPlanTablePanel, generateOrbitCheckboxes, hhpTable, hhpTablePanel, zanRssTableControl } from \"../tables/tables.js\";\r\n\r\nimport { showKolision, showRssLoadSession, showRssPlanAnten, showRssZan } from \"../../modules/action/action.js\";\r\nimport { GLOBAL_PERIOD, KA_SELECTS, RSS_SELECTS, SEANCE, MAP } from \"../../modules/state/state.js\";\r\n\r\n\r\n\r\n/**\r\n * Элементы интерфейса\r\n * Кнопки, открывающие модальные окна\r\n */\r\n\r\n// Кнопка открытия модального окна настроек\r\nconst buttonOpenSettings = document.querySelector('.button-settings');\r\n// Кнопка открытия модального окна выбора КА\r\nconst buttonOpenKA = document.querySelector('.button-select-ka');\r\n// Кнопка открытия модального окна выбора РСС\r\nconst buttonOpenRSS = document.querySelector('.button-select-rss');\r\n// Кнопка открытия модального окна авторизации\r\nconst buttonOpenLogin = document.querySelector('#btn-login');\r\n\r\n// Кнопка открытия модального окна: Сеансы связи => Планируемые => Варианты сеансов связи\r\nconst buttonOpenModalSession = document.querySelector('#ModalWindowGraph');\r\n// Кнопка открытия модального окна: Сеансы связи => Планируемые => Общая доступность связи\r\nconst buttonOpenAllModalSession = document.querySelector('#ModalWindowGraphSecond');\r\n// Кнопка открытия модального окна: РСС => Доступность КА для РСС => График\r\nconst buttonOpenGraphRss = document.querySelector('#btn-parameters-8-show-graph');\r\n// Кнопка открытия модального окна: Сеансы связи => Планируемые => Доступность связи для абонентов\r\nconst buttonOpenGraphRssAndKaGroup = document.querySelector('#ModalWindowGraphKaRssGroup');\r\n// Кнопка открытия модального окна: Абоненты => Доступность КА для абонентов => График\r\nconst buttonOpenGraphCallers = document.querySelector('#btn-parameters-3-show-graph');\r\n\r\n// Кнопка открытия модального окна: Частотный план => ЧПП => Частотно-поляризационный план\r\nconst buttonOpenFreeKaTable = document.querySelector('#btn-parameters-9-show-matrix');\r\n// Кнопка открытия модального окна: Занятость ОЧР => ЧП ОЧР => ЧП ОЧР\r\nconst buttonOpenCHP_OCHR = document.querySelector('#btn-parameters-10-show-matrix-second');\r\n// Кнопка открытия модального окна: Контроль => Занятость РСС => Занятость РСС\r\nconst buttonOpenRssMatrix = document.querySelector('#btn-parameters-19-show-matrix');\r\n\r\n\r\n// Кнопка открытия модального окна: Абоненты => Доступность КА для абонентов => Отчёт\r\nconst buttonOpenReportCallers = document.querySelector('#btn-report-callers-3');\r\n// Кнопка открытия модального окна: РСС => Доступные КА для РСС => Отчёт\r\nconst buttonOpenReportRss = document.querySelector('#btn-report-callers-8');\r\n// Кнопка открытия модального окна: КА => Орбиты/траектории => Отчёт\r\nconst buttonOpenReportOrbitTrajectory = document.querySelector('#btn-parameters-report-2');\r\n// Кнопка открытия модального окна: КА => Движение КА => Отчёт\r\nconst buttonOpenReportMoveKA = document.querySelector('#btn-parameters-reports-1');\r\n// Кнопка открытия модального окна: РСС => Размещение РСС => Отчёт\r\nconst buttonOpenReportPlacementRss = document.querySelector('#btn-param-6-report');\r\n// Кнопка открытия модального окна: Система => Общие сведения => Отчёт\r\nconst buttonOpenReportGeneralInfo = document.querySelector('#btn-parameters-report-4');\r\n\r\n//Кнопка открытия модального окна: Уведомления\r\nconst buttonOpenPopNotifs = document.querySelector('#btn-notifs-show');\r\n\r\nconst buttonOpenShowActiveSeans = document.querySelector('#panel-parameters-11 .show-diogram');\r\nconst buttonOpenShowArchiveSeans = document.querySelector('#panel-parameters-12 .show-diogram');\r\nconst buttonOpenKSYS= document.querySelector('#panel-parameters-14 .btn-modal');\r\n\r\n\r\nconst buttonOpenShowRssPlanAnten = document.querySelector('#panel-parameters-100 .show-diogram')\r\nconst buttonOpenShowKolision = document.querySelector('#panel-parameters-20 .show-diogram')\r\n\r\n/**\r\n * Инициализация модальных окон\r\n */\r\n// Модальное окно настроек\r\nexport const modalSettings = new Modal('modalWindow');\r\n// Модальное окно выбора КА\r\nexport const modalKA = new Modal('modalWindowChooseKA');\r\n// Модальное окно выбора РСС\r\nexport const modalRSS = new Modal('modalWindowChooseRSS');\r\n// Модальное окно вариантов сеансов связи\r\nexport const modalSession = new Modal('modalWindowGraph');\r\n// Модальное окно общей доступности связи\r\nexport const modalAllSession = new Modal('modalWindowGraphSecond');\r\n// Модальное окно графика доступности КА для абонентов\r\nexport const modalGraphCallers = new Modal('modalShowCellers');\r\n// Модальное окно графика доступности КА для РСС\r\nexport const modalGraphRss = new Modal('modalShowRSS');\r\n// Модальное окно частотно-поляризационного плана\r\nexport const modalFreeKaTable = new Modal('modalShowFreeKaTable');\r\n// Модальное окно доступности связи для абонентов\r\nexport const modalGraphKaRssGroup = new Modal('modalWindowGraphKaRssGroup');\r\n// Модальное окно ЧП ОЧР\r\nexport const modalCHP_OCHR = new Modal('modalCHP_OCHR');\r\n// Модальное окно Занятость РСС\r\nexport const modalRssMatrix = new Modal('modal_show_planRSSantenn');\r\n// Модальное окно авторизации\r\nexport const modalLogin = new Modal('modal-login');\r\n\r\n// Модальное окно отчета \"Абоненты => Доступность КА для абонентов\"\r\nexport const modalReportCallers = new Modal('modal-report-callers-3');\r\n// Модальное окно отчета \"РСС => Размещение РСС\"\r\nexport const modalReportRss = new Modal('modal-report-rss-8');\r\n// Модальное окно отчета \"КА => Орбиты/траектории\"\r\nexport const modalReportOrbitTrajectory = new Modal('modal-orbit-trajectory-reports');\r\n// Модальное окно отчета \"Система => Общие сведения\"\r\nexport const modalReportGeneralInfo = new Modal('modal-report-general-info');\r\n\r\nexport const modalShowActiveSeans = new Modal('modal-show-active-seans');\r\nexport const modalShowArchiveSeans = new Modal('modal-show-archive-seans');\r\nexport const modalShowKSYS = new Modal('modal-show-KSYS');\r\n\r\n// РСС\r\nexport const modalShowRssPlanAnten = new Modal('modal-show-rss-plan-anten');\r\nexport const modalShowPlanRSSKolision = new Modal('modal_show_planRSSKolision');\r\n\r\n\r\n// Установка полноэкранного режима для некоторых модальных окон\r\nmodalSession.fullScreen();\r\nmodalAllSession.fullScreen();\r\nmodalGraphCallers.fullScreen();\r\nmodalGraphRss.fullScreen();\r\nmodalFreeKaTable.fullScreen();\r\nmodalGraphKaRssGroup.fullScreen();\r\nmodalCHP_OCHR.fullScreen();\r\nmodalRssMatrix.fullScreen();\r\nmodalShowActiveSeans.fullScreen();\r\nmodalShowArchiveSeans.fullScreen();\r\nmodalShowKSYS.fullScreen();\r\nmodalShowRssPlanAnten.fullScreen();\r\nmodalShowPlanRSSKolision.fullScreen();\r\n\r\n// Модальное уведомление\r\nexport const modalNotification = new ModalNotification('.modal-notification');\r\nexport const modalPopNotifs = new ModalPopNotifs('#modal-popup-notif');\r\n\r\n/**\r\n * Обработчики событий\r\n * Обработчики кликов на кнопки, открывающие модальные окна\r\n */\r\n// При нажатии на кнопку отчет во вкладке КА => Движение КА, открывается модальное окно отчета \"КА => Орбиты/траектории\"\r\nbuttonOpenReportMoveKA.addEventListener('click', () => {\r\n    modalReportOrbitTrajectory.open();\r\n})\r\n\r\n// При нажатии на кнопку отчет во вкладке КА => Орбиты/траектории, открывается модальное окно отчета \"КА => Орбиты/траектории\"\r\nbuttonOpenReportOrbitTrajectory.addEventListener('click', () => {\r\n    modalReportOrbitTrajectory.open();\r\n})\r\n\r\n// При нажатии на кнопку отчет во вкладке Система => Общие сведения, открывается модальное окно отчета \"Система => Общие сведения\"\r\nbuttonOpenReportGeneralInfo.addEventListener('click', () => {\r\n    modalReportGeneralInfo.open();\r\n})\r\n\r\n// При нажатии на кнопку настроек, открывается модальное окно настроек\r\nbuttonOpenSettings.addEventListener('click', () => {\r\n    modalSettings.open();\r\n});\r\n\r\n// При нажатии на кнопку выбора КА, открывается модальное окно выбора КА и генерируется список чекбоксов орбит\r\nbuttonOpenKA.addEventListener('click', () => {\r\n    modalKA.open();\r\n    generateOrbitCheckboxes();\r\n});\r\n\r\n\r\n// При нажатии на кнопку Варианты сеансов связи во вкладке Сеансы связи => Планируемые, открывается модальное окно вариантов сеансов связи\r\nbuttonOpenModalSession.addEventListener('click', () => {\r\n    modalSession.open();\r\n});\r\n\r\n// При нажатии на кнопку выбора РСС, открывается модальное окно выбора РСС\r\nbuttonOpenRSS.addEventListener('click', () => {\r\n    modalRSS.open();\r\n});\r\n\r\n// При нажатии на кнопку Общая доступность связи во вкладке Сеансы связи => Планируемые, открывается модальное окно общей доступности связи\r\nbuttonOpenAllModalSession.addEventListener('click', () => {\r\n    modalAllSession.open();\r\n})\r\n\r\n// При нажатии на кнопку отчета во вкладке Абоненты => Доступность КА для абонентов, открывается модальное окно отчета \"Абоненты => Доступность КА для абонентов\"\r\nbuttonOpenReportCallers.addEventListener('click', () => {\r\n    modalReportCallers.open();\r\n})\r\n\r\n// При нажатии на кнопку график во вкладке Абоненты => Доступность КА для абонентов, открывается модальное окно графика доступности КА для абонентов\r\nbuttonOpenGraphCallers.addEventListener('click', () => {\r\n    modalGraphCallers.open();\r\n})\r\n\r\n// При нажатии на кнопку pop-up уведомлений, открывается модальное окно уведомлений\r\nbuttonOpenPopNotifs.addEventListener('click', () => {\r\n    modalPopNotifs.toggle();\r\n})\r\n\r\n// При нажатии на кнопку Частотно-поляризационный план во вкладке Частотный план => ЧПП, открывается модальное окно частотно-поляризационного плана\r\nbuttonOpenFreeKaTable.addEventListener('click', () => {\r\n    modalFreeKaTable.open();\r\n})\r\n\r\n// При нажатии на кнопку график во вкладке РСС => Доступность КА для РСС, открывается модальное окно графика доступности КА для РСС\r\nbuttonOpenGraphRss.addEventListener('click', () => {\r\n    modalGraphRss.open();\r\n})\r\n\r\n// При нажатии на кнопку Доступность связи для абонентов во вкладке Сеансы связи => Планируемые, открывается модальное окно графика доступности связи для абонентов\r\nbuttonOpenGraphRssAndKaGroup.addEventListener('click', () => {\r\n    modalGraphKaRssGroup.open();\r\n})\r\n\r\n// При нажатии на кнопку ЧП ОЧР во вкладке Занятость ОЧР => ЧП ОЧР, открывается модальное окно ЧП ОЧР\r\nbuttonOpenCHP_OCHR.addEventListener('click', () => {\r\n    modalCHP_OCHR.open();\r\n})\r\n\r\n\r\n// При нажатии на кнопку ЧП ОЧР во вкладке Занятость ОЧР => ЧП ОЧР, открывается модальное окно ЧП ОЧР\r\nbuttonOpenRssMatrix.addEventListener('click', () => {\r\n    modalRssMatrix.open();\r\n})\r\n\r\n// При нажатии на кнопку авторизации, открывается модальное окно авторизации\r\nbuttonOpenLogin.addEventListener('click', () => {\r\n    modalLogin.open();\r\n})\r\n\r\n// При нажатии на кнопку отчета во вкладке РСС => Доступные КА для РСС, открывается модальное окно отчета \"РСС => Размещение РСС\"\r\nbuttonOpenReportRss.addEventListener('click', () => {\r\n    modalReportRss.open();\r\n})\r\n\r\n// При нажатии на кнопку отчета во вкладке РСС => Размещение РСС, открывается модальное окно отчета \"РСС => Размещение РСС\"\r\nbuttonOpenReportPlacementRss.addEventListener('click', () => {\r\n    modalReportRss.open();\r\n})\r\n\r\nbuttonOpenShowActiveSeans.addEventListener('click', () => {\r\n    modalShowActiveSeans.open();\r\n})\r\n\r\nbuttonOpenShowArchiveSeans.addEventListener('click', () => {\r\n    modalShowArchiveSeans.open();\r\n})\r\n\r\nbuttonOpenKSYS.addEventListener('click', () => {\r\n    modalShowKSYS.open();\r\n})\r\n\r\nbuttonOpenShowRssPlanAnten.addEventListener('click', () => {\r\n    modalShowRssPlanAnten.open();\r\n})\r\n\r\nbuttonOpenShowKolision.addEventListener('click', () => {\r\n    modalShowPlanRSSKolision.open();\r\n})\r\n\r\n\r\n// РСС\r\n\r\n// modalShowRssPlanAnten.onOpen(() => {\r\n//     if (rssPlanAntenDiagram.isSetData) return\r\n//     modalShowRssPlanAnten.close();\r\n//     modalNotification.openNotification('Нет данных',\r\n//         'Необходимо произвести рассчеты.<br>Нажмите кнопку рассчитать на странице.',\r\n//         () => {\r\n//             pages.setActive('panel-parameters-100');\r\n//         }\r\n//     );\r\n// })\r\n\r\nmodalShowPlanRSSKolision.onOpen(() => {\r\n    if (rssPlanKolisionDiagram.isSetData) return\r\n    showKolision(KA_SELECTS.ids, RSS_SELECTS.ids, GLOBAL_PERIOD.start, GLOBAL_PERIOD.end, SEANCE.step, parseInt((GLOBAL_PERIOD.end.getTime() - GLOBAL_PERIOD.start.getTime()) / 60 / 1000));\r\n})\r\n\r\nmodalShowRssPlanAnten.onOpen(() => {\r\n    if (rssPlanAntenDiagram.isSetData) return\r\n    showRssPlanAnten(KA_SELECTS.ids, RSS_SELECTS.ids, GLOBAL_PERIOD.start, GLOBAL_PERIOD.end, SEANCE.step, parseInt((GLOBAL_PERIOD.end.getTime() - GLOBAL_PERIOD.start.getTime()) / 60 / 1000));\r\n})\r\n\r\nmodalRssMatrix.onOpen(() => {\r\n    console.log('modalRssMatrix')\r\n    if (zanRssTableControl.isCreated) return\r\n    showRssZan(\r\n        KA_SELECTS.ids, RSS_SELECTS.ids,\r\n        GLOBAL_PERIOD.start, GLOBAL_PERIOD.end, SEANCE.step,\r\n        parseInt((GLOBAL_PERIOD.end.getTime() - GLOBAL_PERIOD.start.getTime()) / 60 / 1000),\r\n    );\r\n})\r\n\r\n// Конец РСС\r\n\r\n/*\r\n* Добавляются проверки на данные для открытия модального окна\r\n* Если данные отсутствуют, то открывается модальное окно с уведомлением и перемещает на другую панель\r\n*/\r\n\r\nmodalReportCallers.onOpen(() => {\r\n    if (callersDiagramGant2.isSetData && generalDiagramGant.isSetData) return\r\n    modalReportCallers.close();\r\n    modalNotification.openNotification(\r\n        'Нет данных',\r\n        'Необходимо указать абонентов.<br>Нажмите на кнопку перейти, чтобы перейти на страницу выбора абонентов.',\r\n        () => {\r\n            pages.setActive('panel-parameters-3');\r\n        }\r\n    );\r\n})\r\n\r\n\r\nmodalReportOrbitTrajectory.onOpen(() => {\r\n\r\n    if (callersAndRssGroupDiagramGant.isSetData) return\r\n    modalReportOrbitTrajectory.close();\r\n    modalNotification.openNotification('Нет данных',\r\n        'Необходимо указать абонентов.<br>Нажмите на кнопку перейти, чтобы перейти на страницу выбора абонентов.',\r\n        () => {\r\n            pages.setActive('panel-parameters-3');\r\n        }\r\n    );\r\n\r\n    if (rssDiagramGant.isSetData) return\r\n    modalReportOrbitTrajectory.close();\r\n    modalNotification.openNotification('Нет данных',\r\n        'Необходимо рассчитать доступные КА для РСС.<br>Нажмите на кнопку перейти, чтобы перейти на страницу расчета доступных КА для РСС.',\r\n        () => {\r\n            pages.setActive('panel-parameters-8');\r\n        }\r\n    );\r\n})\r\n\r\n\r\nmodalSession.onOpen(() => {\r\n    if (callersDiagramGant2.isSetData && generalDiagramGant.isSetData) return\r\n    modalSession.close();\r\n    modalNotification.openNotification(\r\n        'Нет данных',\r\n        'Необходимо указать абонентов.<br>Нажмите на кнопку перейти, чтобы перейти на страницу выбора абонентов.',\r\n        () => {\r\n            pages.setActive('panel-parameters-3');\r\n        }\r\n    );\r\n})\r\n\r\nmodalAllSession.onOpen(() => {\r\n    if (callersDiagramGant.isSetData && sessionsDiagramGant.isSetData) return\r\n    modalAllSession.close();\r\n    modalNotification.openNotification('Нет данных',\r\n        'Необходимо указать абонентов.<br>Нажмите на кнопку перейти, чтобы перейти на страницу выбора абонентов.',\r\n        () => {\r\n            pages.setActive('panel-parameters-3');\r\n        }\r\n    );\r\n})\r\n\r\nmodalGraphCallers.onOpen(() => {\r\n    if (callersDiagramGant3.isSetData) return\r\n    modalGraphCallers.close();\r\n    modalNotification.openNotification('Нет данных',\r\n        'Необходимо указать абонентов.<br>Нажмите на кнопку перейти, чтобы перейти на страницу выбора абонентов.',\r\n        () => {\r\n            modalGraphCallers.close();\r\n        }\r\n    );\r\n})\r\n\r\n// modalGraphRss.onOpen(() => {\r\n//     if (rssDiagramGant.isSetData) return\r\n//     modalGraphRss.close();\r\n//     modalNotification.openNotification('Нет данных',\r\n//         'Необходимо рассчитать доступные КА для РСС.<br>Нажмите кнопку \"Рассчитать\".',\r\n//         () => {\r\n//             modalGraphCallers.close();\r\n//         }\r\n//     );\r\n// })\r\n\r\nmodalGraphRss.onOpen(() => {\r\n    if (rssDiagramGant.isSetData) return\r\n    showRssLoadSession(KA_SELECTS.ids, RSS_SELECTS.ids, GLOBAL_PERIOD.start, GLOBAL_PERIOD.end, SEANCE.step, parseInt((GLOBAL_PERIOD.end.getTime() - GLOBAL_PERIOD.start.getTime()) / 60 / 1000)); // Вызываем функцию для отображения РСС и сеанса загрузки\r\n})\r\n\r\nmodalGraphKaRssGroup.onOpen(() => {\r\n    if (callersAndRssGroupDiagramGant.isSetData) return\r\n    modalGraphKaRssGroup.close();\r\n    modalNotification.openNotification('Нет данных',\r\n        'Необходимо указать абонентов.<br>Нажмите на кнопку перейти, чтобы перейти на страницу выбора абонентов.',\r\n        () => {\r\n            pages.setActive('panel-parameters-3');\r\n        }\r\n    );\r\n})\r\n\r\nmodalReportRss.onOpen(() => {\r\n    if (rssDiagramGant.isSetData) return\r\n    modalReportRss.close();\r\n    modalNotification.openNotification('Нет данных',\r\n        'Необходимо рассчитать доступность КА для РСС.<br>Нажмите на кнопку перейти, чтобы перейти на страницу расчета.',\r\n        () => {\r\n            pages.setActive('panel-parameters-8');\r\n        }\r\n    );\r\n})\r\n\r\nmodalCHP_OCHR.onOpen(() => {\r\n    chChPlanTablePanel.refresh()\r\n})\r\n\r\nmodalCHP_OCHR.onClose(() => {\r\n    chChPlanTablePanel.setAutorefresh(false)\r\n})\r\n\r\n\r\nmodalFreeKaTable.onOpen(() => {\r\n    hhpTablePanel.refresh()\r\n})\r\n\r\n\r\nmodalFreeKaTable.onClose(() => {\r\n    hhpTablePanel.setAutorefresh(false)\r\n})",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/modules/modals/modals.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 561,
    "kind": "variable",
    "name": "buttonOpenSettings",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenSettings",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": "Элементы интерфейса\nКнопки, открывающие модальные окна",
    "lineNumber": 20,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 562,
    "kind": "variable",
    "name": "buttonOpenKA",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenKA",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 563,
    "kind": "variable",
    "name": "buttonOpenRSS",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenRSS",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 564,
    "kind": "variable",
    "name": "buttonOpenLogin",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenLogin",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 565,
    "kind": "variable",
    "name": "buttonOpenModalSession",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenModalSession",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 566,
    "kind": "variable",
    "name": "buttonOpenAllModalSession",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenAllModalSession",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 567,
    "kind": "variable",
    "name": "buttonOpenGraphRss",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenGraphRss",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 568,
    "kind": "variable",
    "name": "buttonOpenGraphRssAndKaGroup",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenGraphRssAndKaGroup",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 569,
    "kind": "variable",
    "name": "buttonOpenGraphCallers",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenGraphCallers",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 570,
    "kind": "variable",
    "name": "buttonOpenFreeKaTable",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenFreeKaTable",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 571,
    "kind": "variable",
    "name": "buttonOpenCHP_OCHR",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenCHP_OCHR",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 572,
    "kind": "variable",
    "name": "buttonOpenRssMatrix",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenRssMatrix",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 573,
    "kind": "variable",
    "name": "buttonOpenReportCallers",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenReportCallers",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 574,
    "kind": "variable",
    "name": "buttonOpenReportRss",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenReportRss",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 575,
    "kind": "variable",
    "name": "buttonOpenReportOrbitTrajectory",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenReportOrbitTrajectory",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 576,
    "kind": "variable",
    "name": "buttonOpenReportMoveKA",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenReportMoveKA",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 577,
    "kind": "variable",
    "name": "buttonOpenReportPlacementRss",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenReportPlacementRss",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 578,
    "kind": "variable",
    "name": "buttonOpenReportGeneralInfo",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenReportGeneralInfo",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 579,
    "kind": "variable",
    "name": "buttonOpenPopNotifs",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenPopNotifs",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 580,
    "kind": "variable",
    "name": "buttonOpenShowActiveSeans",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenShowActiveSeans",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 581,
    "kind": "variable",
    "name": "buttonOpenShowArchiveSeans",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenShowArchiveSeans",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 582,
    "kind": "variable",
    "name": "buttonOpenKSYS",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenKSYS",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 583,
    "kind": "variable",
    "name": "buttonOpenShowRssPlanAnten",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenShowRssPlanAnten",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 584,
    "kind": "variable",
    "name": "buttonOpenShowKolision",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~buttonOpenShowKolision",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 585,
    "kind": "variable",
    "name": "modalSettings",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalSettings",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalSettings}",
    "description": "Инициализация модальных окон",
    "lineNumber": 75,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 586,
    "kind": "variable",
    "name": "modalKA",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalKA",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalKA}",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 587,
    "kind": "variable",
    "name": "modalRSS",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalRSS",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalRSS}",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 588,
    "kind": "variable",
    "name": "modalSession",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalSession",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalSession}",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 589,
    "kind": "variable",
    "name": "modalAllSession",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalAllSession",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalAllSession}",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 590,
    "kind": "variable",
    "name": "modalGraphCallers",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalGraphCallers",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalGraphCallers}",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 591,
    "kind": "variable",
    "name": "modalGraphRss",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalGraphRss",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalGraphRss}",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 592,
    "kind": "variable",
    "name": "modalFreeKaTable",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalFreeKaTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalFreeKaTable}",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 593,
    "kind": "variable",
    "name": "modalGraphKaRssGroup",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalGraphKaRssGroup",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalGraphKaRssGroup}",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 594,
    "kind": "variable",
    "name": "modalCHP_OCHR",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalCHP_OCHR",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalCHP_OCHR}",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 595,
    "kind": "variable",
    "name": "modalRssMatrix",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalRssMatrix",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalRssMatrix}",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 596,
    "kind": "variable",
    "name": "modalLogin",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalLogin",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalLogin}",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 597,
    "kind": "variable",
    "name": "modalReportCallers",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalReportCallers",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalReportCallers}",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 598,
    "kind": "variable",
    "name": "modalReportRss",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalReportRss",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalReportRss}",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 599,
    "kind": "variable",
    "name": "modalReportOrbitTrajectory",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalReportOrbitTrajectory",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalReportOrbitTrajectory}",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 600,
    "kind": "variable",
    "name": "modalReportGeneralInfo",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalReportGeneralInfo",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalReportGeneralInfo}",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 601,
    "kind": "variable",
    "name": "modalShowActiveSeans",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalShowActiveSeans",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalShowActiveSeans}",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 602,
    "kind": "variable",
    "name": "modalShowArchiveSeans",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalShowArchiveSeans",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalShowArchiveSeans}",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 603,
    "kind": "variable",
    "name": "modalShowKSYS",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalShowKSYS",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalShowKSYS}",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 604,
    "kind": "variable",
    "name": "modalShowRssPlanAnten",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalShowRssPlanAnten",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalShowRssPlanAnten}",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 605,
    "kind": "variable",
    "name": "modalShowPlanRSSKolision",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalShowPlanRSSKolision",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalShowPlanRSSKolision}",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 606,
    "kind": "variable",
    "name": "modalNotification",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalNotification",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalNotification}",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/modal/ModalNotification.js~ModalNotification"
      ]
    }
  },
  {
    "__docId__": 607,
    "kind": "variable",
    "name": "modalPopNotifs",
    "memberof": "ka/modules/modals/modals.js",
    "static": true,
    "longname": "ka/modules/modals/modals.js~modalPopNotifs",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/modals/modals.js",
    "importStyle": "{modalPopNotifs}",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 608,
    "kind": "file",
    "name": "ka/modules/monitoring/monitoring.js",
    "content": "import { Interval } from \"../../components/interval/Interval.js\";\r\nimport { showLastConnection } from \"../action/action.js\";\r\n\r\n/**\r\n * @description \r\n * Получает элемент интерфейса, кнопку,\r\n * которая запускает или останавливает\r\n * мониторинг.\r\n */\r\nconst btnMonitoringLastConnection = document.querySelector('#btn-param-7');\r\n\r\n/**\r\n * @description \r\n * Убирает атрибут disabled у кнопки,\r\n * что позволяет ее использовать.\r\n */\r\nbtnMonitoringLastConnection.disabled = false\r\n\r\n/**\r\n * @description \r\n * Создает объект класса Interval, \r\n * который будет использоваться для\r\n * запуска интервала.\r\n * \r\n * @param {number} [2] - интервал в секундах\r\n */\r\nexport const interval = new Interval(2);\r\n\r\n\r\n/**\r\n * @description \r\n * Устанавливает callback, который будет\r\n * вызван, когда интервал будет запущен.\r\n * \r\n * @param {function} - функция, которая будет\r\n *                      вызвана, когда интервал\r\n *                      будет запущен.\r\n */\r\ninterval.onStartCallback(() => {\r\n    btnMonitoringLastConnection.innerHTML = 'Остановить';\r\n});\r\n\r\n/**\r\n * @description \r\n * Устанавливает callback, который будет\r\n * вызван, когда интервал будет остановлен.\r\n * \r\n * @param {function} - функция, которая будет\r\n *                      вызвана, когда интервал\r\n *                      будет остановлен.\r\n */\r\ninterval.onStopCallback(() => {\r\n    btnMonitoringLastConnection.innerHTML = 'Запустить';\r\n});\r\n\r\n/**\r\n * @description \r\n * Устанавливает callback, который будет\r\n * вызван, когда интервал будет выполнен.\r\n * \r\n * @param {function} - функция, которая будет\r\n *                      вызвана, когда интервал\r\n *                      будет выполнен.\r\n */\r\ninterval.setCallback(() => {\r\n    let btnText = btnMonitoringLastConnection.innerHTML + '.';\r\n    if (btnText.length > 'Остановить...'.length) {\r\n        btnText = 'Остановить.';\r\n    }\r\n    btnMonitoringLastConnection.innerHTML = btnText;\r\n    showLastConnection();\r\n});\r\n\r\n/**\r\n * @description \r\n * Добавляет обработчик события 'click'\r\n * на кнопку мониторинга.\r\n * \r\n * @param {function} - функция, которая будет\r\n *                      вызвана, когда на кнопку\r\n *                      будет кликнут.\r\n */\r\nbtnMonitoringLastConnection.addEventListener('click', () => {\r\n    interval.toggle();\r\n});\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/modules/monitoring/monitoring.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 609,
    "kind": "variable",
    "name": "btnMonitoringLastConnection",
    "memberof": "ka/modules/monitoring/monitoring.js",
    "static": true,
    "longname": "ka/modules/monitoring/monitoring.js~btnMonitoringLastConnection",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/monitoring/monitoring.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "Получает элемент интерфейса, кнопку,\nкоторая запускает или останавливает\nмониторинг."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 610,
    "kind": "variable",
    "name": "interval",
    "memberof": "ka/modules/monitoring/monitoring.js",
    "static": true,
    "longname": "ka/modules/monitoring/monitoring.js~interval",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/monitoring/monitoring.js",
    "importStyle": "{interval}",
    "description": "",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "Создает объект класса Interval, \nкоторый будет использоваться для\nзапуска интервала."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "2",
        "description": "интервал в секундах"
      }
    ],
    "type": {
      "types": [
        "ka/components/interval/Interval.js~Interval"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "file",
    "name": "ka/modules/pages/pages.js",
    "content": "import Pages from \"../../components/pages/Pages.js\";\r\nimport { activeTablePanel, archiveTablePanel, controlKSUS, controlSOVKSYS } from \"../tables/tables.js\";\r\nimport { showActiveSeans, showRss } from \"../action/action.js\";\r\nimport { animate } from \"../animations/animations.js\";\r\nimport { drawCallers, kaLayers } from \"../map/map.js\";\r\nimport { callersLayers } from \"../map/map.js\";\r\nimport { GLOBAL_PERIOD, KA_SELECTS, RSS_SELECTS } from \"../state/state.js\";\r\nimport { RSS_CHECKBOX } from \"../checkboxManager/checkboxManager.js\";\r\nimport { interval } from \"../monitoring/monitoring.js\";\r\n\r\n\r\n/**\r\n * Создаем навигационную панель\r\n * @type {Pages}\r\n */\r\nexport const pages = new Pages('left-menu', 'right-panels', 'header-title-2', 'panel-parameters-4');\r\n\r\n/**\r\n * Абоненты - Доступность КА для абонентов\r\n * Обработчик события изменения active панели\r\n * @param {string} active - active панель\r\n */\r\npages.addOnChangeCallback((active) => {\r\n    if (active === 'panel-parameters-3') {\r\n        // Скрываем слой областей КА\r\n        kaLayers.areaLayer.setVisible(false);\r\n        // Если количество точек на карте меньше максимального - разрешаем рисование\r\n        if (callersLayers.iconLayer.getSource().getFeatures().length !== drawCallers.get('max')) {\r\n            drawCallers.setActive(true);\r\n        }\r\n    } else {\r\n        // Иначе запрещаем рисование\r\n        drawCallers.setActive(false);\r\n    }\r\n});\r\n\r\n/**\r\n * Панель движения КА\r\n * Обработчик события изменения active панели\r\n * @param {string} active - active панель\r\n */\r\npages.addOnChangeCallback((active) => {\r\n    if (active === 'panel-parameters-1') {\r\n        // animate.start();\r\n    } {\r\n        animate.stop();\r\n    }\r\n});\r\n\r\n/**\r\n * Панель орбиты\r\n * Обработчик события изменения active панели\r\n * @param {string} active - active панель\r\n */\r\npages.addOnChangeCallback((active) => {\r\n    if (active === 'panel-parameters-2') {\r\n        // Показываем слой областей КА\r\n        kaLayers.areaLayer.setVisible(true);\r\n    } {\r\n        // animate.stop();\r\n    }\r\n});\r\n\r\n/**\r\n * Панель РСС - Доступность КА для РСС\r\n * Обработчик события изменения active панели\r\n * @param {string} active - active панель\r\n */\r\npages.addOnChangeCallback((active) => {\r\n    if (active === 'panel-parameters-8') {\r\n        // Скрываем слой областей КА\r\n        kaLayers.areaLayer.setVisible(false);\r\n        // Показываем РСС\r\n        showRss(RSS_SELECTS.ids);\r\n    } {\r\n\r\n    }\r\n});\r\n\r\n/**\r\n * Доступность КА для РСС и положение рсс\r\n * Обработчик события изменения active панели\r\n * @param {string} active - active панель\r\n */\r\npages.addOnChangeCallback((active) => {\r\n    const activeList = [\r\n        'panel-parameters-8',\r\n        'panel-parameters-6',\r\n        'panel-parameters-100',\r\n        'panel-parameters-19',\r\n        'panel-parameters-20',\r\n    ]\r\n    if (\r\n        activeList.includes(active)\r\n    ) {\r\n        // Показываем чекбокс РСС\r\n        RSS_CHECKBOX.checked(true);\r\n    } else {\r\n        // Скрываем чекбокс РСС\r\n        RSS_CHECKBOX.checked(false);\r\n    }\r\n});\r\n\r\n/**\r\n * Доступность КА для РСС и положение рсс\r\n * Обработчик события изменения active панели\r\n * @param {string} active - active панель\r\n */\r\npages.addOnChangeCallback((active) => {\r\n    if (active === 'panel-parameters-7') {\r\n    } else {\r\n        // Останавливаем отображение интервала\r\n        interval.stop();\r\n    }\r\n});\r\n\r\npages.addOnChangeCallback((active) => {\r\n    if (active === 'panel-parameters-11') {\r\n        activeTablePanel.refresh()\r\n        // showActiveSeans(GLOBAL_PERIOD.start, GLOBAL_PERIOD.end);\r\n    } else {\r\n        activeTablePanel.setAutorefresh(false)\r\n    }\r\n});\r\n\r\npages.addOnChangeCallback((active) => {\r\n    if (active === 'panel-parameters-12') {\r\n        archiveTablePanel.refresh()\r\n        // showActiveSeans(GLOBAL_PERIOD.start, GLOBAL_PERIOD.end);\r\n    } else {\r\n        archiveTablePanel.setAutorefresh(false)\r\n    }\r\n});\r\n\r\npages.addOnChangeCallback((active) => {\r\n    if (active === 'panel-parameters-14') {\r\n        controlKSUS.refresh()\r\n        // showActiveSeans(GLOBAL_PERIOD.start, GLOBAL_PERIOD.end);\r\n    } else {\r\n        controlKSUS.setAutorefresh(false)\r\n    }\r\n});\r\n\r\n\r\npages.addOnChangeCallback((active) => {\r\n    if (active === 'panel-parameters-18') {\r\n        controlSOVKSYS.refresh()\r\n        // showActiveSeans(GLOBAL_PERIOD.start, GLOBAL_PERIOD.end);\r\n    } else {\r\n        controlSOVKSYS.setAutorefresh(false)\r\n    }\r\n});\r\n\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/modules/pages/pages.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 612,
    "kind": "variable",
    "name": "pages",
    "memberof": "ka/modules/pages/pages.js",
    "static": true,
    "longname": "ka/modules/pages/pages.js~pages",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/pages/pages.js",
    "importStyle": "{pages}",
    "description": "Создаем навигационную панель",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "Pages"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 613,
    "kind": "file",
    "name": "ka/modules/saveScreen/saveScreen.js",
    "content": "import ModalPopNotifs from \"../../components/modal/ModalPopNotifs.js\";\r\nimport { modalPopNotifs } from \"../modals/modals.js\";\r\n\r\n/**\r\n * @function downloadElement\r\n * @description Функция для сохранения элемента страницы в png\r\n * @param {HTMLElement} element - элемент, который будет сохранен\r\n * @param {string} filename - имя файла, которое будет дано сохраненному файлу\r\n */\r\nexport function downloadElement(element, filename = 'screen-element') {\r\n    domtoimage.toPng(element, {\r\n        width: element.scrollWidth + 25,\r\n        height: element.scrollHeight + 25,\r\n        bgcolor: 'white',\r\n        style: {\r\n            'overflow': 'hidden'\r\n        }\r\n    })\r\n        .then(function (dataUrl) {\r\n            const link = document.createElement('a');\r\n            link.download = `${filename}.png`;\r\n            link.href = dataUrl;\r\n            link.click();\r\n        })\r\n        .catch(function (error) {\r\n            modalPopNotifs.addNotif('Ошибка создания изображения', `Не удалось создать изображение, используйте браузер Chrome.`, ModalPopNotifs.TYPES.ERROR);\r\n        });\r\n}\r\n\r\n\r\n// Планируемые => Общая доступность связи (кнопка) => Таймлайн (1)\r\ndocument.querySelector('#modalWindowGraphSecond-save').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modalWindowGraphSecond .diagram-gant.digram-gant--height-timeline'))\r\n});\r\n\r\n// Планируемые => Общая доступность связи (кнопка) => Доступность связи для абонентов (2)\r\ndocument.querySelector('#modalWindowGraphSecond-save-2').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modalWindowGraphSecond .diagram-gant.diagram-gant-2'))\r\n});\r\n\r\n// Планируемые => Общая доступность связи (кнопка) => Общая доступность связи (3)\r\ndocument.querySelector('#modalWindowGraphSecond-save-3').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modalWindowGraphSecond .diagram-gant.diagram-line-all'))\r\n});\r\n\r\n// Планируемые => Варианты сеансов связи (кнопка) => Варианты сеансов связи (2)\r\ndocument.querySelector('#modalWindowGraph-save').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modalWindowGraph .diagram-gant-sessions'))\r\n})\r\n\r\n// Абоненты => Доступность КА для абонентов(кнопка) => График(кнопка)\r\ndocument.querySelector('#modalShowCellers-save').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modalShowCellers .diagram-gant'))\r\n})\r\n\r\n// РСС => Доступность КА для РСС (кнопка) => РСС. Расписание доступности КА для РСС\r\ndocument.querySelector('#modalShowRSS-save').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modalShowRSS .diagram-gant'))\r\n})\r\n\r\n// Планируемые => Доступность связи для абонентов (кнопка)\r\ndocument.querySelector('#modalWindowGraphKaRssGroup-save').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modalWindowGraphKaRssGroup .diagram-gant'))\r\n})\r\n\r\n// ЧПП => Частотно-поляризационный план (кнопка)\r\ndocument.querySelector('#modalShowFreeKaTable-save').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modalShowFreeKaTable .wrapper-satelliteTableContaine'))\r\n})\r\n\r\n// Занятость ОЧР => ЧП ОЧР (кнопка) (1)\r\ndocument.querySelector('#modalCHP_OCHR-save').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modalCHP_OCHR #channel-plan-table table'))\r\n})\r\n\r\n\r\n// Сеансы связи => Активные => График (кнопка) (1)\r\ndocument.querySelector('#modal-show-active-seans-save').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modal-show-active-seans .diogram-active'))\r\n})\r\n\r\n\r\n// Сеансы связи => Архивные => График (кнопка) (1)\r\ndocument.querySelector('#modal-show-archive-save').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modal-show-archive-seans .diogram-archive'))\r\n})\r\n\r\n\r\n// Шлюзы взаимодействия => БЦ СУРР => Просмотр (кнопка) (1)\r\ndocument.querySelector('#modal-show-KSYS-save').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modal-show-KSYS .KSUS'))\r\n})\r\n\r\n// Мониторинг => Занятость антенн РСС => Занятость РСС (кнопка) (1)\r\ndocument.querySelector('#modal-show-planRSSantenn-save').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modal_show_planRSSantenn .ZanRssTable'))\r\n})\r\n\r\n// Планирование антенных постов => План работы антенн РСС => График (кнопка) (1)\r\ndocument.querySelector('#modal-diogram-dostup-save').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modal-show-rss-plan-anten .diogram-dostup'))\r\n})\r\n\r\n// РСС => Коллизии => График (кнопка) (1)\r\ndocument.querySelector('#modal_show_planRSSKolision-save').addEventListener('click', () => {\r\n    downloadElement(document.querySelector('#modal_show_planRSSKolision .rss-kolision-diogram'))\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/modules/saveScreen/saveScreen.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 614,
    "kind": "function",
    "name": "downloadElement",
    "memberof": "ka/modules/saveScreen/saveScreen.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/saveScreen/saveScreen.js~downloadElement",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/saveScreen/saveScreen.js",
    "importStyle": "{downloadElement}",
    "description": "",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "downloadElement"
      },
      {
        "tagName": "@description",
        "tagValue": "Функция для сохранения элемента страницы в png"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "элемент, который будет сохранен"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "имя файла, которое будет дано сохраненному файлу"
      }
    ],
    "return": null
  },
  {
    "__docId__": 615,
    "kind": "file",
    "name": "ka/modules/state/handlerState.js",
    "content": "import dateUtils from \"../../utils/dateUtils.js\";\r\nimport { pages } from \"../pages/pages.js\";\r\nimport { GLOBAL_PERIOD, KA_SELECTS, RSS_SELECTS, SEANCE, MAP, USER} from \"./state.js\";\r\nimport { TimeInput } from \"../../ui/time-input/TimeInput.js\";\r\n\r\n/**\r\n * Инициализация элементов интерфейса и обработчиков событий для управления глобальным периодом,\r\n * выбором КА и РСС, интервалами сеанса связи и шагом траектории на карте.\r\n */\r\n\r\n// Получаем ссылки на элементы ввода даты и времени\r\nconst startDateInput = document.querySelector('.from-date.default-input');\r\ndateUtils.setInputDate(startDateInput, GLOBAL_PERIOD.start); // Устанавливаем начальную дату\r\nconst startTimeInput = document.querySelector('.from-time.default-input');\r\ndateUtils.setInputTime(startTimeInput, GLOBAL_PERIOD.start); // Устанавливаем начальное время\r\nconst endDateInput = document.querySelector('.to-date.default-input');\r\ndateUtils.setInputDate(endDateInput, GLOBAL_PERIOD.end); // Устанавливаем конечную дату\r\nconst endTimeInput = document.querySelector('.to-time.default-input');\r\ndateUtils.setInputTime(endTimeInput, GLOBAL_PERIOD.end); // Устанавливаем конечное время\r\n\r\n// Получаем ссылки на чекбоксы \"КА\" и \"РСС\"\r\nconst checkBoxKa = document.querySelector('#list-ka');\r\ncheckBoxKa.checked = KA_SELECTS.isSelect; // Устанавливаем состояние чекбокса КА\r\nconst checkBoxRss = document.querySelector('#list-rss');\r\ncheckBoxRss.checked = RSS_SELECTS.isSelect; // Устанавливаем состояние чекбокса РСС\r\n\r\nconst inputTimeSeanceInterval = document.querySelector('#operational-time-abonent');\r\ndateUtils.setInputTotalSeconds(inputTimeSeanceInterval, SEANCE.interval); // Устанавливаем интервал сеанса\r\nconst inputTimeSeanceStep = document.querySelector('#step-communication-session');\r\ndateUtils.setInputTotalSeconds(inputTimeSeanceStep, SEANCE.step); // Устанавливаем шаг сеанса\r\n\r\nconst inputMapStepTrajectory = document.querySelector('#step-sec-2');\r\ndateUtils.setInputTotalSeconds(inputMapStepTrajectory, MAP.stepTrajectory); // Устанавливаем шаг траектории на карте\r\n\r\n/**\r\n * Обновление текущего периода.\r\n * Функция обновляет начальную и конечную даты и время в соответствии с текущим временем и интервалом сеанса.\r\n */\r\nexport const updateCurrentPeriod = () => {\r\n    GLOBAL_PERIOD.start = new Date();\r\n    GLOBAL_PERIOD.end = new Date(new Date().getTime() + SEANCE.interval * 1000);\r\n    dateUtils.setInputDate(startDateInput, GLOBAL_PERIOD.start);\r\n    dateUtils.setInputTime(startTimeInput, GLOBAL_PERIOD.start);\r\n    dateUtils.setInputDate(endDateInput, GLOBAL_PERIOD.end);\r\n    dateUtils.setInputTime(endTimeInput, GLOBAL_PERIOD.end);\r\n}\r\n\r\n// Добавляем к кнопке обновления \r\ndocument.querySelector('.wrapper-datetime .refresh').addEventListener('click', updateCurrentPeriod);\r\n// Для увелечения даты на 30 минут\r\ndocument.querySelector('.wrapper-datetime .plus').addEventListener('click', () => {\r\n    GLOBAL_PERIOD.end = new Date(GLOBAL_PERIOD.end.getTime() + 30 * 60 * 1000);\r\n    dateUtils.setInputDate(endDateInput, GLOBAL_PERIOD.end);\r\n    dateUtils.setInputTime(endTimeInput, GLOBAL_PERIOD.end);\r\n});\r\n// Для уменьшения даты на 30 минут\r\n// Если меньше текущей не давать\r\ndocument.querySelector('.wrapper-datetime .minus').addEventListener('click', () => {\r\n    if (new Date(GLOBAL_PERIOD.end.getTime() - 30 * 60 * 1000).getTime() <= GLOBAL_PERIOD.start.getTime()) {\r\n        return;\r\n    }\r\n    GLOBAL_PERIOD.end = new Date(GLOBAL_PERIOD.end.getTime() - 30 * 60 * 1000);\r\n    dateUtils.setInputDate(endDateInput, GLOBAL_PERIOD.end);\r\n    dateUtils.setInputTime(endTimeInput, GLOBAL_PERIOD.end);\r\n});\r\n\r\n\r\n/**\r\n * Обработчик изменения начального периода глобального времени.\r\n * Функция обновляет начальную дату и время глобального периода в соответствии с выбором пользователя.\r\n */\r\nfunction handleStartGlobalPeriodChange() {\r\n    GLOBAL_PERIOD.start = dateUtils.getDateFromInputs(startDateInput, startTimeInput);\r\n}\r\n\r\n/**\r\n * Обработчик изменения конечного периода глобального времени.\r\n * Функция обновляет конечную дату и время глобального периода в соответствии с выбором пользователя.\r\n */\r\nfunction handleEndGlobalPeriodChange() {\r\n    GLOBAL_PERIOD.end = dateUtils.getDateFromInputs(endDateInput, endTimeInput);\r\n}\r\n\r\n// Добавляем обработчики изменений даты и времени\r\nstartDateInput.addEventListener('change', handleStartGlobalPeriodChange);\r\nstartTimeInput.addEventListener('change', handleStartGlobalPeriodChange);\r\nendDateInput.addEventListener('change', handleEndGlobalPeriodChange);\r\nendTimeInput.addEventListener('change', handleEndGlobalPeriodChange);\r\n\r\n// Добавляем обработчики изменения состояния чекбоксов \"КА\" и \"РСС\"\r\ncheckBoxKa.addEventListener('change', () => {\r\n    KA_SELECTS.isSelect = checkBoxKa.checked;\r\n});\r\ncheckBoxRss.addEventListener('change', () => {\r\n    RSS_SELECTS.isSelect = checkBoxRss.checked;\r\n});\r\n\r\n// Обработчики изменения интервалов и шагов\r\ninputTimeSeanceInterval.addEventListener('change', (event) => {\r\n    SEANCE.interval = dateUtils.getInputTotalSeconds(event.target);\r\n});\r\ninputTimeSeanceStep.addEventListener('change', (event) => {\r\n    SEANCE.step = dateUtils.getInputTotalSeconds(event.target);\r\n});\r\ninputMapStepTrajectory.addEventListener('change', (event) => {\r\n    MAP.stepTrajectory = dateUtils.getInputTotalSeconds(event.target);\r\n});\r\n\r\n// Обработка событий от состояния пользователя\r\nUSER.on('access', (value) => {\r\n    if (value === '1') {\r\n        pages.threeMenu.disabledButtons([\r\n            'panel-parameters-9',\r\n            'panel-parameters-10',\r\n            'panel-parameters-5',\r\n            // 'panel-parameters-7',\r\n            'panel-parameters-13',\r\n            'panel-parameters-14',\r\n            'panel-parameters-15',\r\n            'panel-parameters-16',\r\n            'panel-parameters-17',\r\n            'panel-parameters-11',\r\n            'panel-parameters-12',\r\n            'panel-parameters-18',\r\n            'panel-parameters-19',\r\n        ]);\r\n    }\r\n    if (value === '2') {\r\n        pages.threeMenu.enabledButtons([\r\n            'panel-parameters-9',\r\n            'panel-parameters-10',\r\n            'panel-parameters-5',\r\n            // 'panel-parameters-7',\r\n            'panel-parameters-13',\r\n            'panel-parameters-14',\r\n            'panel-parameters-15',\r\n            'panel-parameters-16',\r\n            'panel-parameters-17',\r\n            'panel-parameters-11',\r\n            'panel-parameters-12',\r\n            'panel-parameters-18',\r\n            'panel-parameters-19',\r\n        ]);\r\n    }\r\n});\r\n\r\n// Инициализация начального состояния\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    USER.set('access', '1');\r\n});\r\n\r\n// Инициализация кастомного time input\r\nconst timeInput = document.getElementById('period-view-sessions');\r\ntimeInput.value = dateUtils.secondsToHMS(SEANCE.view_session);\r\nconst timeInputInstance = new TimeInput(timeInput);\r\n\r\n\r\ntimeInput.addEventListener('change', (event) => {\r\n    SEANCE.view_session = dateUtils.getInputTotalSeconds(timeInput);\r\n});\r\n\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/modules/state/handlerState.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 616,
    "kind": "variable",
    "name": "startDateInput",
    "memberof": "ka/modules/state/handlerState.js",
    "static": true,
    "longname": "ka/modules/state/handlerState.js~startDateInput",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/state/handlerState.js",
    "importStyle": null,
    "description": "Инициализация элементов интерфейса и обработчиков событий для управления глобальным периодом,\nвыбором КА и РСС, интервалами сеанса связи и шагом траектории на карте.",
    "lineNumber": 12,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 617,
    "kind": "variable",
    "name": "startTimeInput",
    "memberof": "ka/modules/state/handlerState.js",
    "static": true,
    "longname": "ka/modules/state/handlerState.js~startTimeInput",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/state/handlerState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 618,
    "kind": "variable",
    "name": "endDateInput",
    "memberof": "ka/modules/state/handlerState.js",
    "static": true,
    "longname": "ka/modules/state/handlerState.js~endDateInput",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/state/handlerState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 619,
    "kind": "variable",
    "name": "endTimeInput",
    "memberof": "ka/modules/state/handlerState.js",
    "static": true,
    "longname": "ka/modules/state/handlerState.js~endTimeInput",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/state/handlerState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 620,
    "kind": "variable",
    "name": "checkBoxKa",
    "memberof": "ka/modules/state/handlerState.js",
    "static": true,
    "longname": "ka/modules/state/handlerState.js~checkBoxKa",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/state/handlerState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 621,
    "kind": "variable",
    "name": "checkBoxRss",
    "memberof": "ka/modules/state/handlerState.js",
    "static": true,
    "longname": "ka/modules/state/handlerState.js~checkBoxRss",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/state/handlerState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 622,
    "kind": "variable",
    "name": "inputTimeSeanceInterval",
    "memberof": "ka/modules/state/handlerState.js",
    "static": true,
    "longname": "ka/modules/state/handlerState.js~inputTimeSeanceInterval",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/state/handlerState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 623,
    "kind": "variable",
    "name": "inputTimeSeanceStep",
    "memberof": "ka/modules/state/handlerState.js",
    "static": true,
    "longname": "ka/modules/state/handlerState.js~inputTimeSeanceStep",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/state/handlerState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 624,
    "kind": "variable",
    "name": "inputMapStepTrajectory",
    "memberof": "ka/modules/state/handlerState.js",
    "static": true,
    "longname": "ka/modules/state/handlerState.js~inputMapStepTrajectory",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/state/handlerState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 625,
    "kind": "function",
    "name": "updateCurrentPeriod",
    "memberof": "ka/modules/state/handlerState.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/state/handlerState.js~updateCurrentPeriod",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/state/handlerState.js",
    "importStyle": "{updateCurrentPeriod}",
    "description": "Обновление текущего периода.\nФункция обновляет начальную и конечную даты и время в соответствии с текущим временем и интервалом сеанса.",
    "lineNumber": 39,
    "params": [],
    "return": null
  },
  {
    "__docId__": 626,
    "kind": "function",
    "name": "handleStartGlobalPeriodChange",
    "memberof": "ka/modules/state/handlerState.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/state/handlerState.js~handleStartGlobalPeriodChange",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/state/handlerState.js",
    "importStyle": null,
    "description": "Обработчик изменения начального периода глобального времени.\nФункция обновляет начальную дату и время глобального периода в соответствии с выбором пользователя.",
    "lineNumber": 72,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 627,
    "kind": "function",
    "name": "handleEndGlobalPeriodChange",
    "memberof": "ka/modules/state/handlerState.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/state/handlerState.js~handleEndGlobalPeriodChange",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/state/handlerState.js",
    "importStyle": null,
    "description": "Обработчик изменения конечного периода глобального времени.\nФункция обновляет конечную дату и время глобального периода в соответствии с выбором пользователя.",
    "lineNumber": 80,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 628,
    "kind": "variable",
    "name": "timeInput",
    "memberof": "ka/modules/state/handlerState.js",
    "static": true,
    "longname": "ka/modules/state/handlerState.js~timeInput",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/state/handlerState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 629,
    "kind": "variable",
    "name": "timeInputInstance",
    "memberof": "ka/modules/state/handlerState.js",
    "static": true,
    "longname": "ka/modules/state/handlerState.js~timeInputInstance",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/state/handlerState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "ka/ui/time-input/TimeInput.js~TimeInput"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 630,
    "kind": "file",
    "name": "ka/modules/state/state.js",
    "content": "import State from \"../../components/state/State.js\";\r\n\r\n/**\r\n * Модуль содержит глобальные переменные и настройки, которые используются в разных модулях.\r\n */\r\n\r\n\r\n/**\r\n * Интервал сеанса.\r\n * @type {object}\r\n * @property {number} interval - продолжительность сеанса в секундах.\r\n * @property {number} step - шаг взаимодействия в секундах.\r\n */\r\nexport const SEANCE = {\r\n    interval: 15 * 60,\r\n    step: 15,\r\n    view_session: 24 * 60 * 60\r\n}\r\n\r\n/**\r\n * Глобальный период.\r\n * @type {object}\r\n * @property {Date} start - начало периода.\r\n * @property {Date} end - конец периода.\r\n */\r\nexport const GLOBAL_PERIOD = {\r\n    start: new Date(),\r\n    end: new Date(new Date().getTime() + SEANCE.interval * 1000)\r\n};\r\n\r\n/**\r\n * Выбранные Ка.\r\n * @type {object}\r\n * @property {string[]} ids - массив идентификаторов Ка.\r\n * @property {object} names_to_id - объект, где ключ - имя Ка, значение - идентификатор Ка.\r\n * @property {boolean} isSelect - флаг, указывающий, выбран ли Ка.\r\n */\r\nexport const KA_SELECTS = {\r\n    ids: [], // имена\r\n    names_to_id: {}, // имя Ка к идентификатору Ка\r\n    isSelect: true\r\n}\r\n\r\n/**\r\n * Выбранные РСС.\r\n * @type {object}\r\n * @property {string[]} ids - массив идентификаторов РСС.\r\n * @property {object} names_to_id - объект, где ключ - имя РСС, значение - идентификатор РСС.\r\n * @property {boolean} isSelect - флаг, указывающий, выбран ли РСС.\r\n */\r\nexport const RSS_SELECTS = {\r\n    ids: [],\r\n    names_to_id: {},\r\n    isSelect: false\r\n}\r\n\r\n/**\r\n * Настройки карты.\r\n * @type {object}\r\n * @property {number} stepTrajectory - шаг траектории на карте.\r\n */\r\nexport const MAP = {\r\n    stepTrajectory: 5\r\n}\r\n\r\n/**\r\n * Пользователь.\r\n * @type {State}\r\n * @property {string} login - логин пользователя.\r\n * @property {string} access - уровень доступа.\r\n */\r\nexport const USER = new State({\r\n    login: 'Гость',\r\n    access: '1'\r\n});",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/modules/state/state.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 631,
    "kind": "variable",
    "name": "SEANCE",
    "memberof": "ka/modules/state/state.js",
    "static": true,
    "longname": "ka/modules/state/state.js~SEANCE",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/state/state.js",
    "importStyle": "{SEANCE}",
    "description": "Интервал сеанса.",
    "lineNumber": 14,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "продолжительность сеанса в секундах."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "step",
        "description": "шаг взаимодействия в секундах."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 632,
    "kind": "variable",
    "name": "GLOBAL_PERIOD",
    "memberof": "ka/modules/state/state.js",
    "static": true,
    "longname": "ka/modules/state/state.js~GLOBAL_PERIOD",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/state/state.js",
    "importStyle": "{GLOBAL_PERIOD}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"start\": *, \"end\": *}"
      ]
    }
  },
  {
    "__docId__": 633,
    "kind": "variable",
    "name": "KA_SELECTS",
    "memberof": "ka/modules/state/state.js",
    "static": true,
    "longname": "ka/modules/state/state.js~KA_SELECTS",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/state/state.js",
    "importStyle": "{KA_SELECTS}",
    "description": "Выбранные Ка.",
    "lineNumber": 38,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "массив идентификаторов Ка."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "names_to_id",
        "description": "объект, где ключ - имя Ка, значение - идентификатор Ка."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isSelect",
        "description": "флаг, указывающий, выбран ли Ка."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 634,
    "kind": "variable",
    "name": "RSS_SELECTS",
    "memberof": "ka/modules/state/state.js",
    "static": true,
    "longname": "ka/modules/state/state.js~RSS_SELECTS",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/state/state.js",
    "importStyle": "{RSS_SELECTS}",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "{\"ids\": *, \"names_to_id\": *, \"isSelect\": *}"
      ]
    }
  },
  {
    "__docId__": 635,
    "kind": "variable",
    "name": "MAP",
    "memberof": "ka/modules/state/state.js",
    "static": true,
    "longname": "ka/modules/state/state.js~MAP",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/state/state.js",
    "importStyle": "{MAP}",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "{\"stepTrajectory\": number}"
      ]
    }
  },
  {
    "__docId__": 636,
    "kind": "variable",
    "name": "USER",
    "memberof": "ka/modules/state/state.js",
    "static": true,
    "longname": "ka/modules/state/state.js~USER",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/state/state.js",
    "importStyle": "{USER}",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/state/State.js~State"
      ]
    }
  },
  {
    "__docId__": 637,
    "kind": "file",
    "name": "ka/modules/tables/tables.js",
    "content": "import API from \"../../api_v2/index.js\";\r\nimport CallersIntervalsTable from \"../../components/tables/CallersIntervalsTable.js\";\r\n// import { KaApi } from \"../../api/kaApi.js\";\r\nimport { GLOBAL_PERIOD, KA_SELECTS, RSS_SELECTS, SEANCE } from \"../state/state.js\";\r\nimport GeoTable from \"../../components/tables/GeoTable.js\";\r\nimport RssIntervalsTable from \"../../components/tables/RssIntervalsTable.js\";\r\nimport { ChannelPlanTable } from \"../../components/tables/channelPlanTable/ChannelPlanTable.js\";\r\nimport ControlPanel from \"../../components/tables/channelPlanTable/controlPanel.js\";\r\nimport LabelChannelTable from \"../../components/tables/channelPlanTable/LabelChannelTable.js\";\r\nimport { updateCurrentPeriod } from \"../state/handlerState.js\";\r\nimport hppTableModule from \"../../components/tables/hppTable/index.js\";\r\n// import { modalPopNotifs } from \"../modals/modals.js\";\r\nimport Loader from \"../../components/loader/Loader.js\";\r\n// import ModalPopNotifs from \"../../components/modal/ModalPopNotifs.js\";\r\nimport dateUtils from \"../../utils/dateUtils.js\";\r\nimport ActiveSessionTable from \"../../components/tables/ActiveSessionTable/ActiveSessionTable.js\";\r\nimport activeSessionTable from \"../../components/tables/ActiveSessionTable/index.js\";\r\nimport { showActiveSeans, showArchiveSeans, showCurrentArchiveSeans, showKSYS, showSOVSUR } from \"../action/action.js\";\r\nimport Control from \"../../components/panel/standart/control.js\";\r\nimport GatewayKSYS from \"../../components/info-block/gatewayKSYS.js\";\r\nimport InfoSovSUR from \"../../components/info-block/gatewaySOV_SUR.js\";\r\nimport RssNewIntervalsTable from \"../../components/tables/RssNewIntervalsTable.js\";\r\nimport { ZanRssTable } from \"../../components/tables/ZanRssTable/ZanRssTable.js\";\r\nimport ControlZanRssTable from \"../../components/tables/ZanRssTable/ControlZanRssTable.js\";\r\nimport RssKallisionTable from \"../../components/tables/RssKallisionTable.js\";\r\n\r\n\r\n/**\r\n * Используемые элементы интерфейса\r\n */\r\nconst countKA = document.querySelector('.count-ka-select');\r\nconst countRSS = document.querySelector('.count-rss-select');\r\n\r\n/**\r\n * Таблица TABULATOR\r\n *\r\n * @type {Tabulator}\r\n */\r\nexport const kaTable = new Tabulator(\"#ka-table\", {\r\n    /**\r\n     * Возможность выбора строк\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    selectable: true,\r\n\r\n    /**\r\n     * Тип компоновки таблицы (fitColumns - ширина столбцов\r\n     * подгоняется под контейнер, fitData - ширина столбцов\r\n     * подгоняется под контейнер, но не превышает\r\n     * ширину контейнера, fitDataFill - ширина столбцов\r\n     * подгоняется под контейнер и может превышать\r\n     * ширину контейнера)\r\n     *\r\n     * @type {string}\r\n     */\r\n    layout: \"fitDataFill\",\r\n\r\n    /**\r\n     * Возможность выбора строк с зажатым Ctrl\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    selectableRowsRollingSelection: false,\r\n\r\n    /**\r\n     * Колонки таблицы\r\n     *\r\n     * @type {object[]}\r\n     */\r\n    columns: [\r\n        {\r\n            /**\r\n             * Форматер для колонки\r\n             *\r\n             * @type {string}\r\n             */\r\n            formatter: \"rowSelection\",\r\n\r\n            /**\r\n             * Форматер для заголовка колонки\r\n             *\r\n             * @type {string}\r\n             */\r\n            titleFormatter: \"rowSelection\",\r\n\r\n            /**\r\n             * Горизонтальное выравнивание\r\n             *\r\n             * @type {string}\r\n             */\r\n            hozAlign: \"center\",\r\n\r\n            /**\r\n             * Возможность сортировки\r\n             *\r\n             * @type {boolean}\r\n             */\r\n            headerSort: false,\r\n        },\r\n        {\r\n            /**\r\n             * Заголовок колонки\r\n             *\r\n             * @type {string}\r\n             */\r\n            title: \"ID\",\r\n\r\n            /**\r\n             * Имя поля\r\n             *\r\n             * @type {string}\r\n             */\r\n            field: \"id\",\r\n\r\n            /**\r\n             * Ширина колонки\r\n             *\r\n             * @type {number}\r\n             */\r\n            width: 200,\r\n\r\n            /**\r\n             * Возможность отображения\r\n             *\r\n             * @type {boolean}\r\n             */\r\n            visible: false, // Не отображаем колонку \"ID\"\r\n        },\r\n        {\r\n            /**\r\n             * Заголовок колонки\r\n             *\r\n             * @type {string}\r\n             */\r\n            title: \"Название\",\r\n\r\n            /**\r\n             * Имя поля\r\n             *\r\n             * @type {string}\r\n             */\r\n            field: \"name\",\r\n\r\n            /**\r\n             * Ширина колонки\r\n             *\r\n             * @type {number}\r\n             */\r\n            width: 200,\r\n\r\n            /**\r\n             * Фильтр для заголовка\r\n             *\r\n             * @type {string}\r\n             */\r\n            headerFilter: \"input\", // Добавляем текстовый фильтр в заголовок колонки \"Название\"\r\n\r\n            /**\r\n             * Плейсхолдер для текстового поля фильтра\r\n             *\r\n             * @type {string}\r\n             */\r\n            headerFilterPlaceholder: \"Поиск\", // Плейсхолдер для текстового поля фильтра\r\n        },\r\n        {\r\n            /**\r\n             * Заголовок колонки\r\n             *\r\n             * @type {string}\r\n             */\r\n            title: \"Орбиты\",\r\n\r\n            /**\r\n             * Имя поля\r\n             *\r\n             * @type {string}\r\n             */\r\n            field: \"orbit\",\r\n\r\n            /**\r\n             * Возможность отображения\r\n             *\r\n             * @type {boolean}\r\n             */\r\n            visible: false, // Не отображаем колонку \r\n        }\r\n    ],\r\n});\r\n\r\n\r\n/**\r\n * Генерирует чекбоксы для выбора орбит.\r\n *\r\n * @param {Tabulator} table - Таблица, из которой берутся данные.\r\n * @param {string} containerClass - Класс контейнера для чекбоксов.\r\n */\r\nexport function generateOrbitCheckboxes(table = kaTable, containerClass = 'choice-orbit') {\r\n    // Получаем данные из таблицы\r\n    const tableData = table.getData();\r\n\r\n    // Извлекаем значения из столбца \"orbit\" и собираем их в массив\r\n    const orbitValues = tableData.map(row => row.orbit);\r\n\r\n    // Фильтруем уникальные значения\r\n    const uniqueOrbits = [...new Set(orbitValues)];\r\n\r\n    // Получаем элемент контейнера для чекбоксов\r\n    const choiceOrbitContainer = document.querySelector(`.${containerClass}`);\r\n\r\n    // Очищаем контейнер перед добавлением новых элементов\r\n    choiceOrbitContainer.innerHTML = '';\r\n\r\n    // Создаем и вставляем чекбоксы\r\n    uniqueOrbits.forEach(orbit => {\r\n        const checkboxLabel = document.createElement('label');\r\n        const checkboxInput = document.createElement('input');\r\n\r\n        checkboxInput.type = 'checkbox';\r\n        checkboxInput.checked = true;\r\n        checkboxInput.classList.add(`checkbox-orbit-${orbit}`);\r\n\r\n        checkboxLabel.appendChild(checkboxInput);\r\n        checkboxLabel.appendChild(document.createTextNode(`Орбита ${orbit}`));\r\n\r\n        choiceOrbitContainer.appendChild(checkboxLabel);\r\n\r\n        // Добавляем обработчик изменения состояния чекбокса\r\n        checkboxInput.addEventListener('change', (event) => {\r\n            // Получаем все строки, относящиеся к данной орбите\r\n            const selectedRows = tableData.filter(row => row.orbit === orbit).map(row => row.id);\r\n\r\n            if (event.target.checked) {\r\n                table.selectRow(selectedRows);\r\n            } else {\r\n                table.deselectRow(selectedRows);\r\n            }\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Обновляет состояния чекбоксов.\r\n     */\r\n    function updateCheckboxes() {\r\n        const selectedData = table.getSelectedData();\r\n\r\n        uniqueOrbits.forEach(orbit => {\r\n            const checkbox = document.querySelector(`.checkbox-orbit-${orbit}`);\r\n            const selectedRows = selectedData.filter(row => row.orbit === orbit).map(row => row.id);\r\n            const allRowsForOrbit = tableData.filter(row => row.orbit === orbit).map(row => row.id);\r\n\r\n            // Если все строки для данной орбиты выбраны, то чекбокс включен, иначе выключен\r\n            checkbox.checked = allRowsForOrbit.every(id => selectedRows.includes(id));\r\n        });\r\n    }\r\n\r\n    // Обновляем состояния чекбоксов при создании\r\n    updateCheckboxes();\r\n\r\n    // Добавляем обработчик изменения выбора строк в таблице\r\n    table.on(\"rowSelectionChanged\", function (data, rows) {\r\n        updateCheckboxes();\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Создание таблицы RSS с помощью библиотеки Tabulator.\r\n * \r\n * @type {Tabulator}\r\n */\r\nexport const rssTable = new Tabulator(\"#rss-table\", {\r\n    // Можно выбрать строки\r\n    selectable: true,\r\n\r\n    // Тип компоновки таблицы (fitColumns - ширина столбцов\r\n    // подгоняется под контейнер, fitData - ширина столбцов\r\n    // подгоняется под контейнер, но не превышает\r\n    // ширину контейнера, fitDataFill - ширина столбцов\r\n    // подгоняется под контейнер и может превышать\r\n    // ширину контейнера)\r\n    layout: \"fitDataFill\",\r\n\r\n    // Возможность выбора строк с зажатым Ctrl\r\n    selectableRowsRollingSelection: false,\r\n\r\n    // Колонки таблицы\r\n    columns: [\r\n        {\r\n            // Форматер для колонки\r\n            formatter: \"rowSelection\",\r\n\r\n            // Форматер для заголовка колонки\r\n            titleFormatter: \"rowSelection\",\r\n\r\n            // Горизонтальное выравнивание\r\n            hozAlign: \"center\",\r\n\r\n            // Возможность сортировки\r\n            headerSort: false,\r\n        },\r\n        {\r\n            // Заголовок колонки\r\n            title: \"ID\",\r\n\r\n            // Имя поля\r\n            field: \"id\",\r\n\r\n            // Ширина колонки\r\n            width: 200,\r\n\r\n            // Не отображаем колонку \"ID\"\r\n            visible: false,\r\n        },\r\n        {\r\n            // Заголовок колонки\r\n            title: \"Название\",\r\n\r\n            // Имя поля\r\n            field: \"name\",\r\n\r\n            // Ширина колонки\r\n            width: 200,\r\n\r\n            // Добавляем текстовый фильтр в заголовок колонки \"Название\"\r\n            headerFilter: \"input\",\r\n\r\n            // Плейсхолдер для текстового поля фильтра\r\n            headerFilterPlaceholder: \"Поиск\",\r\n        },\r\n    ],\r\n});\r\n\r\n\r\n/**\r\n * Таблицы интерфейсные\r\n */\r\n// Таблица для отображения географического размещения абонентов\r\nexport const callerGeoTable = new GeoTable('#abonents-block');\r\n// Таблица для отображения географического размещения РСС\r\nexport const rssGeoTable = new GeoTable('#rss-table-block', 'div');\r\n// Таблица для отображения Местоположенения РСС\r\n// export const rssGeoTablePlace = new GeoTable('#rss-table-block-place', 'div');\r\n// Таблица для отображения географического размещения РСС\r\nexport const rssGeoTablePlan = new GeoTable('#rss-table-block-plan', 'div');\r\n// РСС -> Мстоположение РСС\r\nexport const rssGeoBaseTable= new GeoTable('#panel-parameters-6 .rss-table', 'div');\r\n// РСС -> Коллизии \r\nexport const rssGeoCollisionsTable= new GeoTable('#panel-parameters-20 .rss-table', 'div');\r\n\r\n\r\n// Таблица для отображения интервалов вызовов абонентов\r\nexport const callersIntervalsTable = new CallersIntervalsTable('#abonents-block-interval');\r\n// Таблица для отображения интервалов РСС\r\nexport const rssIntervalsTable = new RssIntervalsTable('#rss-block-interval');\r\n\r\n// РСС\r\nexport const rssNewIntervalsTable = new RssNewIntervalsTable('#rss-new-block-interval');\r\nexport const rssKallisionTable = new RssNewIntervalsTable('#panel-parameters-20 .table-collision');\r\n\r\n\r\nexport const zanRssTable = new ZanRssTable('#modal_show_planRSSantenn .table-plan');\r\nexport const zanRssTableControl = new ControlZanRssTable('#modal_show_planRSSantenn .plan-rss-anten-control');\r\n\r\n// Таблица с планом каналов для ЧП ОЧР\r\nexport const chChPlanTable = new ChannelPlanTable('#channel-plan-table');\r\n\r\n// Получает элемент даты ЧПП (время)\r\nconst chChPlanTableDateTime = document.querySelector('#modalCHP_OCHR .tek_datetime');\r\n// Панель управления для таблицы с планом каналов\r\nexport const chChPlanTablePanel = new ControlPanel('#modalCHP_OCHR .control-panel', chChPlanTable);\r\n// Таблица с метками для таблицы с планом каналов\r\nconst labelChChPlanTable = new LabelChannelTable('#modalCHP_OCHR .label-table', chChPlanTable);\r\n\r\n// TODO: \r\nconst loader = new Loader('.loader-container');\r\n// При обновлении панели управления таблицы с планом каналов, выполняется запрос к API для получения данных\r\nchChPlanTablePanel.onRefresh(async () => {\r\n    const data = await API.ka.getChannelPlan();\r\n    chChPlanTable.setData2(data)\r\n    chChPlanTableDateTime.innerText = dateUtils.formatDisplayDateTime(new Date());\r\n});\r\n\r\n\r\n\r\n// Таблица с планом каналов для ЧПП\r\nexport const hhpTable = new hppTableModule.ChannelPlanTable('#modalShowFreeKaTable .channel-plan-table');\r\n// Панель управления для таблицы с планом каналов\r\nexport const hhpTablePanel = new hppTableModule.ControlPanel('#modalShowFreeKaTable .control-panel', hhpTable);\r\n// Таблица с метками для таблицы с планом каналов\r\nconst labelhhpTable = new hppTableModule.LabelChannelTable('#modalShowFreeKaTable .label-table', hhpTable);\r\n\r\n// При обновлении панели управления таблицы с планом каналов, выполняется запрос к API для получения данных\r\nhhpTablePanel.onRefresh(async () => {\r\n    const data = await API.ka.getChannelPlan();\r\n    hhpTable.setData2(data)\r\n});\r\n\r\n// При обновлении данных в таблице с планом каналов, обновляются значения в таблице с метками\r\n// TODO: Запехнуть внутрь класса\r\n\r\n\r\n// Слушатель для загрузки данных в таблицу \r\n// kaTable.on(\"dataLoaded\", function(data) {\r\n// });\r\n\r\nexport const loadDataKATables = async () => {\r\n    const data = await API.ka.getKaNames();\r\n    const tableData = data['satellites'].map(item => { return { id: item['id'], name: item['name'], orbit: item['orbit'] } });\r\n    kaTable.setData(tableData); // Инициализируем таблицу с данными\r\n    kaTable.selectRow(); // Выбираем все строки\r\n    const kaNames = data['satellites'].map(item => item['name']);\r\n    // TODO: Подумать над этим...\r\n    chChPlanTablePanel.seKatNames(kaNames);\r\n    hhpTablePanel.seKatNames(kaNames);\r\n}\r\n\r\nexport const loadDataRssTables = async () => {\r\n    const data = await API.ka.getRssNames();\r\n    const tableData = data.map((item, index) => { return { id: index + 1, name: item['name'] } });\r\n    rssTable.setData(tableData); // Инициализируем таблицу с данными\r\n    rssTable.selectRow(); // Выбираем все строки\r\n}\r\n\r\nconst reloadListsButton = document.querySelector('#reloadListsButton');\r\nreloadListsButton.addEventListener('click', async () => {\r\n    \r\n    await Promise.all([loadDataKATables(), loadDataRssTables(), updateCurrentPeriod(), API.ka.clearPlan()]);\r\n});\r\n\r\n/**\r\n * Получаем список КА от API\r\n * Инициализируем таблицу с данными\r\n * Выбираем все строки\r\n * Создаем таблицу с планом каналов\r\n */\r\ndocument.addEventListener('DOMContentLoaded', loadDataKATables);\r\n\r\n// Обработчик выбора КА в таблице\r\nkaTable.on(\"rowSelectionChanged\", function (data, rows) {\r\n    const nameList = data.map(item => { return item.name });\r\n    const idList = data.map(item => { return item.id });\r\n    KA_SELECTS.ids = idList; // Сохраняем id выбранных КА\r\n    KA_SELECTS.names_to_id = Object.fromEntries(data.map(item => [item.name, item.id])); // Сохраняем список имен КА с id\r\n    countKA.textContent = `Выбрано: ${nameList.length}`; // Обновляем текст с количеством выбранных КА\r\n});\r\n\r\n/**\r\n * Получаем список РСС от API\r\n * Инициализируем таблицу с данными\r\n * Выбираем все строки\r\n */\r\ndocument.addEventListener('DOMContentLoaded', loadDataRssTables)\r\n\r\n// Обработчик выбора РСС в таблице\r\nrssTable.on(\"rowSelectionChanged\", function (data, rows) {\r\n    const idList = data.map(item => { return item.id });\r\n    RSS_SELECTS.ids = idList; // Сохраняем id выбранных РСС\r\n    countRSS.textContent = `Выбрано: ${idList.length}`; // Обновляем текст с количеством выбранных РСС\r\n    RSS_SELECTS.ids = idList;\r\n    countRSS.textContent = `Выбрано: ${idList.length}`;\r\n})\r\n\r\n\r\n\r\nexport const activeTable = new activeSessionTable.table('#panel-parameters-11 .table-active-seans-block');\r\n\r\nexport const activeTablePanel = new activeSessionTable.panel();\r\nconst activePanelElement = document.querySelector('#panel-parameters-11 .control-panel');\r\nactivePanelElement.appendChild(activeTablePanel.createElement());\r\n// Добавляем в модальном окне \r\ndocument.querySelector('#modal-show-active-seans .control-panel').appendChild(activeTablePanel.createElement());\r\n\r\nactiveTablePanel.onRefresh(async () => {\r\n    showActiveSeans(GLOBAL_PERIOD.start, GLOBAL_PERIOD.end);\r\n})\r\n\r\nexport function updateActiveTable(data) {\r\n    const activeTable = new ActiveSessionTable('#panel-parameters-11 .table-active-seans-block');\r\n    activeTable.setData(data);\r\n    // element.appendChild(createActiveTable(data));\r\n}\r\n\r\n// Архивная таблица\r\nexport const archiveTable = new activeSessionTable.table('#panel-parameters-12 .table-active-seans-block');\r\n\r\n\r\nexport const archiveTablePanel = new activeSessionTable.panel()\r\nconst archivePanelElement = document.querySelector('#panel-parameters-12 .control-panel');\r\narchivePanelElement.appendChild(archiveTablePanel.createElement());\r\ndocument.querySelector('#modal-show-archive-seans .control-panel').appendChild(archiveTablePanel.createElement());\r\n\r\narchiveTablePanel.onRefresh(async () => {\r\n    showCurrentArchiveSeans();\r\n})\r\n\r\nexport const controlKSUS = new Control();\r\ndocument.querySelector('#panel-parameters-14 .control-panel').appendChild(controlKSUS.createElement());\r\nexport const infoKSUS = new GatewayKSYS();\r\ndocument.querySelector('#panel-parameters-14 .info-block').appendChild(infoKSUS.getElement());\r\n\r\ncontrolKSUS.onRefresh(async () => {\r\n    showKSYS();\r\n})\r\n\r\n\r\nexport const controlSOVKSYS = new Control();\r\ndocument.querySelector('#panel-parameters-18 .control-panel').appendChild(controlSOVKSYS.createElement());\r\nexport const infoSOVKSYS = new InfoSovSUR();\r\ndocument.querySelector('#panel-parameters-18 .info-block').appendChild(infoSOVKSYS.getElement());\r\ncontrolSOVKSYS.onRefresh(async () => {\r\n    showSOVSUR();\r\n})\r\n\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/modules/tables/tables.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 638,
    "kind": "variable",
    "name": "countKA",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~countKA",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": null,
    "description": "Используемые элементы интерфейса",
    "lineNumber": 31,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 639,
    "kind": "variable",
    "name": "countRSS",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~countRSS",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 640,
    "kind": "variable",
    "name": "kaTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~kaTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{kaTable}",
    "description": "Таблица TABULATOR",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Tabulator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 641,
    "kind": "function",
    "name": "generateOrbitCheckboxes",
    "memberof": "ka/modules/tables/tables.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/tables/tables.js~generateOrbitCheckboxes",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{generateOrbitCheckboxes}",
    "description": "Генерирует чекбоксы для выбора орбит.",
    "lineNumber": 198,
    "params": [
      {
        "nullable": null,
        "types": [
          "Tabulator"
        ],
        "spread": false,
        "optional": false,
        "name": "table",
        "description": "Таблица, из которой берутся данные."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "containerClass",
        "description": "Класс контейнера для чекбоксов."
      }
    ],
    "return": null
  },
  {
    "__docId__": 642,
    "kind": "variable",
    "name": "rssTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~rssTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{rssTable}",
    "description": "Создание таблицы RSS с помощью библиотеки Tabulator.",
    "lineNumber": 272,
    "type": {
      "nullable": null,
      "types": [
        "Tabulator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 643,
    "kind": "variable",
    "name": "callerGeoTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~callerGeoTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{callerGeoTable}",
    "description": "Таблицы интерфейсные",
    "lineNumber": 339,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 644,
    "kind": "variable",
    "name": "rssGeoTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~rssGeoTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{rssGeoTable}",
    "description": null,
    "lineNumber": 341,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 645,
    "kind": "variable",
    "name": "rssGeoTablePlan",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~rssGeoTablePlan",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{rssGeoTablePlan}",
    "description": null,
    "lineNumber": 345,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 646,
    "kind": "variable",
    "name": "rssGeoBaseTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~rssGeoBaseTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{rssGeoBaseTable}",
    "description": null,
    "lineNumber": 347,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 647,
    "kind": "variable",
    "name": "rssGeoCollisionsTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~rssGeoCollisionsTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{rssGeoCollisionsTable}",
    "description": null,
    "lineNumber": 349,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 648,
    "kind": "variable",
    "name": "callersIntervalsTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~callersIntervalsTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{callersIntervalsTable}",
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/tables/CallersIntervalsTable.js~CallersIntervalsTable"
      ]
    }
  },
  {
    "__docId__": 649,
    "kind": "variable",
    "name": "rssIntervalsTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~rssIntervalsTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{rssIntervalsTable}",
    "description": null,
    "lineNumber": 355,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/tables/RssIntervalsTable.js~RssIntervalsTable"
      ]
    }
  },
  {
    "__docId__": 650,
    "kind": "variable",
    "name": "rssNewIntervalsTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~rssNewIntervalsTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{rssNewIntervalsTable}",
    "description": null,
    "lineNumber": 358,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable"
      ]
    }
  },
  {
    "__docId__": 651,
    "kind": "variable",
    "name": "rssKallisionTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~rssKallisionTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{rssKallisionTable}",
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/tables/RssNewIntervalsTable.js~RssNewIntervalsTable"
      ]
    }
  },
  {
    "__docId__": 652,
    "kind": "variable",
    "name": "zanRssTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~zanRssTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{zanRssTable}",
    "description": null,
    "lineNumber": 362,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 653,
    "kind": "variable",
    "name": "zanRssTableControl",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~zanRssTableControl",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{zanRssTableControl}",
    "description": null,
    "lineNumber": 363,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/tables/ZanRssTable/ControlZanRssTable.js~ControlZanRssTable"
      ]
    }
  },
  {
    "__docId__": 654,
    "kind": "variable",
    "name": "chChPlanTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~chChPlanTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{chChPlanTable}",
    "description": null,
    "lineNumber": 366,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 655,
    "kind": "variable",
    "name": "chChPlanTableDateTime",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~chChPlanTableDateTime",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 369,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 656,
    "kind": "variable",
    "name": "chChPlanTablePanel",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~chChPlanTablePanel",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{chChPlanTablePanel}",
    "description": null,
    "lineNumber": 371,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 657,
    "kind": "variable",
    "name": "labelChChPlanTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~labelChChPlanTable",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 373,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 658,
    "kind": "variable",
    "name": "loader",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~loader",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 376,
    "undocument": true,
    "type": {
      "types": [
        "ka/components/loader/Loader.js~Loader"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 659,
    "kind": "variable",
    "name": "hhpTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~hhpTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{hhpTable}",
    "description": null,
    "lineNumber": 387,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 660,
    "kind": "variable",
    "name": "hhpTablePanel",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~hhpTablePanel",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{hhpTablePanel}",
    "description": null,
    "lineNumber": 389,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 661,
    "kind": "variable",
    "name": "labelhhpTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~labelhhpTable",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 662,
    "kind": "function",
    "name": "loadDataKATables",
    "memberof": "ka/modules/tables/tables.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "ka/modules/tables/tables.js~loadDataKATables",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{loadDataKATables}",
    "description": null,
    "lineNumber": 407,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 663,
    "kind": "function",
    "name": "loadDataRssTables",
    "memberof": "ka/modules/tables/tables.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "ka/modules/tables/tables.js~loadDataRssTables",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{loadDataRssTables}",
    "description": null,
    "lineNumber": 418,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 664,
    "kind": "variable",
    "name": "reloadListsButton",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~reloadListsButton",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 425,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 665,
    "kind": "variable",
    "name": "activeTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~activeTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{activeTable}",
    "description": null,
    "lineNumber": 466,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 666,
    "kind": "variable",
    "name": "activeTablePanel",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~activeTablePanel",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{activeTablePanel}",
    "description": null,
    "lineNumber": 468,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 667,
    "kind": "variable",
    "name": "activePanelElement",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~activePanelElement",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 469,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 668,
    "kind": "function",
    "name": "updateActiveTable",
    "memberof": "ka/modules/tables/tables.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/tables/tables.js~updateActiveTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{updateActiveTable}",
    "description": null,
    "lineNumber": 478,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 669,
    "kind": "variable",
    "name": "archiveTable",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~archiveTable",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{archiveTable}",
    "description": null,
    "lineNumber": 485,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 670,
    "kind": "variable",
    "name": "archiveTablePanel",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~archiveTablePanel",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{archiveTablePanel}",
    "description": null,
    "lineNumber": 488,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 671,
    "kind": "variable",
    "name": "archivePanelElement",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~archivePanelElement",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 489,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 672,
    "kind": "variable",
    "name": "controlKSUS",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~controlKSUS",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{controlKSUS}",
    "description": null,
    "lineNumber": 497,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 673,
    "kind": "variable",
    "name": "infoKSUS",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~infoKSUS",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{infoKSUS}",
    "description": null,
    "lineNumber": 499,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 674,
    "kind": "variable",
    "name": "controlSOVKSYS",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~controlSOVKSYS",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{controlSOVKSYS}",
    "description": null,
    "lineNumber": 507,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 675,
    "kind": "variable",
    "name": "infoSOVKSYS",
    "memberof": "ka/modules/tables/tables.js",
    "static": true,
    "longname": "ka/modules/tables/tables.js~infoSOVKSYS",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/tables/tables.js",
    "importStyle": "{infoSOVKSYS}",
    "description": null,
    "lineNumber": 509,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 676,
    "kind": "file",
    "name": "ka/modules/user/user.js",
    "content": "import { AuthApi } from '../../api/authApi.js';\r\nimport { modalLogin } from '../modals/modals.js';\r\nimport { USER } from '../state/state.js';\r\n\r\n\r\n/**\r\n * Обработчик события submit формы авторизации\r\n * @param {Event} event - событие submit\r\n */\r\nconst loginForm = document.getElementById('login-form');\r\nloginForm.addEventListener('submit', handleLoginFormSubmit);\r\n\r\n/**\r\n * Функция обработки события submit формы авторизации\r\n * @param {Event} event - событие submit\r\n */\r\nfunction handleLoginFormSubmit(event) {\r\n    event.preventDefault(); // Предотвращаем отправку формы по умолчанию\r\n\r\n    const login = document.getElementById('login-login').value;\r\n    const password = document.getElementById('login-password').value;\r\n\r\n    /**\r\n     * Функция обратного вызова, которая вызывается после успешной авторизации\r\n     */\r\n    function loginCallback() {\r\n        modalLogin.close();\r\n        stateUpdate(login);\r\n        auth_login()\r\n    }\r\n\r\n    // Вызываем метод AuthApi.login с передачей логина, пароля и функции обратного вызова\r\n    AuthApi.login(login, password, loginCallback);\r\n}\r\n\r\n\r\n// TODO: Заготовка под регистрацию\r\n\r\n// const registerForm = document.getElementById('register-form');\r\n// registerForm.addEventListener('submit', handleRegisterFormSubmit);\r\n\r\n// function handleRegisterFormSubmit(event) {\r\n//     event.preventDefault(); // Предотвращаем отправку формы по умолчанию\r\n\r\n//     const login = document.getElementById('login').value;\r\n//     const password = document.getElementById('password').value;\r\n\r\n//     // Вызываем метод AuthApi.login с передачей логина, пароля и функции обратного вызова\r\n//     AuthApi.register(login, password, loginCallback, errorCallback);\r\n// }\r\n\r\n\r\n// Получаем кнопку выхода по её идентификатору\r\nconst logoutBtn = document.getElementById('btn-logout');\r\n// Добавляем обработчик события на клик по кнопке выхода\r\nlogoutBtn.addEventListener('click', handleClickLogout);\r\n\r\n/**\r\n * Обработчик события клика по кнопке выхода.\r\n * Вызывает функцию logout для выполнения процедуры выхода из системы.\r\n * @param {Event} event - объект события, который передается обработчику.\r\n */\r\nfunction handleClickLogout(event) {\r\n    logout(); // Вызываем функцию выхода\r\n}\r\n\r\n\r\n/**\r\n * Авторизация пользователя.\r\n * @function\r\n */\r\nexport function auth_login() {\r\n    const btnLogin = document.getElementById('btn-login');\r\n    const btnLogout = document.getElementById('btn-logout');\r\n\r\n    // Убираем кнопку входа\r\n    btnLogout.classList.remove('none-display');\r\n    btnLogin.classList.add('none-display');\r\n\r\n    // Отображаем имя пользователя\r\n    const usernameSpan = document.getElementById('username');\r\n    usernameSpan.textContent = USER.get('login');\r\n}\r\n\r\n/**\r\n * Обновление состояния пользователя.\r\n * @function\r\n * @param {string} login - логин пользователя\r\n */\r\nexport function stateUpdate(login) {\r\n    USER.set('login', login)\r\n    USER.set('access', '2')\r\n}\r\n\r\n/**\r\n * Выход пользователя из системы.\r\n * @function\r\n */\r\nexport function logout() {\r\n    USER.set('login', 'Гость')\r\n    USER.set('access', '1')\r\n\r\n    const btnLogin = document.getElementById('btn-login');\r\n    const btnLogout = document.getElementById('btn-logout');\r\n\r\n    // Убираем кнопку выхода\r\n    btnLogout.classList.add('none-display');\r\n    btnLogin.classList.remove('none-display');\r\n\r\n    // Отображаем имя пользователя\r\n    const usernameSpan = document.getElementById('username');\r\n    usernameSpan.textContent = USER.get('login')\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/modules/user/user.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 677,
    "kind": "variable",
    "name": "loginForm",
    "memberof": "ka/modules/user/user.js",
    "static": true,
    "longname": "ka/modules/user/user.js~loginForm",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/user/user.js",
    "importStyle": null,
    "description": "Обработчик события submit формы авторизации",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "событие submit"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 678,
    "kind": "function",
    "name": "handleLoginFormSubmit",
    "memberof": "ka/modules/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/user/user.js~handleLoginFormSubmit",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/user/user.js",
    "importStyle": null,
    "description": "Функция обработки события submit формы авторизации",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "событие submit"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 679,
    "kind": "variable",
    "name": "logoutBtn",
    "memberof": "ka/modules/user/user.js",
    "static": true,
    "longname": "ka/modules/user/user.js~logoutBtn",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/user/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 680,
    "kind": "function",
    "name": "handleClickLogout",
    "memberof": "ka/modules/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/user/user.js~handleClickLogout",
    "access": "public",
    "export": false,
    "importPath": "./ka/modules/user/user.js",
    "importStyle": null,
    "description": "Обработчик события клика по кнопке выхода.\nВызывает функцию logout для выполнения процедуры выхода из системы.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "объект события, который передается обработчику."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 681,
    "kind": "function",
    "name": "auth_login",
    "memberof": "ka/modules/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/user/user.js~auth_login",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/user/user.js",
    "importStyle": "{auth_login}",
    "description": "Авторизация пользователя.",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 682,
    "kind": "function",
    "name": "stateUpdate",
    "memberof": "ka/modules/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/user/user.js~stateUpdate",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/user/user.js",
    "importStyle": "{stateUpdate}",
    "description": "Обновление состояния пользователя.",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "login",
        "description": "логин пользователя"
      }
    ],
    "return": null
  },
  {
    "__docId__": 683,
    "kind": "function",
    "name": "logout",
    "memberof": "ka/modules/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/modules/user/user.js~logout",
    "access": "public",
    "export": true,
    "importPath": "./ka/modules/user/user.js",
    "importStyle": "{logout}",
    "description": "Выход пользователя из системы.",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 684,
    "kind": "file",
    "name": "ka/ui/combo-box/ComboBox.js",
    "content": "export default class ComboBox {\r\n    /**\r\n     * Представляет собой UI компонент ComboBox.\r\n     *\r\n     * @constructor\r\n     * @param {string} selector - CSS селектор для элемента ComboBox.\r\n     * @param {Array} items - Массив объектов с свойствами 'value' и 'text',\r\n     * представляющими опции ComboBox.\r\n     * @param {string|null} selectedItem - Значение выбранного элемента по умолчанию.\r\n     * Если не указано, то не выбран ни один элемент.\r\n     */\r\n    constructor(selector, items, selectedItem = null) {\r\n        /**\r\n         * DOM элемент ComboBox.\r\n         * @type {HTMLSelectElement}\r\n         */\r\n        this.element = document.querySelector(selector);\r\n\r\n        /**\r\n         * Массив объектов, представляющих опции ComboBox.\r\n         * @type {Array}\r\n         */\r\n        this.items = items;\r\n\r\n        /**\r\n         * Значение выбранного элемента по умолчанию.\r\n         * @type {string|null}\r\n         */\r\n        this.selectedItem = selectedItem;\r\n\r\n        // Устанавливаем опции ComboBox\r\n        this.setItems(this.items);\r\n\r\n        // Выбираем初始но выбранный элемент\r\n        this.select(this.selectedItem);\r\n    };\r\n\r\n    /**\r\n     * Обработчик события 'onchange'. Вызывает предоставленный callback\r\n     * с текущим значением ComboBox при его изменении.\r\n     *\r\n     * @param {function} callback - Функция, которая будет вызвана при\r\n     * изменении ComboBox. Принимает строковое значение (значение\r\n     * выбранного элемента).\r\n     */\r\n    onChange(callback) {\r\n        // Вызываем callback с текущим значением ComboBox\r\n        callback(this.element.value);\r\n\r\n        // Добавляем обработчик события 'onchange' для ComboBox\r\n        this.element.onchange = (event) => {\r\n            // Вызываем callback с новым значением ComboBox\r\n            callback(event.target.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Добавляет новый элемент в ComboBox.\r\n     *\r\n     * @param {string} value - Значение опции.\r\n     * @param {string} text - Текст опции.\r\n     */\r\n    add(value, text) {\r\n        // Создаем новый элемент option и присваиваем ему значение и текст.\r\n        const option = document.createElement('option');\r\n        option.value = value;\r\n        option.textContent = text;\r\n\r\n        // Добавляем новую опцию в ComboBox.\r\n        this.element.append(option);\r\n    }\r\n\r\n    /**\r\n     * Добавляет массив элементов в ComboBox.\r\n     *\r\n     * @param {Array} items - Массив объектов с свойствами 'value' и 'text',\r\n     * представляющими опции ComboBox.\r\n     */\r\n    addItems(items) {\r\n        // Для каждого элемента в массиве items...\r\n        for (const item of items) {\r\n            // ...добавляем новый элемент с значением и текстом из item.\r\n            this.add(item.value, item.text);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Устанавливает массив элементов в ComboBox, удаляя все предыдущие элементы.\r\n     *\r\n     * @param {Array} items - Массив объектов с свойствами 'value' и 'text',\r\n     * представляющими опции ComboBox.\r\n     */\r\n    setItems(items) {\r\n        // Удаляем все предыдущие элементы ComboBox.\r\n        this.clear();\r\n        // Добавляем новые элементы в ComboBox.\r\n        this.addItems(items);\r\n    }\r\n\r\n\r\n    /**\r\n     * Выбирает элемент ComboBox по значению.\r\n     *\r\n     * @param {string} value - Значение элемента ComboBox.\r\n     */\r\n    select(value) {\r\n        // Устанавливаем значение выбранного элемента ComboBox.\r\n        this.element.value = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * Очищает все элементы ComboBox.\r\n     *\r\n     * Это делает пустым innerHTML элемента ComboBox, удаляя все внутренние элементы.\r\n     */\r\n    clear() {\r\n        // Устанавливаем innerHTML элемента ComboBox пустым, удаляя все внутренние элементы.\r\n        this.element.innerHTML = '';\r\n    }\r\n}",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/ui/combo-box/ComboBox.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 685,
    "kind": "class",
    "name": "ComboBox",
    "memberof": "ka/ui/combo-box/ComboBox.js",
    "static": true,
    "longname": "ka/ui/combo-box/ComboBox.js~ComboBox",
    "access": "public",
    "export": true,
    "importPath": "./ka/ui/combo-box/ComboBox.js",
    "importStyle": "ComboBox",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 686,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/ui/combo-box/ComboBox.js~ComboBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/combo-box/ComboBox.js~ComboBox#constructor",
    "access": "public",
    "description": "Представляет собой UI компонент ComboBox.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "CSS селектор для элемента ComboBox."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "Массив объектов с свойствами 'value' и 'text',\nпредставляющими опции ComboBox."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedItem",
        "description": "Значение выбранного элемента по умолчанию.\nЕсли не указано, то не выбран ни один элемент."
      }
    ]
  },
  {
    "__docId__": 687,
    "kind": "member",
    "name": "element",
    "memberof": "ka/ui/combo-box/ComboBox.js~ComboBox",
    "static": false,
    "longname": "ka/ui/combo-box/ComboBox.js~ComboBox#element",
    "access": "public",
    "description": "DOM элемент ComboBox.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "HTMLSelectElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 688,
    "kind": "member",
    "name": "items",
    "memberof": "ka/ui/combo-box/ComboBox.js~ComboBox",
    "static": false,
    "longname": "ka/ui/combo-box/ComboBox.js~ComboBox#items",
    "access": "public",
    "description": "Массив объектов, представляющих опции ComboBox.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 689,
    "kind": "member",
    "name": "selectedItem",
    "memberof": "ka/ui/combo-box/ComboBox.js~ComboBox",
    "static": false,
    "longname": "ka/ui/combo-box/ComboBox.js~ComboBox#selectedItem",
    "access": "public",
    "description": "Значение выбранного элемента по умолчанию.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 690,
    "kind": "method",
    "name": "onChange",
    "memberof": "ka/ui/combo-box/ComboBox.js~ComboBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/combo-box/ComboBox.js~ComboBox#onChange",
    "access": "public",
    "description": "Обработчик события 'onchange'. Вызывает предоставленный callback\nс текущим значением ComboBox при его изменении.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция, которая будет вызвана при\nизменении ComboBox. Принимает строковое значение (значение\nвыбранного элемента)."
      }
    ],
    "return": null
  },
  {
    "__docId__": 691,
    "kind": "method",
    "name": "add",
    "memberof": "ka/ui/combo-box/ComboBox.js~ComboBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/combo-box/ComboBox.js~ComboBox#add",
    "access": "public",
    "description": "Добавляет новый элемент в ComboBox.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Значение опции."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Текст опции."
      }
    ],
    "return": null
  },
  {
    "__docId__": 692,
    "kind": "method",
    "name": "addItems",
    "memberof": "ka/ui/combo-box/ComboBox.js~ComboBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/combo-box/ComboBox.js~ComboBox#addItems",
    "access": "public",
    "description": "Добавляет массив элементов в ComboBox.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "Массив объектов с свойствами 'value' и 'text',\nпредставляющими опции ComboBox."
      }
    ],
    "return": null
  },
  {
    "__docId__": 693,
    "kind": "method",
    "name": "setItems",
    "memberof": "ka/ui/combo-box/ComboBox.js~ComboBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/combo-box/ComboBox.js~ComboBox#setItems",
    "access": "public",
    "description": "Устанавливает массив элементов в ComboBox, удаляя все предыдущие элементы.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "Массив объектов с свойствами 'value' и 'text',\nпредставляющими опции ComboBox."
      }
    ],
    "return": null
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "select",
    "memberof": "ka/ui/combo-box/ComboBox.js~ComboBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/combo-box/ComboBox.js~ComboBox#select",
    "access": "public",
    "description": "Выбирает элемент ComboBox по значению.",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Значение элемента ComboBox."
      }
    ],
    "return": null
  },
  {
    "__docId__": 695,
    "kind": "method",
    "name": "clear",
    "memberof": "ka/ui/combo-box/ComboBox.js~ComboBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/combo-box/ComboBox.js~ComboBox#clear",
    "access": "public",
    "description": "Очищает все элементы ComboBox.\n\nЭто делает пустым innerHTML элемента ComboBox, удаляя все внутренние элементы.",
    "lineNumber": 117,
    "params": [],
    "return": null
  },
  {
    "__docId__": 696,
    "kind": "file",
    "name": "ka/ui/dropdown/Dropdown.js",
    "content": "/**\r\n * Класс Dropdown представляет собой настраиваемый выпадающий список.\r\n * Он состоит из кнопки-триггера и контента, который скрывается/появляется по клику на триггер.\r\n * Контент состоит из чекбоксов, которые могут быть добавлены динамически.\r\n */\r\nexport default class Dropdown {\r\n    /**\r\n     * Конструктор Dropdown инициализирует новый экземпляр выпадающего списка.\r\n     * @param {string|Element} selectorOrElement Строка с селектором или элемент, в который нужно добавить выпадающий список.\r\n     * @param {string} caption Подпись кнопки-триггера.\r\n     */\r\n    constructor(selectorOrElement, caption) {\r\n        // Создание DOM-элемента выпадающего списка\r\n        if (typeof selectorOrElement === 'string') {\r\n            this.container = document.querySelector(selectorOrElement);\r\n        } else if (selectorOrElement instanceof Element) {\r\n            this.container = selectorOrElement;\r\n        } else {\r\n            throw new Error('Селектор или элемент ожидается');\r\n        }\r\n        this.container.classList.add('dropdown');\r\n\r\n        // Создание кнопки-триггера\r\n        this.button = document.createElement('button');\r\n        this.button.classList.add('dropdown__button');\r\n        this.button.textContent = caption;\r\n        this.button.addEventListener('click', (event) => {\r\n            event.stopPropagation();\r\n            this.toggleDropdown();\r\n        });\r\n\r\n        // Создание контента\r\n        this.content = document.createElement('div');\r\n        this.content.classList.add('dropdown__content');\r\n\r\n        // Добавление элементов в контейнер\r\n        this.container.appendChild(this.button);\r\n        this.container.appendChild(this.content);\r\n\r\n        // Добавление слушателя клика на документ для закрытия выпадающего списка при клике вне\r\n        document.addEventListener('click', (event) => {\r\n            this.handleClickOutside(event);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Метод toggleDropdown переключает отображение контента выпадающего списка.\r\n     */\r\n    toggleDropdown() {\r\n        this.container.classList.toggle('dropdown--open');\r\n    }\r\n\r\n    /**\r\n     * Метод closeDropdown скрывает выпадающий список.\r\n     */\r\n    closeDropdown() {\r\n        this.container.classList.remove('dropdown--open');\r\n    }\r\n\r\n    /**\r\n     * Метод addFromDict добавляет все элементы из объекта в контент.\r\n     * @param {Object} dict Объект, содержащий значения и их HTML-представление.\r\n     */\r\n    addFromDict(dict) {\r\n        for (const [value, html] of Object.entries(dict)) {\r\n            this.addItem(value, html);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод setFromDict очищает контент и добавляет все элементы из объекта.\r\n     * @param {Object} dict Объект, содержащий значения и их HTML-представление.\r\n     */\r\n    setFromDict(dict) {\r\n        this.content.innerHTML = '';\r\n        this.addFromDict(dict);\r\n    }\r\n\r\n    /**\r\n     * Метод addItem добавляет новый элемент в контент.\r\n     * @param {string} value Значение чекбокса.\r\n     * @param {string} html HTML-представление чекбокса.\r\n     */\r\n    addItem(value, html) {\r\n        const label = document.createElement('label');\r\n        label.classList.add('dropdown__label');\r\n        label.innerHTML = `<input type=\"checkbox\" value=\"${value}\"> ${html}`;\r\n        label.querySelector('input').addEventListener('change', () => this.handleChange());\r\n        this.content.appendChild(label);\r\n    }\r\n\r\n    /**\r\n     * Метод handleChange вызывается при изменении состояния чекбокса и объявляет событие dropdownChange.\r\n     */\r\n    handleChange() {\r\n        const event = new CustomEvent('dropdownChange', { detail: this.getValues() });\r\n        this.container.dispatchEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Метод getValues возвращает массив значений выбранных чекбоксов.\r\n     * @returns {Array} Массив значений выбранных чекбоксов.\r\n     */\r\n    getValues() {\r\n        return Array.from(this.content.querySelectorAll('input:checked')).map(input => input.value);\r\n    }\r\n\r\n    /**\r\n     * Метод onDropdownChange привязывает обработчик события dropdownChange к контейнеру.\r\n     * @param {function} callback Функция-обработчик события dropdownChange.\r\n     */\r\n    onDropdownChange(callback) {\r\n        this.container.addEventListener('dropdownChange', callback);\r\n    }\r\n\r\n    /**\r\n     * Метод handleClickOutside обрабатывает событие клика на документ.\r\n     * Если клик был вне контейнера, выпадающий список закрывается.\r\n     * @param {Event} event Объект события клика.\r\n     */\r\n    handleClickOutside(event) {\r\n        if (!this.container.contains(event.target)) {\r\n            this.closeDropdown();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод selectAll выбирает все чекбоксы в контенте.\r\n     */\r\n    selectAll() {\r\n        this.content.querySelectorAll('input:not(:checked)').forEach(input => input.checked = true);\r\n        this.handleChange();\r\n    }\r\n\r\n    /**\r\n     * Метод unselectAll снимает выбор со всех чекбоксов в контенте.\r\n     */\r\n    unselectAll() {\r\n        this.content.querySelectorAll('input:checked').forEach(input => input.checked = false);\r\n        this.handleChange();\r\n    }\r\n}",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/ui/dropdown/Dropdown.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 697,
    "kind": "class",
    "name": "Dropdown",
    "memberof": "ka/ui/dropdown/Dropdown.js",
    "static": true,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "access": "public",
    "export": true,
    "importPath": "./ka/ui/dropdown/Dropdown.js",
    "importStyle": "Dropdown",
    "description": "Класс Dropdown представляет собой настраиваемый выпадающий список.\nОн состоит из кнопки-триггера и контента, который скрывается/появляется по клику на триггер.\nКонтент состоит из чекбоксов, которые могут быть добавлены динамически.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 698,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#constructor",
    "access": "public",
    "description": "Конструктор Dropdown инициализирует новый экземпляр выпадающего списка.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "selectorOrElement",
        "description": "Строка с селектором или элемент, в который нужно добавить выпадающий список."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "caption",
        "description": "Подпись кнопки-триггера."
      }
    ]
  },
  {
    "__docId__": 699,
    "kind": "member",
    "name": "container",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#container",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 701,
    "kind": "member",
    "name": "button",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#button",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 702,
    "kind": "member",
    "name": "content",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#content",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 703,
    "kind": "method",
    "name": "toggleDropdown",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#toggleDropdown",
    "access": "public",
    "description": "Метод toggleDropdown переключает отображение контента выпадающего списка.",
    "lineNumber": 49,
    "params": [],
    "return": null
  },
  {
    "__docId__": 704,
    "kind": "method",
    "name": "closeDropdown",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#closeDropdown",
    "access": "public",
    "description": "Метод closeDropdown скрывает выпадающий список.",
    "lineNumber": 56,
    "params": [],
    "return": null
  },
  {
    "__docId__": 705,
    "kind": "method",
    "name": "addFromDict",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#addFromDict",
    "access": "public",
    "description": "Метод addFromDict добавляет все элементы из объекта в контент.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dict",
        "description": "Объект, содержащий значения и их HTML-представление."
      }
    ],
    "return": null
  },
  {
    "__docId__": 706,
    "kind": "method",
    "name": "setFromDict",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#setFromDict",
    "access": "public",
    "description": "Метод setFromDict очищает контент и добавляет все элементы из объекта.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dict",
        "description": "Объект, содержащий значения и их HTML-представление."
      }
    ],
    "return": null
  },
  {
    "__docId__": 707,
    "kind": "method",
    "name": "addItem",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#addItem",
    "access": "public",
    "description": "Метод addItem добавляет новый элемент в контент.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Значение чекбокса."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "html",
        "description": "HTML-представление чекбокса."
      }
    ],
    "return": null
  },
  {
    "__docId__": 708,
    "kind": "method",
    "name": "handleChange",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#handleChange",
    "access": "public",
    "description": "Метод handleChange вызывается при изменении состояния чекбокса и объявляет событие dropdownChange.",
    "lineNumber": 95,
    "params": [],
    "return": null
  },
  {
    "__docId__": 709,
    "kind": "method",
    "name": "getValues",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#getValues",
    "access": "public",
    "description": "Метод getValues возвращает массив значений выбранных чекбоксов.",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Массив значений выбранных чекбоксов."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Массив значений выбранных чекбоксов."
    },
    "params": []
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "onDropdownChange",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#onDropdownChange",
    "access": "public",
    "description": "Метод onDropdownChange привязывает обработчик события dropdownChange к контейнеру.",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция-обработчик события dropdownChange."
      }
    ],
    "return": null
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "handleClickOutside",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#handleClickOutside",
    "access": "public",
    "description": "Метод handleClickOutside обрабатывает событие клика на документ.\nЕсли клик был вне контейнера, выпадающий список закрывается.",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Объект события клика."
      }
    ],
    "return": null
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "selectAll",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#selectAll",
    "access": "public",
    "description": "Метод selectAll выбирает все чекбоксы в контенте.",
    "lineNumber": 130,
    "params": [],
    "return": null
  },
  {
    "__docId__": 713,
    "kind": "method",
    "name": "unselectAll",
    "memberof": "ka/ui/dropdown/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/dropdown/Dropdown.js~Dropdown#unselectAll",
    "access": "public",
    "description": "Метод unselectAll снимает выбор со всех чекбоксов в контенте.",
    "lineNumber": 138,
    "params": [],
    "return": null
  },
  {
    "__docId__": 714,
    "kind": "file",
    "name": "ka/ui/time-input/TimeInput.js",
    "content": "export class TimeInput {\r\n  /**\r\n   * Конструктор класса TimeInput.\r\n   * @param {HTMLInputElement} inputElement - HTML-элемент input, в который вводится время.\r\n   */\r\n  constructor(inputElement) {\r\n      this.inputElement = inputElement;\r\n      \r\n      // Добавляем обработчики событий для ввода и нажатия клавиш\r\n      this.inputElement.addEventListener('input', this.handleInput.bind(this));\r\n      this.inputElement.addEventListener('keydown', this.handleKeyDown.bind(this));\r\n      \r\n      // Вызываем обработчик для начальной обработки значения, если оно уже введено\r\n      this.handleInput();\r\n  }\r\n\r\n  /**\r\n   * Обработчик события input.\r\n   * Форматирует вводимое значение в виде времени чч : мм : сс.\r\n   */\r\n  handleInput() {\r\n      // Удаляем все символы, кроме цифр\r\n      let value = this.inputElement.value.replace(/[^0-9]/g, '');\r\n\r\n      // Ограничиваем ввод длиной 6 цифр (ччммсс)\r\n      if (value.length > 6) {\r\n          value = value.slice(0, 6);\r\n      }\r\n\r\n      // Форматируем часы, минуты и секунды в соответствии с длиной введенного значения\r\n      let formattedValue = '';\r\n      if (value.length > 4) {\r\n          formattedValue = value.slice(0, 2) + ' : ' + value.slice(2, 4) + ' : ' + value.slice(4);\r\n      } else if (value.length > 2) {\r\n          formattedValue = value.slice(0, 2) + ' : ' + value.slice(2);\r\n      } else {\r\n          formattedValue = value;\r\n      }\r\n\r\n      // Разделяем часы, минуты и секунды на части для дальнейшей проверки\r\n      const parts = formattedValue.split(' : ');\r\n      let hours = parts[0] || '';\r\n      let minutes = parts[1] || '';\r\n      let seconds = parts[2] || '';\r\n\r\n      // Ограничиваем значение минут и секунд (максимум 59)\r\n      if (parseInt(minutes, 10) > 59) {\r\n          minutes = '59';\r\n      }\r\n\r\n      if (parseInt(seconds, 10) > 59) {\r\n          seconds = '59';\r\n      }\r\n\r\n      // Формируем окончательное форматированное значение\r\n      if (seconds !== undefined && seconds !== '') {\r\n          formattedValue = `${hours} : ${minutes} : ${seconds}`;\r\n      } else if (minutes !== undefined && minutes !== '') {\r\n          formattedValue = `${hours} : ${minutes}`;\r\n      } else {\r\n          formattedValue = hours;\r\n      }\r\n\r\n      // Обновляем значение input элемента\r\n      this.inputElement.value = formattedValue;\r\n  }\r\n\r\n  /**\r\n   * Обработчик события keydown.\r\n   * Управляет поведением ввода в зависимости от нажатой клавиши.\r\n   * @param {KeyboardEvent} event - Объект события нажатия клавиши.\r\n   */\r\n  handleKeyDown(event) {\r\n      const key = event.key;\r\n\r\n      // Разрешаем ввод только цифр, клавиш Backspace, Delete и стрелок\r\n      if (\r\n          !/[0-9]/.test(key) &&\r\n          key !== 'Backspace' &&\r\n          key !== 'Delete' &&\r\n          key !== 'ArrowLeft' &&\r\n          key !== 'ArrowRight'\r\n      ) {\r\n          event.preventDefault();\r\n          return;\r\n      }\r\n\r\n      // Ограничиваем ввод, если уже достигнут максимальный формат 99 : 59 : 59\r\n      const currentValue = this.inputElement.value.replace(/[^0-9]/g, '');\r\n      if (currentValue.length >= 6 && key !== 'Backspace' && key !== 'Delete') {\r\n          event.preventDefault();\r\n          return;\r\n      }\r\n\r\n      // Обработка нажатия Backspace для пропуска двоеточий\r\n      if (key === 'Backspace') {\r\n          let value = this.inputElement.value;\r\n\r\n          // Если последний символ пробел, удаляем его\r\n          if (value.length > 0 && value[value.length - 1] === ' ') {\r\n              this.inputElement.value = value.slice(0, -1); // Удаляем пробел\r\n          } \r\n          // Если последний символ двоеточие, удаляем его и пробел перед ним\r\n          else if (value.length > 1 && value[value.length - 2] === ':') {\r\n              this.inputElement.value = value.slice(0, -2); // Удаляем двоеточие и пробел\r\n          }\r\n      }\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/ui/time-input/TimeInput.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 715,
    "kind": "class",
    "name": "TimeInput",
    "memberof": "ka/ui/time-input/TimeInput.js",
    "static": true,
    "longname": "ka/ui/time-input/TimeInput.js~TimeInput",
    "access": "public",
    "export": true,
    "importPath": "./ka/ui/time-input/TimeInput.js",
    "importStyle": "{TimeInput}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 716,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/ui/time-input/TimeInput.js~TimeInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/time-input/TimeInput.js~TimeInput#constructor",
    "access": "public",
    "description": "Конструктор класса TimeInput.",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "inputElement",
        "description": "HTML-элемент input, в который вводится время."
      }
    ]
  },
  {
    "__docId__": 717,
    "kind": "member",
    "name": "inputElement",
    "memberof": "ka/ui/time-input/TimeInput.js~TimeInput",
    "static": false,
    "longname": "ka/ui/time-input/TimeInput.js~TimeInput#inputElement",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 718,
    "kind": "method",
    "name": "handleInput",
    "memberof": "ka/ui/time-input/TimeInput.js~TimeInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/time-input/TimeInput.js~TimeInput#handleInput",
    "access": "public",
    "description": "Обработчик события input.\nФорматирует вводимое значение в виде времени чч : мм : сс.",
    "lineNumber": 21,
    "params": [],
    "return": null
  },
  {
    "__docId__": 719,
    "kind": "method",
    "name": "handleKeyDown",
    "memberof": "ka/ui/time-input/TimeInput.js~TimeInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/time-input/TimeInput.js~TimeInput#handleKeyDown",
    "access": "public",
    "description": "Обработчик события keydown.\nУправляет поведением ввода в зависимости от нажатой клавиши.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "KeyboardEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Объект события нажатия клавиши."
      }
    ],
    "return": null
  },
  {
    "__docId__": 720,
    "kind": "file",
    "name": "ka/ui/toggle/toggle.js",
    "content": "\r\n/**\r\n * Класс Toggle представляет собой визуальный элемент для переключения состояния.\r\n * \r\n * @example\r\n * const toggle = new Toggle('Переключить');\r\n * document.body.appendChild(toggle.element);\r\n */\r\nexport default class Toggle {\r\n    /**\r\n     * Конструктор класса Toggle.\r\n     * \r\n     * @param {string} caption - Подпись для элемента переключателя.\r\n     */\r\n    constructor(caption) {\r\n        // Создание основного элемента\r\n        this.element = document.createElement('label');\r\n        this.element.className = 'toggle';\r\n\r\n        // Создание элемента для флажка\r\n        this.input = document.createElement('input');\r\n        this.input.type = 'checkbox';\r\n        this.input.className = 'toggle-checkbox';\r\n\r\n        // Создание элемента для кнопки переключателя\r\n        const switchDiv = document.createElement('div');\r\n        switchDiv.className = 'toggle-switch';\r\n\r\n        // Создание элемента для подписи\r\n        this.label = document.createElement('span');\r\n        this.label.className = 'toggle-label';\r\n        this.label.textContent = caption;\r\n\r\n        // Добавление элементов в основной элемент\r\n        this.element.appendChild(this.input);\r\n        this.element.appendChild(switchDiv);\r\n        this.element.appendChild(this.label);\r\n    }\r\n\r\n    /**\r\n     * Переключает состояние флажка.\r\n     */\r\n    toggle() {\r\n        this.input.checked = !this.input.checked;\r\n    }\r\n\r\n    /**\r\n     * Возвращает элемент для флажка.\r\n     * \r\n     * @returns {HTMLInputElement}\r\n     */\r\n    getInput() {\r\n        return this.input;\r\n    }\r\n\r\n    /**\r\n     * Добавляет обработчик события при переключении состояния.\r\n     * \r\n     * @param {function} callback - Функция-обработчик события.\r\n     */\r\n    onChange(callback) {\r\n        this.input.addEventListener('change', callback);\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/ui/toggle/toggle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 721,
    "kind": "class",
    "name": "Toggle",
    "memberof": "ka/ui/toggle/toggle.js",
    "static": true,
    "longname": "ka/ui/toggle/toggle.js~Toggle",
    "access": "public",
    "export": true,
    "importPath": "./ka/ui/toggle/toggle.js",
    "importStyle": "Toggle",
    "description": "Класс Toggle представляет собой визуальный элемент для переключения состояния.",
    "examples": [
      "const toggle = new Toggle('Переключить');\ndocument.body.appendChild(toggle.element);"
    ],
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 722,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/ui/toggle/toggle.js~Toggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/toggle/toggle.js~Toggle#constructor",
    "access": "public",
    "description": "Конструктор класса Toggle.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "caption",
        "description": "Подпись для элемента переключателя."
      }
    ]
  },
  {
    "__docId__": 723,
    "kind": "member",
    "name": "element",
    "memberof": "ka/ui/toggle/toggle.js~Toggle",
    "static": false,
    "longname": "ka/ui/toggle/toggle.js~Toggle#element",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 724,
    "kind": "member",
    "name": "input",
    "memberof": "ka/ui/toggle/toggle.js~Toggle",
    "static": false,
    "longname": "ka/ui/toggle/toggle.js~Toggle#input",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 725,
    "kind": "member",
    "name": "label",
    "memberof": "ka/ui/toggle/toggle.js~Toggle",
    "static": false,
    "longname": "ka/ui/toggle/toggle.js~Toggle#label",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "method",
    "name": "toggle",
    "memberof": "ka/ui/toggle/toggle.js~Toggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/toggle/toggle.js~Toggle#toggle",
    "access": "public",
    "description": "Переключает состояние флажка.",
    "lineNumber": 43,
    "params": [],
    "return": null
  },
  {
    "__docId__": 727,
    "kind": "method",
    "name": "getInput",
    "memberof": "ka/ui/toggle/toggle.js~Toggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/toggle/toggle.js~Toggle#getInput",
    "access": "public",
    "description": "Возвращает элемент для флажка.",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLInputElement}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 728,
    "kind": "method",
    "name": "onChange",
    "memberof": "ka/ui/toggle/toggle.js~Toggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/ui/toggle/toggle.js~Toggle#onChange",
    "access": "public",
    "description": "Добавляет обработчик события при переключении состояния.",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция-обработчик события."
      }
    ],
    "return": null
  },
  {
    "__docId__": 729,
    "kind": "file",
    "name": "ka/utils/animateUtils.js",
    "content": "// TODO: Отправить в компоненты\r\nexport class Animation {\r\n    /**\r\n     * Представляет объект анимации.\r\n     *\r\n     * @constructor\r\n     * @param {number} speed - Скорость анимации. Если равно 2, то анимация будет проигрываться в два раза быстрее, чем задержка между кадрами.\r\n     * @param {number} delay - Задержка между кадрами анимации. - в миллисекундах (мс)\r\n     */\r\n    constructor(speed, delay) {\r\n        /**\r\n         * Скорость анимации.\r\n         * @type {number}\r\n         */\r\n        this.speed = speed;\r\n\r\n        /**\r\n         * Задержка между кадрами анимации. - в миллисекундах (мс)\r\n         * @type {number}\r\n         */\r\n        this.delay = delay;\r\n\r\n        /**\r\n         * Начальная дата анимации.\r\n         * @type {Date}\r\n         */\r\n        this.startDate = null;\r\n\r\n        /**\r\n         * Конечная дата анимации.\r\n         * @type {Date}\r\n         */\r\n        this.endDate = null;\r\n\r\n        /**\r\n         * Текущая дата анимации.\r\n         * @type {Date}\r\n         */\r\n        this.currentDate = null;\r\n\r\n        /**\r\n         * Функция обратного вызова, вызываемая на каждом кадре анимации.\r\n         * @type {Function}\r\n         */\r\n        this.callback = null;\r\n\r\n        /**\r\n         * Список функций обратного вызова, вызываемых на каждом кадре анимации.\r\n         * @type {Array.<Function>}\r\n         * \r\n         */\r\n        this.callbackList = [];\r\n\r\n        /**\r\n         * Статус, указывающий, запущена ли в данный момент анимация.\r\n         * @type {boolean}\r\n         */\r\n        this.animating = false;  // Указывает, выполняется ли в данный момент анимация\r\n\r\n        /**\r\n         * ID таймера анимации.\r\n         * @type {number}\r\n         */\r\n        this.timerId = null;    // ID таймера\r\n\r\n        /**\r\n         * Функция обратного вызова, вызываемая при изменении анимации.\r\n         * @type {Function}\r\n         */\r\n        this.onChangeCallback = () => { }; // Функция обратного вызова при изменении анимации\r\n\r\n        /**\r\n         * Функция обратного вызова, вызываемая при удалении анимации.\r\n         * @type {Function}\r\n         */\r\n        this.deleteCallback = () => { }; // Функция обратного вызова при удалении анимации\r\n\r\n        /**\r\n         * Функция обратного вызова, вызываемая при инициализации анимации.\r\n         * @type {Function}\r\n         */\r\n        this.initCallback = () => { }; // Функция обратного вызова при инициализации анимации\r\n    }\r\n\r\n\r\n    /**\r\n     * Инициализирует анимацию с заданными датами и функцией обратного вызова.\r\n     *\r\n     * @param {Date} startDate - Начальная дата анимации.\r\n     * @param {Date} endDate - Конечная дата анимации.\r\n     * @param {Function} callback - Функция обратного вызова, вызываемая на каждом кадре анимации.\r\n     */\r\n    init(startDate, endDate, callback) {\r\n        // Начальная дата анимации.\r\n        this.startDate = startDate;\r\n\r\n        // Конечная дата анимации.\r\n        this.endDate = endDate;\r\n\r\n        // Текущая дата анимации.\r\n        this.currentDate = new Date(startDate);\r\n\r\n        // Функция обратного вызова, вызываемая на каждом кадре анимации.\r\n        this.callback = callback;\r\n\r\n        // Вызываем функцию инициализации анимации.\r\n        this.initCallback();\r\n    }\r\n\r\n    /**\r\n     * Добавляет функцию обратного вызова в список функций.\r\n     * Эта функция будет вызываться при каждом кадре анимации.\r\n     *\r\n     * @param {Function} callback - Функция обратного вызова.\r\n     * Которая принимает: \r\n     * - `currentDate: {Date}`  - Текущая дата анимации.\r\n     */\r\n    addCallback(callback) {\r\n        // Добавляем новую функцию в список функций обратного вызова.\r\n        // Эта функция будет вызываться при каждом кадре анимации.\r\n        this.callbackList.push(callback);\r\n    }\r\n\r\n    /**\r\n     * Вызывает все функции обратного вызова с текущей датой анимации.\r\n     * Это полезно для обновления нескольких компонентов с одной и той же датой анимации.\r\n     */\r\n    triggerCallbacks() {\r\n        /**\r\n         * Проходим по каждой функции обратного вызова и выполняем ее с текущей датой анимации.\r\n         */\r\n        this.callbackList.forEach(callback => {\r\n            /**\r\n             * Выполняем функцию обратного вызова с текущей датой анимации.\r\n             * @param {Date} currentDate - Текущая дата анимации.\r\n             */\r\n            callback(this.currentDate);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Создает и запускает анимацию.\r\n     *\r\n     * @param {Date} startDate - Начальная дата анимации.\r\n     * @param {Date} endDate - Конечная дата анимации.\r\n     * @param {Function} callback - Функция обратного вызова, вызываемая на каждом кадре анимации. \r\n     * Которая принимает текущую дату анимации:\r\n     * - `currentDate: {Date}` - Текущая дата анимации.\r\n     */\r\n    create(startDate, endDate, callback) {\r\n        // Удаляем предыдущую анимацию, если есть.\r\n        this.delete();\r\n\r\n        // Инициализируем новую анимацию.\r\n        this.init(startDate, endDate, callback);\r\n\r\n        // Запускаем таймер для анимации.\r\n        this.timerId = setInterval(() => {\r\n            // Если текущая дата достигла конечной даты, анимация завершается.\r\n            if (this.currentDate >= this.endDate) {\r\n                this.stop();\r\n            }\r\n\r\n            // Если анимация активна, выполняем функцию обратного вызова с текущей датой.\r\n            if (this.animating) {\r\n                this.callback(this.currentDate);\r\n                this.triggerCallbacks();\r\n                // Открываем новое время с учетом скорости и задержки.\r\n                this.currentDate = new Date(this.currentDate.getTime() + this.speed * this.delay);\r\n            }\r\n        }, this.delay);\r\n    }\r\n    /**\r\n     * Устанавливает текущую дату анимации.\r\n     *\r\n     * @param {Date} date - Новая дата анимации. \r\n     */\r\n    setCurrentDate(date) {\r\n        /**\r\n         * Текущая дата анимации.\r\n         * @type {Date}\r\n         */\r\n        this.currentDate = date;\r\n    }\r\n\r\n    /**\r\n     * Устанавливает скорость анимации.\r\n     *\r\n     * @param {number} speed - Новая скорость анимации.\r\n     */\r\n    setSpeed(speed) {\r\n        /**\r\n         * Скорость анимации.\r\n         * @type {number}\r\n         */\r\n        this.speed = speed;\r\n    }\r\n\r\n\r\n    /**\r\n     * Стартует анимацию.\r\n     * Это устанавливает статус анимации в активный и вызывает функцию обратного вызова с этим статусом.\r\n     */\r\n    start() {\r\n        // Устанавливаем статус анимации в активный.\r\n        this.animating = true;\r\n\r\n        // Вызываем функцию обратного вызова с этим статусом.\r\n        this.onChangeCallback(this.animating);\r\n    }\r\n\r\n    /**\r\n     * Останавливает анимацию.\r\n     * Устанавливает статус анимации в неактивный и вызывает функцию обратного вызова \r\n     * с этим статусом.\r\n     */\r\n    stop() {\r\n        // Устанавливаем статус анимации в неактивный.\r\n        this.animating = false;\r\n\r\n        // Вызываем функцию обратного вызова с этим статусом.\r\n        // notify the callback about the change in animation status\r\n        this.onChangeCallback(this.animating);\r\n    }\r\n\r\n    /**\r\n     * Удаляет анимацию.\r\n     * Устанавливает статус анимации в неактивный, останавливает таймер, если он запущен,\r\n     * и вызывает функцию удаления.\r\n     */\r\n    delete() {\r\n        // Устанавливаем статус анимации в неактивный.\r\n        this.animating = false;\r\n\r\n        // Если таймер запущен, останавливаем его.\r\n        if (this.timerId) {\r\n            // Останавливаем таймер для анимации.\r\n            clearInterval(this.timerId);\r\n        }\r\n\r\n        // Вызываем функцию удаления.\r\n        this.deleteCallback();\r\n    }\r\n\r\n    /**\r\n     * Проверяет, активна ли в данный момент анимация.\r\n     *\r\n     * @return {boolean} - True, если анимация активна, false в противном случае.\r\n     */\r\n    isAnimating() {\r\n        /**\r\n         * Указывает, активна ли в данный момент анимация.\r\n         * @type {boolean}\r\n         */\r\n        return this.animating;\r\n    }\r\n\r\n\r\n    /**\r\n     * Проверяет, была ли создана анимация.\r\n     *\r\n     * @return {boolean} - True, если анимация создана, false в противном случае.\r\n     */\r\n    isCreated() {\r\n        /**\r\n         * Указывает, была ли создана анимация.\r\n         * @type {boolean}\r\n         */\r\n        // Проверяет, не равен ли timerId null, что означает, что анимация была создана.\r\n        return this.timerId !== null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Устанавливает функцию обратного вызова на изменение.\r\n     * Эта функция будет вызываться при изменении состояния анимации, то есть когда происходит возобновление и пауза анимации.\r\n     *\r\n     * @param {Function} callback - Функция обратного вызова.\r\n     * Которая принимает: \r\n     * - `animating: {boolean}` - Текущий статус анимации.\r\n     */\r\n    onChange(callback) {\r\n        /**\r\n         * Функция обратного вызова на изменение.\r\n         * @type {Function}\r\n         */\r\n        // Эта функция будет вызываться при каждом изменении свойств анимации.\r\n        this.onChangeCallback = callback;\r\n    }\r\n\r\n\r\n    /**\r\n     * Устанавливает функцию обратного вызова на удаление.\r\n     * Эта функция будет вызываться при удалении анимации.\r\n     *\r\n     * @param {Function} callback - Функция обратного вызова.\r\n     */\r\n    onDelete(callback) {\r\n        /**\r\n         * Функция обратного вызова на удаление.\r\n         * @type {Function}\r\n         */\r\n        // Эта функция будет вызываться при удалении анимации.\r\n        this.deleteCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * Устанавливает функцию обратного вызова при инициализации.\r\n     * Эта функция будет вызываться при инициализации анимации.\r\n     *\r\n     * @param {Function} callback - Функция обратного вызова.\r\n     */\r\n    onInit(callback) {\r\n        /**\r\n         * Функция обратного вызова при инициализации.\r\n         * @type {Function}\r\n         */\r\n        // Это функция будет вызываться при инициализации анимации.\r\n        this.initCallback = callback;\r\n    }\r\n\r\n}",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/utils/animateUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 730,
    "kind": "class",
    "name": "Animation",
    "memberof": "ka/utils/animateUtils.js",
    "static": true,
    "longname": "ka/utils/animateUtils.js~Animation",
    "access": "public",
    "export": true,
    "importPath": "./ka/utils/animateUtils.js",
    "importStyle": "{Animation}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 731,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#constructor",
    "access": "public",
    "description": "Представляет объект анимации.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "speed",
        "description": "Скорость анимации. Если равно 2, то анимация будет проигрываться в два раза быстрее, чем задержка между кадрами."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "delay",
        "description": "Задержка между кадрами анимации. - в миллисекундах (мс)"
      }
    ]
  },
  {
    "__docId__": 732,
    "kind": "member",
    "name": "speed",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#speed",
    "access": "public",
    "description": "Скорость анимации.",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 733,
    "kind": "member",
    "name": "delay",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#delay",
    "access": "public",
    "description": "Задержка между кадрами анимации. - в миллисекундах (мс)",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 734,
    "kind": "member",
    "name": "startDate",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#startDate",
    "access": "public",
    "description": "Начальная дата анимации.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 735,
    "kind": "member",
    "name": "endDate",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#endDate",
    "access": "public",
    "description": "Конечная дата анимации.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 736,
    "kind": "member",
    "name": "currentDate",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#currentDate",
    "access": "public",
    "description": "Текущая дата анимации.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 737,
    "kind": "member",
    "name": "callback",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#callback",
    "access": "public",
    "description": "Функция обратного вызова, вызываемая на каждом кадре анимации.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 738,
    "kind": "member",
    "name": "callbackList",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#callbackList",
    "access": "public",
    "description": "Список функций обратного вызова, вызываемых на каждом кадре анимации.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "Array.<Function>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 739,
    "kind": "member",
    "name": "animating",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#animating",
    "access": "public",
    "description": "Статус, указывающий, запущена ли в данный момент анимация.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 740,
    "kind": "member",
    "name": "timerId",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#timerId",
    "access": "public",
    "description": "ID таймера анимации.",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 741,
    "kind": "member",
    "name": "onChangeCallback",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#onChangeCallback",
    "access": "public",
    "description": "Функция обратного вызова, вызываемая при изменении анимации.",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 742,
    "kind": "member",
    "name": "deleteCallback",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#deleteCallback",
    "access": "public",
    "description": "Функция обратного вызова, вызываемая при удалении анимации.",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 743,
    "kind": "member",
    "name": "initCallback",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#initCallback",
    "access": "public",
    "description": "Функция обратного вызова, вызываемая при инициализации анимации.",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 744,
    "kind": "method",
    "name": "init",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#init",
    "access": "public",
    "description": "Инициализирует анимацию с заданными датами и функцией обратного вызова.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "startDate",
        "description": "Начальная дата анимации."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "endDate",
        "description": "Конечная дата анимации."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция обратного вызова, вызываемая на каждом кадре анимации."
      }
    ],
    "return": null
  },
  {
    "__docId__": 749,
    "kind": "method",
    "name": "addCallback",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#addCallback",
    "access": "public",
    "description": "Добавляет функцию обратного вызова в список функций.\nЭта функция будет вызываться при каждом кадре анимации.",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция обратного вызова.\nКоторая принимает: \n- `currentDate: {Date}`  - Текущая дата анимации."
      }
    ],
    "return": null
  },
  {
    "__docId__": 750,
    "kind": "method",
    "name": "triggerCallbacks",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#triggerCallbacks",
    "access": "public",
    "description": "Вызывает все функции обратного вызова с текущей датой анимации.\nЭто полезно для обновления нескольких компонентов с одной и той же датой анимации.",
    "lineNumber": 128,
    "params": [],
    "return": null
  },
  {
    "__docId__": 751,
    "kind": "method",
    "name": "create",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#create",
    "access": "public",
    "description": "Создает и запускает анимацию.",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "startDate",
        "description": "Начальная дата анимации."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "endDate",
        "description": "Конечная дата анимации."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция обратного вызова, вызываемая на каждом кадре анимации. \nКоторая принимает текущую дату анимации:\n- `currentDate: {Date}` - Текущая дата анимации."
      }
    ],
    "return": null
  },
  {
    "__docId__": 754,
    "kind": "method",
    "name": "setCurrentDate",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#setCurrentDate",
    "access": "public",
    "description": "Устанавливает текущую дату анимации.",
    "lineNumber": 180,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "Новая дата анимации."
      }
    ],
    "return": null
  },
  {
    "__docId__": 756,
    "kind": "method",
    "name": "setSpeed",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#setSpeed",
    "access": "public",
    "description": "Устанавливает скорость анимации.",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "speed",
        "description": "Новая скорость анимации."
      }
    ],
    "return": null
  },
  {
    "__docId__": 758,
    "kind": "method",
    "name": "start",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#start",
    "access": "public",
    "description": "Стартует анимацию.\nЭто устанавливает статус анимации в активный и вызывает функцию обратного вызова с этим статусом.",
    "lineNumber": 206,
    "params": [],
    "return": null
  },
  {
    "__docId__": 760,
    "kind": "method",
    "name": "stop",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#stop",
    "access": "public",
    "description": "Останавливает анимацию.\nУстанавливает статус анимации в неактивный и вызывает функцию обратного вызова \nс этим статусом.",
    "lineNumber": 219,
    "params": [],
    "return": null
  },
  {
    "__docId__": 762,
    "kind": "method",
    "name": "delete",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#delete",
    "access": "public",
    "description": "Удаляет анимацию.\nУстанавливает статус анимации в неактивный, останавливает таймер, если он запущен,\nи вызывает функцию удаления.",
    "lineNumber": 233,
    "params": [],
    "return": null
  },
  {
    "__docId__": 764,
    "kind": "method",
    "name": "isAnimating",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#isAnimating",
    "access": "public",
    "description": "Проверяет, активна ли в данный момент анимация.",
    "lineNumber": 252,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True, если анимация активна, false в противном случае."
    },
    "params": []
  },
  {
    "__docId__": 765,
    "kind": "method",
    "name": "isCreated",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#isCreated",
    "access": "public",
    "description": "Проверяет, была ли создана анимация.",
    "lineNumber": 266,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True, если анимация создана, false в противном случае."
    },
    "params": []
  },
  {
    "__docId__": 766,
    "kind": "method",
    "name": "onChange",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#onChange",
    "access": "public",
    "description": "Устанавливает функцию обратного вызова на изменение.\nЭта функция будет вызываться при изменении состояния анимации, то есть когда происходит возобновление и пауза анимации.",
    "lineNumber": 284,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция обратного вызова.\nКоторая принимает: \n- `animating: {boolean}` - Текущий статус анимации."
      }
    ],
    "return": null
  },
  {
    "__docId__": 768,
    "kind": "method",
    "name": "onDelete",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#onDelete",
    "access": "public",
    "description": "Устанавливает функцию обратного вызова на удаление.\nЭта функция будет вызываться при удалении анимации.",
    "lineNumber": 300,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция обратного вызова."
      }
    ],
    "return": null
  },
  {
    "__docId__": 770,
    "kind": "method",
    "name": "onInit",
    "memberof": "ka/utils/animateUtils.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ka/utils/animateUtils.js~Animation#onInit",
    "access": "public",
    "description": "Устанавливает функцию обратного вызова при инициализации.\nЭта функция будет вызываться при инициализации анимации.",
    "lineNumber": 315,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция обратного вызова."
      }
    ],
    "return": null
  },
  {
    "__docId__": 772,
    "kind": "file",
    "name": "ka/utils/dateUtils.js",
    "content": "/**\r\n * Модуль `dateUtils` содержит утилиты для работы с датами.\r\n *\r\n * @module dateUtils\r\n * @exports padTo2Digits\r\n * @exports setInputDate\r\n * @exports setInputTime\r\n * @exports getDateFromInputs\r\n * @exports formatDisplayDate\r\n * @exports formatDisplayTime\r\n */\r\n\r\n/**\r\n * Форматирует число, чтобы у него было не менее 2 знака.\r\n *\r\n * @param {number} num - Число, которое будет форматировано.\r\n * @return {string} - Форматированное число в виде строки.\r\n */\r\nconst padTo2Digits = (num) => {\r\n    return num.toString().padStart(2, '0');\r\n}\r\n\r\n/**\r\n * Установить значение элемента ввода типа 'date' из объекта JavaScript Date.\r\n *\r\n * @param {HTMLInputElement} dateInput - Элемент ввода типа 'date'.\r\n * @param {Date} date - Объект JavaScript Date.\r\n * @return {void}\r\n */\r\nconst setInputDate = (dateInput, date) => {\r\n    dateInput.value = [date.getFullYear(), padTo2Digits(date.getMonth() + 1), padTo2Digits(date.getDate()),].join('-')\r\n}\r\n\r\n/**\r\n * Установить значение элемента ввода типа 'time' из объекта JavaScript Date.\r\n *\r\n * @param {HTMLInputElement} timeInput - Элемент ввода типа 'time'.\r\n * @param {Date} date - Объект JavaScript Date.\r\n * @return {void}\r\n */\r\nconst setInputTime = (timeInput, date) => {\r\n    // Извлекаем часы, минуты и секунды из объекта даты и форматируем их как строку с ведущими нулями, если это необходимо.\r\n    // Например, 1:2:3 превращается в 01:02:03.\r\n    timeInput.value = [\r\n        padTo2Digits(date.getHours()),\r\n        padTo2Digits(date.getMinutes()),\r\n        padTo2Digits(date.getSeconds()),\r\n    ].join(':');\r\n}\r\n\r\n\r\n/**\r\n * Возвращает объект Date, созданный из значений ввода даты и времени.\r\n *\r\n * @param {HTMLInputElement} dateInput - Элемент ввода типа 'date'.\r\n * @param {HTMLInputElement} timeInput - Элемент ввода типа 'time'.\r\n * @return {Date} Объект Date, созданный из значений ввода даты и времени.\r\n */\r\nconst getDateFromInputs = (dateInput, timeInput) => {\r\n    // Формируем строку в формате 'yyyy-mm-ddThh:mm:ss', и создаем объект Date из нее.\r\n    // Пример: 2020-06-20T15:30:45\r\n    return new Date(dateInput.value + 'T' + timeInput.value);\r\n}\r\n\r\n\r\n/**\r\n * Возвращает строку, представляющую отображаемую дату в формате 'dd.mm.yyyy'.\r\n * \r\n * @param {Date} date - Объект JavaScript Date.\r\n * @return {string} Строка, представляющая отображаемую дату.\r\n */\r\nconst formatDisplayDate = (date) => {\r\n    // Формируем объект с опциями локализации даты.\r\n    // 'day': '2-digit' - дни в формате 2 цифры,\r\n    // 'month': '2-digit' - месяцы в формате 2 цифры,\r\n    // 'year': 'numeric' - год в числовом формате.\r\n    const options = {\r\n        day: '2-digit',\r\n        month: '2-digit',\r\n        year: 'numeric'\r\n    };\r\n\r\n    // Преобразуем объект Date в строку с использованием опций локализации.\r\n    // Результат представляет собой отображаемую дату в формате 'dd.mm.yyyy'.\r\n    return date.toLocaleDateString([], options);\r\n}\r\n\r\n\r\n/**\r\n * Возвращает строку, представляющую отображаемое время в формате 'hh:mm:ss'.\r\n *\r\n * @param {Date} date - Объект JavaScript Date.\r\n * @return {string} Строка, представляющая отображаемое время.\r\n */\r\nconst formatDisplayTime = (date) => {\r\n    // Формируем объект с опциями локализации времени.\r\n    // 'hour': '2-digit' - часы в формате 2 цифры,\r\n    // 'minute': '2-digit' - минуты в формате 2 цифры,\r\n    // 'second': '2-digit' - секунды в формате 2 цифры.\r\n    const options = {\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit'\r\n    };\r\n\r\n    // Преобразуем объект Date в строку с использованием опций локализации.\r\n    // Результат представляет собой отображаемое время в формате 'hh:mm:ss'.\r\n    return date.toLocaleTimeString([], options);\r\n}\r\n\r\n/**\r\n * Возвращает строку, представляющую отображаемую дату и время в формате 'dd.mm.yyyy, hh:mm:ss'.\r\n *\r\n * @param {Date} date - Объект JavaScript Date.\r\n * @param {string} prefix - Разделитель между датой и временем.\r\n * @return {string} Строка, представляющая отображаемую дату и время.\r\n */\r\nconst formatDisplayDateTime = (date, prefix=', ') => {\r\n    // Формируем отображаемую дату с помощью функции formatDisplayDate.\r\n    const formattedDate = formatDisplayDate(date);\r\n\r\n    // Формируем отображаемое время с помощью функции formatDisplayTime.\r\n    const formattedTime = formatDisplayTime(date);\r\n\r\n    // Возвращаем строку, содержащую отображаемую дату и время, разделенные запятой.\r\n    return formattedDate + prefix + formattedTime;\r\n}\r\n\r\n/**\r\n * Возвращает общее количество секунд в течение, указанном в элементе input.\r\n *\r\n * @param {HTMLInputElement} timeInput - Элемент input с временем.\r\n * @return {number} Общее количество секунд в течение.\r\n */\r\nconst getInputTotalSeconds = (timeInput) => {\r\n    const [hours, minutes, seconds] = timeInput.value.split(':').map(Number);\r\n    return (hours * 3600) + (minutes * 60) + seconds;\r\n}\r\n\r\n/**\r\n * Устанавливает значение элемента input типа 'time' из общего количества секунд.\r\n *\r\n * @param {HTMLInputElement} timeInput - Элемент input с временем.\r\n * @param {number} totalSeconds - Общее количество секунд в течение.\r\n */\r\nconst setInputTotalSeconds = (timeInput, totalSeconds) => {\r\n    // Разделение общего количества секунд на часы, минуты и секунды.\r\n    const hours = Math.floor(totalSeconds / 3600); // Получение числа часов.\r\n    const minutes = Math.floor((totalSeconds - (hours * 3600)) / 60); // Получение числа минут.\r\n    const seconds = totalSeconds - (hours * 3600) - (minutes * 60); // Получение числа секунд.\r\n\r\n    // Форматирование чисел в формате 2 цифры с ведущими нулями.\r\n    const formattedTime = [hours, minutes, seconds]\r\n        .map(n => n.toString().padStart(2, '0')) // Форматирование числа в формате 2 цифры.\r\n        .join(':'); // Объединение чисел в строку с использованием двоеточия.\r\n\r\n    // Установка значения элемента input.\r\n    timeInput.value = formattedTime;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Форматирует разницу во времени в удобочитаемый текст.\r\n * \r\n * @param {number} timeDiff - Разница во времени в миллисекундах.\r\n * @return {string} Отформатированный текст, представляющий разницу во времени.\r\n */\r\nfunction formatDisplayTextTimeDifference(timeDiff) {\r\n    const seconds = Math.floor(timeDiff / 1000);\r\n\r\n    if (seconds < 60) {\r\n        return `менее минуты назад`;\r\n    }\r\n    const minutes = Math.floor(seconds / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n    const days = Math.floor(hours / 24);\r\n    const weeks = Math.floor(days / 7);\r\n\r\n    if (weeks > 0) {\r\n        return `${weeks} недель назад`;\r\n    } else if (days > 0) {\r\n        return `${days} дней назад`;\r\n    } else if (hours > 0) {\r\n        return `${hours} часов назад`;\r\n    } else {\r\n        return `${minutes} минут назад`;\r\n    }\r\n}\r\n\r\n/**\r\n * Преобразует секунды в формат часы:минуты:секунды.\r\n *\r\n * @param {number} seconds - Количество секунд.\r\n * @return {string} Форматированный строк в формате часы:минуты:секунды.\r\n */\r\nfunction secondsToHMS(seconds) {\r\n    const h = String(Math.floor(seconds / 3600)).padStart(2, '0');\r\n    const m = String(Math.floor(seconds % 3600 / 60)).padStart(2, '0');\r\n    // const s = String(seconds % 60).padStart(2, '0');\r\n    const s = String(Math.floor(seconds % 60)).padStart(2, '0');\r\n    const ms = (seconds % 1).toFixed(3).substring(2); // Получаем миллисекунды с 3 знаками после запятой\r\n    return `${h}:${m}:${s}`;\r\n}\r\n\r\n/**\r\n * Модуль `dateUtils` содержит утилиты для работы с датами и временем.\r\n * Объединение в модуль (на подобии класса)\r\n *\r\n * @module dateUtils\r\n * @exports padTo2Digits\r\n * @exports setInputDate\r\n * @exports setInputTime\r\n * @exports getDateFromInputs\r\n * @exports formatDisplayDate\r\n * @exports formatDisplayTime\r\n * @exports formatDisplayDateTime\r\n * @exports getInputTotalSeconds\r\n * @exports setInputTotalSeconds\r\n * @exports formatDisplayTextTimeDifference\r\n * @exports secondsToHMS\r\n */\r\nconst dateUtils = {\r\n    padTo2Digits,\r\n    setInputDate,\r\n    setInputTime,\r\n    getDateFromInputs,\r\n    formatDisplayDate,\r\n    formatDisplayTime,\r\n    formatDisplayDateTime,\r\n    getInputTotalSeconds,\r\n    setInputTotalSeconds,\r\n    formatDisplayTextTimeDifference,\r\n    secondsToHMS\r\n};\r\n\r\nexport default dateUtils;\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/utils/dateUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 773,
    "kind": "function",
    "name": "padTo2Digits",
    "memberof": "ka/utils/dateUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/dateUtils.js~padTo2Digits",
    "access": "public",
    "export": false,
    "importPath": "./ka/utils/dateUtils.js",
    "importStyle": null,
    "description": "Форматирует число, чтобы у него было не менее 2 знака.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "Число, которое будет форматировано."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Форматированное число в виде строки."
    },
    "ignore": true
  },
  {
    "__docId__": 774,
    "kind": "function",
    "name": "setInputDate",
    "memberof": "ka/utils/dateUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/dateUtils.js~setInputDate",
    "access": "public",
    "export": false,
    "importPath": "./ka/utils/dateUtils.js",
    "importStyle": null,
    "description": "Установить значение элемента ввода типа 'date' из объекта JavaScript Date.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "dateInput",
        "description": "Элемент ввода типа 'date'."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "Объект JavaScript Date."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 775,
    "kind": "function",
    "name": "setInputTime",
    "memberof": "ka/utils/dateUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/dateUtils.js~setInputTime",
    "access": "public",
    "export": false,
    "importPath": "./ka/utils/dateUtils.js",
    "importStyle": null,
    "description": "Установить значение элемента ввода типа 'time' из объекта JavaScript Date.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "timeInput",
        "description": "Элемент ввода типа 'time'."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "Объект JavaScript Date."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 776,
    "kind": "function",
    "name": "getDateFromInputs",
    "memberof": "ka/utils/dateUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/dateUtils.js~getDateFromInputs",
    "access": "public",
    "export": false,
    "importPath": "./ka/utils/dateUtils.js",
    "importStyle": null,
    "description": "Возвращает объект Date, созданный из значений ввода даты и времени.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "dateInput",
        "description": "Элемент ввода типа 'date'."
      },
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "timeInput",
        "description": "Элемент ввода типа 'time'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": "Объект Date, созданный из значений ввода даты и времени."
    },
    "ignore": true
  },
  {
    "__docId__": 777,
    "kind": "function",
    "name": "formatDisplayDate",
    "memberof": "ka/utils/dateUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/dateUtils.js~formatDisplayDate",
    "access": "public",
    "export": false,
    "importPath": "./ka/utils/dateUtils.js",
    "importStyle": null,
    "description": "Возвращает строку, представляющую отображаемую дату в формате 'dd.mm.yyyy'.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "Объект JavaScript Date."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Строка, представляющая отображаемую дату."
    },
    "ignore": true
  },
  {
    "__docId__": 778,
    "kind": "function",
    "name": "formatDisplayTime",
    "memberof": "ka/utils/dateUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/dateUtils.js~formatDisplayTime",
    "access": "public",
    "export": false,
    "importPath": "./ka/utils/dateUtils.js",
    "importStyle": null,
    "description": "Возвращает строку, представляющую отображаемое время в формате 'hh:mm:ss'.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "Объект JavaScript Date."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Строка, представляющая отображаемое время."
    },
    "ignore": true
  },
  {
    "__docId__": 779,
    "kind": "function",
    "name": "formatDisplayDateTime",
    "memberof": "ka/utils/dateUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/dateUtils.js~formatDisplayDateTime",
    "access": "public",
    "export": false,
    "importPath": "./ka/utils/dateUtils.js",
    "importStyle": null,
    "description": "Возвращает строку, представляющую отображаемую дату и время в формате 'dd.mm.yyyy, hh:mm:ss'.",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "Объект JavaScript Date."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "Разделитель между датой и временем."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Строка, представляющая отображаемую дату и время."
    },
    "ignore": true
  },
  {
    "__docId__": 780,
    "kind": "function",
    "name": "getInputTotalSeconds",
    "memberof": "ka/utils/dateUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/dateUtils.js~getInputTotalSeconds",
    "access": "public",
    "export": false,
    "importPath": "./ka/utils/dateUtils.js",
    "importStyle": null,
    "description": "Возвращает общее количество секунд в течение, указанном в элементе input.",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "timeInput",
        "description": "Элемент input с временем."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Общее количество секунд в течение."
    },
    "ignore": true
  },
  {
    "__docId__": 781,
    "kind": "function",
    "name": "setInputTotalSeconds",
    "memberof": "ka/utils/dateUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/dateUtils.js~setInputTotalSeconds",
    "access": "public",
    "export": false,
    "importPath": "./ka/utils/dateUtils.js",
    "importStyle": null,
    "description": "Устанавливает значение элемента input типа 'time' из общего количества секунд.",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "timeInput",
        "description": "Элемент input с временем."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "totalSeconds",
        "description": "Общее количество секунд в течение."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 782,
    "kind": "function",
    "name": "formatDisplayTextTimeDifference",
    "memberof": "ka/utils/dateUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/dateUtils.js~formatDisplayTextTimeDifference",
    "access": "public",
    "export": false,
    "importPath": "./ka/utils/dateUtils.js",
    "importStyle": null,
    "description": "Форматирует разницу во времени в удобочитаемый текст.",
    "lineNumber": 169,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "timeDiff",
        "description": "Разница во времени в миллисекундах."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Отформатированный текст, представляющий разницу во времени."
    },
    "ignore": true
  },
  {
    "__docId__": 783,
    "kind": "function",
    "name": "secondsToHMS",
    "memberof": "ka/utils/dateUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/dateUtils.js~secondsToHMS",
    "access": "public",
    "export": false,
    "importPath": "./ka/utils/dateUtils.js",
    "importStyle": null,
    "description": "Преобразует секунды в формат часы:минуты:секунды.",
    "lineNumber": 197,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seconds",
        "description": "Количество секунд."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Форматированный строк в формате часы:минуты:секунды."
    },
    "ignore": true
  },
  {
    "__docId__": 784,
    "kind": "variable",
    "name": "dateUtils",
    "memberof": "ka/utils/dateUtils.js",
    "static": true,
    "longname": "ka/utils/dateUtils.js~dateUtils",
    "access": "public",
    "export": true,
    "importPath": "./ka/utils/dateUtils.js",
    "importStyle": "dateUtils",
    "description": "Модуль `dateUtils` содержит утилиты для работы с датами и временем.\nОбъединение в модуль (на подобии класса)",
    "lineNumber": 223,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "dateUtils"
      },
      {
        "tagName": "@exports",
        "tagValue": "padTo2Digits"
      },
      {
        "tagName": "@exports",
        "tagValue": "setInputDate"
      },
      {
        "tagName": "@exports",
        "tagValue": "setInputTime"
      },
      {
        "tagName": "@exports",
        "tagValue": "getDateFromInputs"
      },
      {
        "tagName": "@exports",
        "tagValue": "formatDisplayDate"
      },
      {
        "tagName": "@exports",
        "tagValue": "formatDisplayTime"
      },
      {
        "tagName": "@exports",
        "tagValue": "formatDisplayDateTime"
      },
      {
        "tagName": "@exports",
        "tagValue": "getInputTotalSeconds"
      },
      {
        "tagName": "@exports",
        "tagValue": "setInputTotalSeconds"
      },
      {
        "tagName": "@exports",
        "tagValue": "formatDisplayTextTimeDifference"
      },
      {
        "tagName": "@exports",
        "tagValue": "secondsToHMS"
      }
    ],
    "type": {
      "types": [
        "{\"padTo2Digits\": *, \"setInputDate\": *, \"setInputTime\": *, \"getDateFromInputs\": *, \"formatDisplayDate\": *, \"formatDisplayTime\": *, \"formatDisplayDateTime\": *, \"getInputTotalSeconds\": *, \"setInputTotalSeconds\": *, \"formatDisplayTextTimeDifference\": *, \"secondsToHMS\": *}"
      ]
    }
  },
  {
    "__docId__": 785,
    "kind": "file",
    "name": "ka/utils/fetchUtils.js",
    "content": "\r\n/**\r\n * Извлекает данные из указанного URL с использованием метода GET и передает эти данные\r\n * с помощью предоставленной функции обратного вызова. Также предоставляются необязательные\r\n * функции обратного вызова для состояний \"начало\", \"ошибка\" и \"конец\".\r\n *\r\n * @param {string} url - URL для извлечения данных.\r\n * @param {function} callback - Функция для вызова извлеченных данных.\r\n * @param {function} [startCallback=()=>{}] - Функция для вызова при начале извлечения.\r\n * @param {function} [errorCallback=(error, url)=>console.error(url, error)] - Функция для вызова при\r\n *   возникновении ошибки.\r\n * @param {function} [finalCallback=()=>{}] - Функция для вызова при завершении извлечения.\r\n */\r\nexport const fetchGETData = (url, callback, startCallback = () => { },\r\n    errorCallback = (error, url) => console.error(url, error),\r\n    finalCallback = () => { }) => {\r\n\r\n    startCallback(); // Вызываем функцию обратного вызова для начала\r\n\r\n    fetch(url) // Извлекаем URL\r\n        .then(response => {\r\n            if (!response.ok) { // Если ответ некорректный\r\n                throw new Error(response); // Выбрасываем ошибку\r\n            }\r\n            return response.json(); // Парсим ответ как JSON\r\n        })\r\n        .then(data => callback(data)) // Вызываем функцию обратного вызова с данными\r\n        .catch(error => errorCallback(error, url)) // Вызываем функцию обратного вызова ошибки с ошибкой\r\n        .finally(() => finalCallback()); // Вызываем функцию обратного вызова завершения\r\n}\r\n\r\n/**\r\n * Извлекает данные из указанного URL с использованием метода POST и передает их предоставленной функции обратного вызова.\r\n * Также предоставляются необязательные функции обратного вызова для состояний \"начало\", \"ошибка\" и \"конец\".\r\n *\r\n * @param {string} url - URL для извлечения данных.\r\n * @param {object} data - Данные для передачи в POST-запросе.\r\n * @param {function} callback - Функция для вызова извлеченных данных.\r\n * @param {function} [startCallback=()=>{}] - Функция для вызова при начале извлечения.\r\n * @param {function} [errorCallback=(error, url)=>console.error(url, error)] - Функция для вызова при возникновении ошибки.\r\n * @param {function} [finalCallback=()=>{}] - Функция для вызова при завершении извлечения.\r\n */\r\nexport const fetchPOSTData = (url, data, callback, startCallback = () => { },\r\n    errorCallback = (error, url) => console.error(url, error),\r\n    finalCallback = () => { }) => {\r\n\r\n    // Вызов функции обратного вызова для начала\r\n    startCallback();\r\n\r\n    // Извлечение данных из URL с использованием метода POST и передача данных\r\n    fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(response => {\r\n            if (!response.ok) { // Если ответ некорректный\r\n                throw new Error(response); // Выбрасываем ошибку\r\n            }\r\n            return response.json() // Парсим ответ как JSON\r\n        })\r\n        .then(data => callback(data)) // Вызываем функцию обратного вызова с данными\r\n        .catch(error => errorCallback(error, url)) // Вызываем функцию обратного вызова ошибки с ошибкой\r\n        .finally(() => finalCallback()); // Вызываем функцию обратного вызова завершения\r\n}\r\n\r\n/**\r\n * Загружает файл с использованием POST-запроса и сохраняет его на компьютере.\r\n *\r\n * @param {string} url - URL для запроса файла.\r\n * @param {object} data - Данные для передачи в POST-запросе.\r\n * @param {string} fileName - Имя файла для сохранения.\r\n * @param {function} [startCallback=()=>{}] - Функция для вызова при начале загрузки.\r\n * @param {function} [errorCallback=(error, url)=>console.error(url, error)] - Функция для вызова при ошибке.\r\n * @param {function} [finalCallback=()=>{}] - Функция для вызова при завершении загрузки.\r\n */\r\nexport function downloadPostFile(\r\n    url, data, fileName,\r\n    startCallback = () => { },\r\n    errorCallback = (error, url) => console.error(url, error),\r\n    finalCallback = () => { }\r\n) {\r\n\r\n    startCallback(); // Вызываем функцию обратного вызова для начала\r\n\r\n    fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(response => response.blob()) // Получаем объект Blob с содержимым ответа\r\n        .then(blob => {\r\n            // Создаем ссылку для скачивания файла\r\n            const downloadUrl = URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = downloadUrl;\r\n            link.download = fileName;\r\n            document.body.appendChild(link);\r\n            link.click(); // Вызываем клик по ссылке для скачивания файла\r\n            document.body.removeChild(link);\r\n            URL.revokeObjectURL(downloadUrl); // Удаляем ссылку\r\n        })\r\n        .catch(error => {\r\n            errorCallback(error, url); // Вызываем функцию обратного вызова ошибки\r\n        })\r\n        .finally(() => finalCallback()); // Вызываем функцию обратного вызова завершения\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/utils/fetchUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 786,
    "kind": "function",
    "name": "fetchGETData",
    "memberof": "ka/utils/fetchUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/fetchUtils.js~fetchGETData",
    "access": "public",
    "export": true,
    "importPath": "./ka/utils/fetchUtils.js",
    "importStyle": "{fetchGETData}",
    "description": "Извлекает данные из указанного URL с использованием метода GET и передает эти данные\nс помощью предоставленной функции обратного вызова. Также предоставляются необязательные\nфункции обратного вызова для состояний \"начало\", \"ошибка\" и \"конец\".",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "URL для извлечения данных."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция для вызова извлеченных данных."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "startCallback",
        "description": "Функция для вызова при начале извлечения."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "errorCallback",
        "description": "Функция для вызова при\n  возникновении ошибки."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "finalCallback",
        "description": "Функция для вызова при завершении извлечения."
      }
    ],
    "return": null
  },
  {
    "__docId__": 787,
    "kind": "function",
    "name": "fetchPOSTData",
    "memberof": "ka/utils/fetchUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/fetchUtils.js~fetchPOSTData",
    "access": "public",
    "export": true,
    "importPath": "./ka/utils/fetchUtils.js",
    "importStyle": "{fetchPOSTData}",
    "description": "Извлекает данные из указанного URL с использованием метода POST и передает их предоставленной функции обратного вызова.\nТакже предоставляются необязательные функции обратного вызова для состояний \"начало\", \"ошибка\" и \"конец\".",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "URL для извлечения данных."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Данные для передачи в POST-запросе."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция для вызова извлеченных данных."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "startCallback",
        "description": "Функция для вызова при начале извлечения."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "errorCallback",
        "description": "Функция для вызова при возникновении ошибки."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "finalCallback",
        "description": "Функция для вызова при завершении извлечения."
      }
    ],
    "return": null
  },
  {
    "__docId__": 788,
    "kind": "function",
    "name": "downloadPostFile",
    "memberof": "ka/utils/fetchUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/fetchUtils.js~downloadPostFile",
    "access": "public",
    "export": true,
    "importPath": "./ka/utils/fetchUtils.js",
    "importStyle": "{downloadPostFile}",
    "description": "Загружает файл с использованием POST-запроса и сохраняет его на компьютере.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "URL для запроса файла."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Данные для передачи в POST-запросе."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fileName",
        "description": "Имя файла для сохранения."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "startCallback",
        "description": "Функция для вызова при начале загрузки."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "errorCallback",
        "description": "Функция для вызова при ошибке."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "finalCallback",
        "description": "Функция для вызова при завершении загрузки."
      }
    ],
    "return": null
  },
  {
    "__docId__": 789,
    "kind": "file",
    "name": "ka/utils/screenUtils.js",
    "content": "/**\r\n * Асинхронно рендерит HTML-элемент в виде изображения PNG.\r\n * @param {HTMLElement} element - Рендеримый HTML-элемент.\r\n * @param {function} callback - Функция обратного вызова для обработки URL данных изображения.\r\n * @param {string} [filename='screen-element'] - Имя файла для результата изображения.\r\n */\r\nexport function getScreenElement(element, callback, filename = 'screen-element') {\r\n    // Рендерим элемент в виде PNG-изображения с белым фоном и скрытым переполнением.\r\n    domtoimage.toPng(element, {\r\n        width: element.scrollWidth + 25, // Добавляем 25 пикселей к ширине для учета скрытого переполнения.\r\n        height: element.scrollHeight + 25, // Добавляем 25 пикселей к высоте для учета скрытого переполнения.\r\n        bgcolor: 'white', // Устанавливаем фон белым.\r\n        style: {\r\n            'overflow': 'hidden' // Скрываем любое заширенное содержимое.\r\n        }\r\n    })\r\n        .then(function (dataUrl) {\r\n            // Вызываем функцию обратного вызова с полученным URL данными изображения.\r\n            callback(dataUrl);\r\n        });\r\n}\r\n\r\n/**\r\n * Асинхронно загружает HTML-элемент в виде изображения PNG.\r\n * @param {HTMLElement} element - Загружаемый HTML-элемент.\r\n * @param {string} [filename='screen-element'] - Имя файла для загруженного изображения.\r\n * @returns {Promise<string>} - Промис, который разрешается с URL-адресом данных загруженного изображения.\r\n */\r\nexport async function getScreenAsync(element, filename = 'screen-element') {\r\n    // Создаем промис, который разрешается с URL-адресом загруженного изображения.\r\n    const dataUrl = await new Promise((resolve, reject) => {\r\n        // Загружаем элемент в виде изображения PNG и разрешаем промис с URL-адресом данных изображения.\r\n        getScreenElement(element, (dataUrl) => {\r\n            resolve(dataUrl);\r\n        })\r\n    })\r\n\r\n    return dataUrl;\r\n}\r\n\r\n/**\r\n * Создает промис, который разрешается через заданное количество миллисекунд.\r\n * @param {number} ms - Количество миллисекунд, через которое промис разрешается.\r\n * @returns {Promise} - Промис, который разрешается через указанное количество миллисекунд.\r\n */\r\nexport function delay(ms) {\r\n    // Создаем новый промис, который разрешается через указанное количество миллисекунд, \r\n    // используя функцию setTimeout.\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/utils/screenUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 790,
    "kind": "function",
    "name": "getScreenElement",
    "memberof": "ka/utils/screenUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/screenUtils.js~getScreenElement",
    "access": "public",
    "export": true,
    "importPath": "./ka/utils/screenUtils.js",
    "importStyle": "{getScreenElement}",
    "description": "Асинхронно рендерит HTML-элемент в виде изображения PNG.",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "Рендеримый HTML-элемент."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Функция обратного вызова для обработки URL данных изображения."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'screen-element'",
        "defaultRaw": "'screen-element'",
        "name": "filename",
        "description": "Имя файла для результата изображения."
      }
    ],
    "return": null
  },
  {
    "__docId__": 791,
    "kind": "function",
    "name": "getScreenAsync",
    "memberof": "ka/utils/screenUtils.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "ka/utils/screenUtils.js~getScreenAsync",
    "access": "public",
    "export": true,
    "importPath": "./ka/utils/screenUtils.js",
    "importStyle": "{getScreenAsync}",
    "description": "Асинхронно загружает HTML-элемент в виде изображения PNG.",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>} - Промис, который разрешается с URL-адресом данных загруженного изображения."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "Загружаемый HTML-элемент."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'screen-element'",
        "defaultRaw": "'screen-element'",
        "name": "filename",
        "description": "Имя файла для загруженного изображения."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "Промис, который разрешается с URL-адресом данных загруженного изображения."
    }
  },
  {
    "__docId__": 792,
    "kind": "function",
    "name": "delay",
    "memberof": "ka/utils/screenUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/screenUtils.js~delay",
    "access": "public",
    "export": true,
    "importPath": "./ka/utils/screenUtils.js",
    "importStyle": "{delay}",
    "description": "Создает промис, который разрешается через заданное количество миллисекунд.",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Промис, который разрешается через указанное количество миллисекунд."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ms",
        "description": "Количество миллисекунд, через которое промис разрешается."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Промис, который разрешается через указанное количество миллисекунд."
    }
  },
  {
    "__docId__": 793,
    "kind": "file",
    "name": "ka/utils/tableUtils.js",
    "content": "/**\r\n * Функция для поиска строки в таблице Tabulator по указанному параметру и значению,\r\n * и возвращения значения поля \"id\" найденной строки. Если строка не найдена, функция возвращает null.\r\n *\r\n * @param {any} table - Экземпляр таблицы Tabulator, в которой будет производиться поиск.\r\n * @param {string} param - Имя поля, по которому будет производиться поиск.\r\n * @param {any} value - Значение поля, по которому будет производиться поиск.\r\n * @returns {any|null} Значение поля \"id\" найденной строки или null, если строка не найдена.\r\n *\r\n */\r\nexport function getIdByParam(table, param, value) {\r\n    // Получаем все данные из таблицы\r\n    const data = table.getData();\r\n\r\n    // Ищем нужную строку по названию\r\n    const row = data.find(row => row[param] === value);\r\n\r\n    // Если строка найдена, возвращаем ID\r\n    if (row) {\r\n        return row.id;\r\n    } else {\r\n        return null; // Если строка не найдена, возвращаем null\r\n    }\r\n}\r\n\r\n/**\r\n * Функция для поиска строк в таблице Tabulator по указанному параметру и списку значений,\r\n * и возвращения списка значений поля \"id\" найденных строк. Если строк не найдено, функция возвращает пустой массив.\r\n *\r\n * @param {any} table - Экземпляр таблицы Tabulator, в которой будет производиться поиск.\r\n * @param {string} param - Имя поля, по которому будет производиться поиск.\r\n * @param {Array} values - Массив значений поля, по которому будет производиться поиск.\r\n * @returns {Array} Массив значений поля \"id\" найденных строк или пустой массив, если строк не найдено.\r\n */\r\nexport function getIdsByParam(table, param, values) {\r\n    // Получаем все данные из таблицы\r\n    let data = table.getData();\r\n\r\n    // Фильтруем строки, удовлетворяющие условию, и возвращаем массив ID найденных строк\r\n    const rows = data.filter(row => values.includes(row[param]));\r\n    return rows.map(row => row.id);\r\n}\r\n",
    "static": true,
    "longname": "R:/Project/tests/jsdocx/static/ka/utils/tableUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 794,
    "kind": "function",
    "name": "getIdByParam",
    "memberof": "ka/utils/tableUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/tableUtils.js~getIdByParam",
    "access": "public",
    "export": true,
    "importPath": "./ka/utils/tableUtils.js",
    "importStyle": "{getIdByParam}",
    "description": "Функция для поиска строки в таблице Tabulator по указанному параметру и значению,\nи возвращения значения поля \"id\" найденной строки. Если строка не найдена, функция возвращает null.",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any|null} Значение поля \"id\" найденной строки или null, если строка не найдена."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "table",
        "description": "Экземпляр таблицы Tabulator, в которой будет производиться поиск."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "param",
        "description": "Имя поля, по которому будет производиться поиск."
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Значение поля, по которому будет производиться поиск."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any",
        "null"
      ],
      "spread": false,
      "description": "Значение поля \"id\" найденной строки или null, если строка не найдена."
    }
  },
  {
    "__docId__": 795,
    "kind": "function",
    "name": "getIdsByParam",
    "memberof": "ka/utils/tableUtils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ka/utils/tableUtils.js~getIdsByParam",
    "access": "public",
    "export": true,
    "importPath": "./ka/utils/tableUtils.js",
    "importStyle": "{getIdsByParam}",
    "description": "Функция для поиска строк в таблице Tabulator по указанному параметру и списку значений,\nи возвращения списка значений поля \"id\" найденных строк. Если строк не найдено, функция возвращает пустой массив.",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Массив значений поля \"id\" найденных строк или пустой массив, если строк не найдено."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "table",
        "description": "Экземпляр таблицы Tabulator, в которой будет производиться поиск."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "param",
        "description": "Имя поля, по которому будет производиться поиск."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "Массив значений поля, по которому будет производиться поиск."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Массив значений поля \"id\" найденных строк или пустой массив, если строк не найдено."
    }
  },
  {
    "kind": "index",
    "content": "тут сайтик наш",
    "longname": "R:\\Project\\tests\\jsdocx\\static\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"devDependencies\": {\n    \"esdoc\": \"^1.1.0\"\n  },\n  \"dependencies\": {\n    \"esdoc-standard-plugin\": \"^1.0.0\"\n  }\n}\n",
    "longname": "R:\\Project\\tests\\jsdocx\\static\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]